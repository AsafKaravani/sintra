/* eslint-disable */

import { AllTypesProps, ReturnTypes, Ops } from './const';
export const HOST = "https://sintra-dev.hasura.app/v1/graphql"


export const HEADERS = {}
export const apiSubscription = (options: chainOptions) => (query: string) => {
  try {
    const queryString = options[0] + '?query=' + encodeURIComponent(query);
    const wsString = queryString.replace('http', 'ws');
    const host = (options.length > 1 && options[1]?.websocket?.[0]) || wsString;
    const webSocketOptions = options[1]?.websocket || [host];
    const ws = new WebSocket(...webSocketOptions);
    return {
      ws,
      on: (e: (args: any) => void) => {
        ws.onmessage = (event: any) => {
          if (event.data) {
            const parsed = JSON.parse(event.data);
            const data = parsed.data;
            return e(data);
          }
        };
      },
      off: (e: (args: any) => void) => {
        ws.onclose = e;
      },
      error: (e: (args: any) => void) => {
        ws.onerror = e;
      },
      open: (e: () => void) => {
        ws.onopen = e;
      },
    };
  } catch {
    throw new Error('No websockets implemented');
  }
};
const handleFetchResponse = (response: Response): Promise<GraphQLResponse> => {
  if (!response.ok) {
    return new Promise((_, reject) => {
      response
        .text()
        .then((text) => {
          try {
            reject(JSON.parse(text));
          } catch (err) {
            reject(text);
          }
        })
        .catch(reject);
    });
  }
  return response.json() as Promise<GraphQLResponse>;
};

export const apiFetch =
  (options: fetchOptions) =>
  (query: string, variables: Record<string, unknown> = {}) => {
    const fetchOptions = options[1] || {};
    if (fetchOptions.method && fetchOptions.method === 'GET') {
      return fetch(`${options[0]}?query=${encodeURIComponent(query)}`, fetchOptions)
        .then(handleFetchResponse)
        .then((response: GraphQLResponse) => {
          if (response.errors) {
            throw new GraphQLError(response);
          }
          return response.data;
        });
    }
    return fetch(`${options[0]}`, {
      body: JSON.stringify({ query, variables }),
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      ...fetchOptions,
    })
      .then(handleFetchResponse)
      .then((response: GraphQLResponse) => {
        if (response.errors) {
          throw new GraphQLError(response);
        }
        return response.data;
      });
  };

export const InternalsBuildQuery = ({
  ops,
  props,
  returns,
  options,
  scalars,
}: {
  props: AllTypesPropsType;
  returns: ReturnTypesType;
  ops: Operations;
  options?: OperationOptions;
  scalars?: ScalarDefinition;
}) => {
  const ibb = (
    k: string,
    o: InputValueType | VType,
    p = '',
    root = true,
    vars: Array<{ name: string; graphQLType: string }> = [],
  ): string => {
    const keyForPath = purifyGraphQLKey(k);
    const newPath = [p, keyForPath].join(SEPARATOR);
    if (!o) {
      return '';
    }
    if (typeof o === 'boolean' || typeof o === 'number') {
      return k;
    }
    if (typeof o === 'string') {
      return `${k} ${o}`;
    }
    if (Array.isArray(o)) {
      const args = InternalArgsBuilt({
        props,
        returns,
        ops,
        scalars,
        vars,
      })(o[0], newPath);
      return `${ibb(args ? `${k}(${args})` : k, o[1], p, false, vars)}`;
    }
    if (k === '__alias') {
      return Object.entries(o)
        .map(([alias, objectUnderAlias]) => {
          if (typeof objectUnderAlias !== 'object' || Array.isArray(objectUnderAlias)) {
            throw new Error(
              'Invalid alias it should be __alias:{ YOUR_ALIAS_NAME: { OPERATION_NAME: { ...selectors }}}',
            );
          }
          const operationName = Object.keys(objectUnderAlias)[0];
          const operation = objectUnderAlias[operationName];
          return ibb(`${alias}:${operationName}`, operation, p, false, vars);
        })
        .join('\n');
    }
    const hasOperationName = root && options?.operationName ? ' ' + options.operationName : '';
    const keyForDirectives = o.__directives ?? '';
    const query = `{${Object.entries(o)
      .filter(([k]) => k !== '__directives')
      .map((e) => ibb(...e, [p, `field<>${keyForPath}`].join(SEPARATOR), false, vars))
      .join('\n')}}`;
    if (!root) {
      return `${k} ${keyForDirectives}${hasOperationName} ${query}`;
    }
    const varsString = vars.map((v) => `${v.name}: ${v.graphQLType}`).join(', ');
    return `${k} ${keyForDirectives}${hasOperationName}${varsString ? `(${varsString})` : ''} ${query}`;
  };
  return ibb;
};

export const Thunder =
  (fn: FetchFunction) =>
  <O extends keyof typeof Ops, SCLR extends ScalarDefinition, R extends keyof ValueTypes = GenericOperation<O>>(
    operation: O,
    graphqlOptions?: ThunderGraphQLOptions<SCLR>,
  ) =>
  <Z extends ValueTypes[R]>(
    o: (Z & ValueTypes[R]) | ValueTypes[R],
    ops?: OperationOptions & { variables?: Record<string, unknown> },
  ) =>
    fn(
      Zeus(operation, o, {
        operationOptions: ops,
        scalars: graphqlOptions?.scalars,
      }),
      ops?.variables,
    ).then((data) => {
      if (graphqlOptions?.scalars) {
        return decodeScalarsInResponse({
          response: data,
          initialOp: operation,
          initialZeusQuery: o as VType,
          returns: ReturnTypes,
          scalars: graphqlOptions.scalars,
          ops: Ops,
        });
      }
      return data;
    }) as Promise<InputType<GraphQLTypes[R], Z, SCLR>>;

export const Chain = (...options: chainOptions) => Thunder(apiFetch(options));

export const SubscriptionThunder =
  (fn: SubscriptionFunction) =>
  <O extends keyof typeof Ops, SCLR extends ScalarDefinition, R extends keyof ValueTypes = GenericOperation<O>>(
    operation: O,
    graphqlOptions?: ThunderGraphQLOptions<SCLR>,
  ) =>
  <Z extends ValueTypes[R]>(
    o: (Z & ValueTypes[R]) | ValueTypes[R],
    ops?: OperationOptions & { variables?: ExtractVariables<Z> },
  ) => {
    const returnedFunction = fn(
      Zeus(operation, o, {
        operationOptions: ops,
        scalars: graphqlOptions?.scalars,
      }),
    ) as SubscriptionToGraphQL<Z, GraphQLTypes[R], SCLR>;
    if (returnedFunction?.on && graphqlOptions?.scalars) {
      const wrapped = returnedFunction.on;
      returnedFunction.on = (fnToCall: (args: InputType<GraphQLTypes[R], Z, SCLR>) => void) =>
        wrapped((data: InputType<GraphQLTypes[R], Z, SCLR>) => {
          if (graphqlOptions?.scalars) {
            return fnToCall(
              decodeScalarsInResponse({
                response: data,
                initialOp: operation,
                initialZeusQuery: o as VType,
                returns: ReturnTypes,
                scalars: graphqlOptions.scalars,
                ops: Ops,
              }),
            );
          }
          return fnToCall(data);
        });
    }
    return returnedFunction;
  };

export const Subscription = (...options: chainOptions) => SubscriptionThunder(apiSubscription(options));
export const Zeus = <
  Z extends ValueTypes[R],
  O extends keyof typeof Ops,
  R extends keyof ValueTypes = GenericOperation<O>,
>(
  operation: O,
  o: (Z & ValueTypes[R]) | ValueTypes[R],
  ops?: {
    operationOptions?: OperationOptions;
    scalars?: ScalarDefinition;
  },
) =>
  InternalsBuildQuery({
    props: AllTypesProps,
    returns: ReturnTypes,
    ops: Ops,
    options: ops?.operationOptions,
    scalars: ops?.scalars,
  })(operation, o as VType);

export const ZeusSelect = <T>() => ((t: unknown) => t) as SelectionFunction<T>;

export const Selector = <T extends keyof ValueTypes>(key: T) => key && ZeusSelect<ValueTypes[T]>();

export const TypeFromSelector = <T extends keyof ValueTypes>(key: T) => key && ZeusSelect<ValueTypes[T]>();
export const Gql = Chain(HOST, {
  headers: {
    'Content-Type': 'application/json',
    ...HEADERS,
  },
});

export const ZeusScalars = ZeusSelect<ScalarCoders>();

export const decodeScalarsInResponse = <O extends Operations>({
  response,
  scalars,
  returns,
  ops,
  initialZeusQuery,
  initialOp,
}: {
  ops: O;
  response: any;
  returns: ReturnTypesType;
  scalars?: Record<string, ScalarResolver | undefined>;
  initialOp: keyof O;
  initialZeusQuery: InputValueType | VType;
}) => {
  if (!scalars) {
    return response;
  }
  const builder = PrepareScalarPaths({
    ops,
    returns,
  });

  const scalarPaths = builder(initialOp as string, ops[initialOp], initialZeusQuery);
  if (scalarPaths) {
    const r = traverseResponse({ scalarPaths, resolvers: scalars })(initialOp as string, response, [ops[initialOp]]);
    return r;
  }
  return response;
};

export const traverseResponse = ({
  resolvers,
  scalarPaths,
}: {
  scalarPaths: { [x: string]: `scalar.${string}` };
  resolvers: {
    [x: string]: ScalarResolver | undefined;
  };
}) => {
  const ibb = (k: string, o: InputValueType | VType, p: string[] = []): unknown => {
    if (Array.isArray(o)) {
      return o.map((eachO) => ibb(k, eachO, p));
    }
    if (o == null) {
      return o;
    }
    const scalarPathString = p.join(SEPARATOR);
    const currentScalarString = scalarPaths[scalarPathString];
    if (currentScalarString) {
      const currentDecoder = resolvers[currentScalarString.split('.')[1]]?.decode;
      if (currentDecoder) {
        return currentDecoder(o);
      }
    }
    if (typeof o === 'boolean' || typeof o === 'number' || typeof o === 'string' || !o) {
      return o;
    }
    const entries = Object.entries(o).map(([k, v]) => [k, ibb(k, v, [...p, purifyGraphQLKey(k)])] as const);
    const objectFromEntries = entries.reduce<Record<string, unknown>>((a, [k, v]) => {
      a[k] = v;
      return a;
    }, {});
    return objectFromEntries;
  };
  return ibb;
};

export type AllTypesPropsType = {
  [x: string]:
    | undefined
    | `scalar.${string}`
    | 'enum'
    | {
        [x: string]:
          | undefined
          | string
          | {
              [x: string]: string | undefined;
            };
      };
};

export type ReturnTypesType = {
  [x: string]:
    | {
        [x: string]: string | undefined;
      }
    | `scalar.${string}`
    | undefined;
};
export type InputValueType = {
  [x: string]: undefined | boolean | string | number | [any, undefined | boolean | InputValueType] | InputValueType;
};
export type VType =
  | undefined
  | boolean
  | string
  | number
  | [any, undefined | boolean | InputValueType]
  | InputValueType;

export type PlainType = boolean | number | string | null | undefined;
export type ZeusArgsType =
  | PlainType
  | {
      [x: string]: ZeusArgsType;
    }
  | Array<ZeusArgsType>;

export type Operations = Record<string, string>;

export type VariableDefinition = {
  [x: string]: unknown;
};

export const SEPARATOR = '|';

export type fetchOptions = Parameters<typeof fetch>;
type websocketOptions = typeof WebSocket extends new (...args: infer R) => WebSocket ? R : never;
export type chainOptions = [fetchOptions[0], fetchOptions[1] & { websocket?: websocketOptions }] | [fetchOptions[0]];
export type FetchFunction = (query: string, variables?: Record<string, unknown>) => Promise<any>;
export type SubscriptionFunction = (query: string) => any;
type NotUndefined<T> = T extends undefined ? never : T;
export type ResolverType<F> = NotUndefined<F extends [infer ARGS, any] ? ARGS : undefined>;

export type OperationOptions = {
  operationName?: string;
};

export type ScalarCoder = Record<string, (s: unknown) => string>;

export interface GraphQLResponse {
  data?: Record<string, any>;
  errors?: Array<{
    message: string;
  }>;
}
export class GraphQLError extends Error {
  constructor(public response: GraphQLResponse) {
    super('');
    console.error(response);
  }
  toString() {
    return 'GraphQL Response Error';
  }
}
export type GenericOperation<O> = O extends keyof typeof Ops ? typeof Ops[O] : never;
export type ThunderGraphQLOptions<SCLR extends ScalarDefinition> = {
  scalars?: SCLR | ScalarCoders;
};

const ExtractScalar = (mappedParts: string[], returns: ReturnTypesType): `scalar.${string}` | undefined => {
  if (mappedParts.length === 0) {
    return;
  }
  const oKey = mappedParts[0];
  const returnP1 = returns[oKey];
  if (typeof returnP1 === 'object') {
    const returnP2 = returnP1[mappedParts[1]];
    if (returnP2) {
      return ExtractScalar([returnP2, ...mappedParts.slice(2)], returns);
    }
    return undefined;
  }
  return returnP1 as `scalar.${string}` | undefined;
};

export const PrepareScalarPaths = ({ ops, returns }: { returns: ReturnTypesType; ops: Operations }) => {
  const ibb = (
    k: string,
    originalKey: string,
    o: InputValueType | VType,
    p: string[] = [],
    pOriginals: string[] = [],
    root = true,
  ): { [x: string]: `scalar.${string}` } | undefined => {
    if (!o) {
      return;
    }
    if (typeof o === 'boolean' || typeof o === 'number' || typeof o === 'string') {
      const extractionArray = [...pOriginals, originalKey];
      const isScalar = ExtractScalar(extractionArray, returns);
      if (isScalar?.startsWith('scalar')) {
        const partOfTree = {
          [[...p, k].join(SEPARATOR)]: isScalar,
        };
        return partOfTree;
      }
      return {};
    }
    if (Array.isArray(o)) {
      return ibb(k, k, o[1], p, pOriginals, false);
    }
    if (k === '__alias') {
      return Object.entries(o)
        .map(([alias, objectUnderAlias]) => {
          if (typeof objectUnderAlias !== 'object' || Array.isArray(objectUnderAlias)) {
            throw new Error(
              'Invalid alias it should be __alias:{ YOUR_ALIAS_NAME: { OPERATION_NAME: { ...selectors }}}',
            );
          }
          const operationName = Object.keys(objectUnderAlias)[0];
          const operation = objectUnderAlias[operationName];
          return ibb(alias, operationName, operation, p, pOriginals, false);
        })
        .reduce((a, b) => ({
          ...a,
          ...b,
        }));
    }
    const keyName = root ? ops[k] : k;
    return Object.entries(o)
      .filter(([k]) => k !== '__directives')
      .map(([k, v]) => {
        // Inline fragments shouldn't be added to the path as they aren't a field
        const isInlineFragment = originalKey.match(/^...\s*on/) != null;
        return ibb(
          k,
          k,
          v,
          isInlineFragment ? p : [...p, purifyGraphQLKey(keyName || k)],
          isInlineFragment ? pOriginals : [...pOriginals, purifyGraphQLKey(originalKey)],
          false,
        );
      })
      .reduce((a, b) => ({
        ...a,
        ...b,
      }));
  };
  return ibb;
};

export const purifyGraphQLKey = (k: string) => k.replace(/\([^)]*\)/g, '').replace(/^[^:]*\:/g, '');

const mapPart = (p: string) => {
  const [isArg, isField] = p.split('<>');
  if (isField) {
    return {
      v: isField,
      __type: 'field',
    } as const;
  }
  return {
    v: isArg,
    __type: 'arg',
  } as const;
};

type Part = ReturnType<typeof mapPart>;

export const ResolveFromPath = (props: AllTypesPropsType, returns: ReturnTypesType, ops: Operations) => {
  const ResolvePropsType = (mappedParts: Part[]) => {
    const oKey = ops[mappedParts[0].v];
    const propsP1 = oKey ? props[oKey] : props[mappedParts[0].v];
    if (propsP1 === 'enum' && mappedParts.length === 1) {
      return 'enum';
    }
    if (typeof propsP1 === 'string' && propsP1.startsWith('scalar.') && mappedParts.length === 1) {
      return propsP1;
    }
    if (typeof propsP1 === 'object') {
      if (mappedParts.length < 2) {
        return 'not';
      }
      const propsP2 = propsP1[mappedParts[1].v];
      if (typeof propsP2 === 'string') {
        return rpp(
          `${propsP2}${SEPARATOR}${mappedParts
            .slice(2)
            .map((mp) => mp.v)
            .join(SEPARATOR)}`,
        );
      }
      if (typeof propsP2 === 'object') {
        if (mappedParts.length < 3) {
          return 'not';
        }
        const propsP3 = propsP2[mappedParts[2].v];
        if (propsP3 && mappedParts[2].__type === 'arg') {
          return rpp(
            `${propsP3}${SEPARATOR}${mappedParts
              .slice(3)
              .map((mp) => mp.v)
              .join(SEPARATOR)}`,
          );
        }
      }
    }
  };
  const ResolveReturnType = (mappedParts: Part[]) => {
    if (mappedParts.length === 0) {
      return 'not';
    }
    const oKey = ops[mappedParts[0].v];
    const returnP1 = oKey ? returns[oKey] : returns[mappedParts[0].v];
    if (typeof returnP1 === 'object') {
      if (mappedParts.length < 2) return 'not';
      const returnP2 = returnP1[mappedParts[1].v];
      if (returnP2) {
        return rpp(
          `${returnP2}${SEPARATOR}${mappedParts
            .slice(2)
            .map((mp) => mp.v)
            .join(SEPARATOR)}`,
        );
      }
    }
  };
  const rpp = (path: string): 'enum' | 'not' | `scalar.${string}` => {
    const parts = path.split(SEPARATOR).filter((l) => l.length > 0);
    const mappedParts = parts.map(mapPart);
    const propsP1 = ResolvePropsType(mappedParts);
    if (propsP1) {
      return propsP1;
    }
    const returnP1 = ResolveReturnType(mappedParts);
    if (returnP1) {
      return returnP1;
    }
    return 'not';
  };
  return rpp;
};

export const InternalArgsBuilt = ({
  props,
  ops,
  returns,
  scalars,
  vars,
}: {
  props: AllTypesPropsType;
  returns: ReturnTypesType;
  ops: Operations;
  scalars?: ScalarDefinition;
  vars: Array<{ name: string; graphQLType: string }>;
}) => {
  const arb = (a: ZeusArgsType, p = '', root = true): string => {
    if (typeof a === 'string') {
      if (a.startsWith(START_VAR_NAME)) {
        const [varName, graphQLType] = a.replace(START_VAR_NAME, '$').split(GRAPHQL_TYPE_SEPARATOR);
        const v = vars.find((v) => v.name === varName);
        if (!v) {
          vars.push({
            name: varName,
            graphQLType,
          });
        } else {
          if (v.graphQLType !== graphQLType) {
            throw new Error(
              `Invalid variable exists with two different GraphQL Types, "${v.graphQLType}" and ${graphQLType}`,
            );
          }
        }
        return varName;
      }
    }
    const checkType = ResolveFromPath(props, returns, ops)(p);
    if (checkType.startsWith('scalar.')) {
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const [_, ...splittedScalar] = checkType.split('.');
      const scalarKey = splittedScalar.join('.');
      return (scalars?.[scalarKey]?.encode?.(a) as string) || JSON.stringify(a);
    }
    if (Array.isArray(a)) {
      return `[${a.map((arr) => arb(arr, p, false)).join(', ')}]`;
    }
    if (typeof a === 'string') {
      if (checkType === 'enum') {
        return a;
      }
      return `${JSON.stringify(a)}`;
    }
    if (typeof a === 'object') {
      if (a === null) {
        return `null`;
      }
      const returnedObjectString = Object.entries(a)
        .filter(([, v]) => typeof v !== 'undefined')
        .map(([k, v]) => `${k}: ${arb(v, [p, k].join(SEPARATOR), false)}`)
        .join(',\n');
      if (!root) {
        return `{${returnedObjectString}}`;
      }
      return returnedObjectString;
    }
    return `${a}`;
  };
  return arb;
};

export const resolverFor = <X, T extends keyof ResolverInputTypes, Z extends keyof ResolverInputTypes[T]>(
  type: T,
  field: Z,
  fn: (
    args: Required<ResolverInputTypes[T]>[Z] extends [infer Input, any] ? Input : any,
    source: any,
  ) => Z extends keyof ModelTypes[T] ? ModelTypes[T][Z] | Promise<ModelTypes[T][Z]> | X : never,
) => fn as (args?: any, source?: any) => ReturnType<typeof fn>;

export type UnwrapPromise<T> = T extends Promise<infer R> ? R : T;
export type ZeusState<T extends (...args: any[]) => Promise<any>> = NonNullable<UnwrapPromise<ReturnType<T>>>;
export type ZeusHook<
  T extends (...args: any[]) => Record<string, (...args: any[]) => Promise<any>>,
  N extends keyof ReturnType<T>,
> = ZeusState<ReturnType<T>[N]>;

export type WithTypeNameValue<T> = T & {
  __typename?: boolean;
  __directives?: string;
};
export type AliasType<T> = WithTypeNameValue<T> & {
  __alias?: Record<string, WithTypeNameValue<T>>;
};
type DeepAnify<T> = {
  [P in keyof T]?: any;
};
type IsPayLoad<T> = T extends [any, infer PayLoad] ? PayLoad : T;
export type ScalarDefinition = Record<string, ScalarResolver>;

type IsScalar<S, SCLR extends ScalarDefinition> = S extends 'scalar' & { name: infer T }
  ? T extends keyof SCLR
    ? SCLR[T]['decode'] extends (s: unknown) => unknown
      ? ReturnType<SCLR[T]['decode']>
      : unknown
    : unknown
  : S;
type IsArray<T, U, SCLR extends ScalarDefinition> = T extends Array<infer R>
  ? InputType<R, U, SCLR>[]
  : InputType<T, U, SCLR>;
type FlattenArray<T> = T extends Array<infer R> ? R : T;
type BaseZeusResolver = boolean | 1 | string | Variable<any, string>;

type IsInterfaced<SRC extends DeepAnify<DST>, DST, SCLR extends ScalarDefinition> = FlattenArray<SRC> extends
  | ZEUS_INTERFACES
  | ZEUS_UNIONS
  ? {
      [P in keyof SRC]: SRC[P] extends '__union' & infer R
        ? P extends keyof DST
          ? IsArray<R, '__typename' extends keyof DST ? DST[P] & { __typename: true } : DST[P], SCLR>
          : IsArray<R, '__typename' extends keyof DST ? { __typename: true } : Record<string, never>, SCLR>
        : never;
    }[keyof SRC] & {
      [P in keyof Omit<
        Pick<
          SRC,
          {
            [P in keyof DST]: SRC[P] extends '__union' & infer R ? never : P;
          }[keyof DST]
        >,
        '__typename'
      >]: IsPayLoad<DST[P]> extends BaseZeusResolver ? IsScalar<SRC[P], SCLR> : IsArray<SRC[P], DST[P], SCLR>;
    }
  : {
      [P in keyof Pick<SRC, keyof DST>]: IsPayLoad<DST[P]> extends BaseZeusResolver
        ? IsScalar<SRC[P], SCLR>
        : IsArray<SRC[P], DST[P], SCLR>;
    };

export type MapType<SRC, DST, SCLR extends ScalarDefinition> = SRC extends DeepAnify<DST>
  ? IsInterfaced<SRC, DST, SCLR>
  : never;
// eslint-disable-next-line @typescript-eslint/ban-types
export type InputType<SRC, DST, SCLR extends ScalarDefinition = {}> = IsPayLoad<DST> extends { __alias: infer R }
  ? {
      [P in keyof R]: MapType<SRC, R[P], SCLR>[keyof MapType<SRC, R[P], SCLR>];
    } & MapType<SRC, Omit<IsPayLoad<DST>, '__alias'>, SCLR>
  : MapType<SRC, IsPayLoad<DST>, SCLR>;
export type SubscriptionToGraphQL<Z, T, SCLR extends ScalarDefinition> = {
  ws: WebSocket;
  on: (fn: (args: InputType<T, Z, SCLR>) => void) => void;
  off: (fn: (e: { data?: InputType<T, Z, SCLR>; code?: number; reason?: string; message?: string }) => void) => void;
  error: (fn: (e: { data?: InputType<T, Z, SCLR>; errors?: string[] }) => void) => void;
  open: () => void;
};

// eslint-disable-next-line @typescript-eslint/ban-types
export type FromSelector<SELECTOR, NAME extends keyof GraphQLTypes, SCLR extends ScalarDefinition = {}> = InputType<
  GraphQLTypes[NAME],
  SELECTOR,
  SCLR
>;

export type ScalarResolver = {
  encode?: (s: unknown) => string;
  decode?: (s: unknown) => unknown;
};

export type SelectionFunction<V> = <T>(t: T | V) => T;

type BuiltInVariableTypes = {
  ['String']: string;
  ['Int']: number;
  ['Float']: number;
  ['ID']: unknown;
  ['Boolean']: boolean;
};
type AllVariableTypes = keyof BuiltInVariableTypes | keyof ZEUS_VARIABLES;
type VariableRequired<T extends string> = `${T}!` | T | `[${T}]` | `[${T}]!` | `[${T}!]` | `[${T}!]!`;
type VR<T extends string> = VariableRequired<VariableRequired<T>>;

export type GraphQLVariableType = VR<AllVariableTypes>;

type ExtractVariableTypeString<T extends string> = T extends VR<infer R1>
  ? R1 extends VR<infer R2>
    ? R2 extends VR<infer R3>
      ? R3 extends VR<infer R4>
        ? R4 extends VR<infer R5>
          ? R5
          : R4
        : R3
      : R2
    : R1
  : T;

type DecomposeType<T, Type> = T extends `[${infer R}]`
  ? Array<DecomposeType<R, Type>> | undefined
  : T extends `${infer R}!`
  ? NonNullable<DecomposeType<R, Type>>
  : Type | undefined;

type ExtractTypeFromGraphQLType<T extends string> = T extends keyof ZEUS_VARIABLES
  ? ZEUS_VARIABLES[T]
  : T extends keyof BuiltInVariableTypes
  ? BuiltInVariableTypes[T]
  : any;

export type GetVariableType<T extends string> = DecomposeType<
  T,
  ExtractTypeFromGraphQLType<ExtractVariableTypeString<T>>
>;

type UndefinedKeys<T> = {
  [K in keyof T]-?: T[K] extends NonNullable<T[K]> ? never : K;
}[keyof T];

type WithNullableKeys<T> = Pick<T, UndefinedKeys<T>>;
type WithNonNullableKeys<T> = Omit<T, UndefinedKeys<T>>;

type OptionalKeys<T> = {
  [P in keyof T]?: T[P];
};

export type WithOptionalNullables<T> = OptionalKeys<WithNullableKeys<T>> & WithNonNullableKeys<T>;

export type Variable<T extends GraphQLVariableType, Name extends string> = {
  ' __zeus_name': Name;
  ' __zeus_type': T;
};

export type ExtractVariablesDeep<Query> = Query extends Variable<infer VType, infer VName>
  ? { [key in VName]: GetVariableType<VType> }
  : Query extends string | number | boolean | Array<string | number | boolean>
  ? // eslint-disable-next-line @typescript-eslint/ban-types
    {}
  : UnionToIntersection<{ [K in keyof Query]: WithOptionalNullables<ExtractVariablesDeep<Query[K]>> }[keyof Query]>;

export type ExtractVariables<Query> = Query extends Variable<infer VType, infer VName>
  ? { [key in VName]: GetVariableType<VType> }
  : Query extends [infer Inputs, infer Outputs]
  ? ExtractVariablesDeep<Inputs> & ExtractVariables<Outputs>
  : Query extends string | number | boolean | Array<string | number | boolean>
  ? // eslint-disable-next-line @typescript-eslint/ban-types
    {}
  : UnionToIntersection<{ [K in keyof Query]: WithOptionalNullables<ExtractVariables<Query[K]>> }[keyof Query]>;

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;

export const START_VAR_NAME = `$ZEUS_VAR`;
export const GRAPHQL_TYPE_SEPARATOR = `__$GRAPHQL__`;

export const $ = <Type extends GraphQLVariableType, Name extends string>(name: Name, graphqlType: Type) => {
  return (START_VAR_NAME + name + GRAPHQL_TYPE_SEPARATOR + graphqlType) as unknown as Variable<Type, Name>;
};
type ZEUS_INTERFACES = never
export type ScalarCoders = {
	CertificateClaimStatus?: ScalarResolver;
	OfferType?: ScalarResolver;
	TransactionStatus?: ScalarResolver;
	float8?: ScalarResolver;
	timestamp?: ScalarResolver;
	timestamptz?: ScalarResolver;
}
type ZEUS_UNIONS = never

export type ValueTypes = {
    /** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
["Boolean_comparison_exp"]: {
	_eq?: boolean | undefined | null | Variable<any, string>,
	_gt?: boolean | undefined | null | Variable<any, string>,
	_gte?: boolean | undefined | null | Variable<any, string>,
	_in?: Array<boolean> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_lt?: boolean | undefined | null | Variable<any, string>,
	_lte?: boolean | undefined | null | Variable<any, string>,
	_neq?: boolean | undefined | null | Variable<any, string>,
	_nin?: Array<boolean> | undefined | null | Variable<any, string>
};
	/** columns and relationships of "Business" */
["Business"]: AliasType<{
BusinessProducts?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["BusinessProduct_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["BusinessProduct_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["BusinessProduct_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["BusinessProduct"]],
BusinessProducts_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["BusinessProduct_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["BusinessProduct_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["BusinessProduct_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["BusinessProduct_aggregate"]],
BusinessWorkers?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["BusinessWorker_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["BusinessWorker_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["BusinessWorker_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["BusinessWorker"]],
BusinessWorkers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["BusinessWorker_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["BusinessWorker_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["BusinessWorker_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["BusinessWorker_aggregate"]],
CertificateClaims?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["CertificateClaim_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["CertificateClaim_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["CertificateClaim_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["CertificateClaim"]],
CertificateClaims_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["CertificateClaim_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["CertificateClaim_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["CertificateClaim_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["CertificateClaim_aggregate"]],
Offers?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Offer_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Offer_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Offer"]],
Offers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Offer_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Offer_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Offer_aggregate"]],
Orders?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Order_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Order_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Order"]],
Orders_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Order_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Order_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Order_aggregate"]],
	address?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	phone?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "BusinessProduct" */
["BusinessProduct"]: AliasType<{
	/** An object relationship */
	Business?:ValueTypes["Business"],
	/** An object relationship */
	Product?:ValueTypes["Product"],
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "BusinessProduct" */
["BusinessProduct_aggregate"]: AliasType<{
	aggregate?:ValueTypes["BusinessProduct_aggregate_fields"],
	nodes?:ValueTypes["BusinessProduct"],
		__typename?: boolean | `@${string}`
}>;
	["BusinessProduct_aggregate_bool_exp"]: {
	count?: ValueTypes["BusinessProduct_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["BusinessProduct_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["BusinessProduct_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["BusinessProduct_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "BusinessProduct" */
["BusinessProduct_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["BusinessProduct_avg_fields"],
count?: [{	columns?: Array<ValueTypes["BusinessProduct_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["BusinessProduct_max_fields"],
	min?:ValueTypes["BusinessProduct_min_fields"],
	stddev?:ValueTypes["BusinessProduct_stddev_fields"],
	stddev_pop?:ValueTypes["BusinessProduct_stddev_pop_fields"],
	stddev_samp?:ValueTypes["BusinessProduct_stddev_samp_fields"],
	sum?:ValueTypes["BusinessProduct_sum_fields"],
	var_pop?:ValueTypes["BusinessProduct_var_pop_fields"],
	var_samp?:ValueTypes["BusinessProduct_var_samp_fields"],
	variance?:ValueTypes["BusinessProduct_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "BusinessProduct" */
["BusinessProduct_aggregate_order_by"]: {
	avg?: ValueTypes["BusinessProduct_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["BusinessProduct_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["BusinessProduct_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["BusinessProduct_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["BusinessProduct_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["BusinessProduct_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["BusinessProduct_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["BusinessProduct_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["BusinessProduct_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["BusinessProduct_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "BusinessProduct" */
["BusinessProduct_arr_rel_insert_input"]: {
	data: Array<ValueTypes["BusinessProduct_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["BusinessProduct_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["BusinessProduct_avg_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "BusinessProduct" */
["BusinessProduct_avg_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "BusinessProduct". All fields are combined with a logical 'AND'. */
["BusinessProduct_bool_exp"]: {
	Business?: ValueTypes["Business_bool_exp"] | undefined | null | Variable<any, string>,
	Product?: ValueTypes["Product_bool_exp"] | undefined | null | Variable<any, string>,
	_and?: Array<ValueTypes["BusinessProduct_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["BusinessProduct_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["BusinessProduct_bool_exp"]> | undefined | null | Variable<any, string>,
	business_id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "BusinessProduct" */
["BusinessProduct_constraint"]:BusinessProduct_constraint;
	/** input type for incrementing numeric columns in table "BusinessProduct" */
["BusinessProduct_inc_input"]: {
	business_id?: number | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	product_id?: number | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "BusinessProduct" */
["BusinessProduct_insert_input"]: {
	Business?: ValueTypes["Business_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	Product?: ValueTypes["Product_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	business_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	product_id?: number | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["BusinessProduct_max_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "BusinessProduct" */
["BusinessProduct_max_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["BusinessProduct_min_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "BusinessProduct" */
["BusinessProduct_min_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "BusinessProduct" */
["BusinessProduct_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["BusinessProduct"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "BusinessProduct" */
["BusinessProduct_on_conflict"]: {
	constraint: ValueTypes["BusinessProduct_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["BusinessProduct_update_column"]> | Variable<any, string>,
	where?: ValueTypes["BusinessProduct_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "BusinessProduct". */
["BusinessProduct_order_by"]: {
	Business?: ValueTypes["Business_order_by"] | undefined | null | Variable<any, string>,
	Product?: ValueTypes["Product_order_by"] | undefined | null | Variable<any, string>,
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: BusinessProduct */
["BusinessProduct_pk_columns_input"]: {
	id: number | Variable<any, string>
};
	/** select columns of table "BusinessProduct" */
["BusinessProduct_select_column"]:BusinessProduct_select_column;
	/** input type for updating data in table "BusinessProduct" */
["BusinessProduct_set_input"]: {
	business_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	product_id?: number | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["BusinessProduct_stddev_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "BusinessProduct" */
["BusinessProduct_stddev_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["BusinessProduct_stddev_pop_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "BusinessProduct" */
["BusinessProduct_stddev_pop_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["BusinessProduct_stddev_samp_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "BusinessProduct" */
["BusinessProduct_stddev_samp_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "BusinessProduct" */
["BusinessProduct_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["BusinessProduct_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["BusinessProduct_stream_cursor_value_input"]: {
	business_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	product_id?: number | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["BusinessProduct_sum_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "BusinessProduct" */
["BusinessProduct_sum_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "BusinessProduct" */
["BusinessProduct_update_column"]:BusinessProduct_update_column;
	["BusinessProduct_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["BusinessProduct_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["BusinessProduct_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["BusinessProduct_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["BusinessProduct_var_pop_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "BusinessProduct" */
["BusinessProduct_var_pop_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["BusinessProduct_var_samp_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "BusinessProduct" */
["BusinessProduct_var_samp_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["BusinessProduct_variance_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "BusinessProduct" */
["BusinessProduct_variance_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** columns and relationships of "BusinessWorker" */
["BusinessWorker"]: AliasType<{
	/** An object relationship */
	Business?:ValueTypes["Business"],
	/** An object relationship */
	Profile?:ValueTypes["Profile"],
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	role?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "BusinessWorker" */
["BusinessWorker_aggregate"]: AliasType<{
	aggregate?:ValueTypes["BusinessWorker_aggregate_fields"],
	nodes?:ValueTypes["BusinessWorker"],
		__typename?: boolean | `@${string}`
}>;
	["BusinessWorker_aggregate_bool_exp"]: {
	count?: ValueTypes["BusinessWorker_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["BusinessWorker_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["BusinessWorker_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["BusinessWorker_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "BusinessWorker" */
["BusinessWorker_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["BusinessWorker_avg_fields"],
count?: [{	columns?: Array<ValueTypes["BusinessWorker_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["BusinessWorker_max_fields"],
	min?:ValueTypes["BusinessWorker_min_fields"],
	stddev?:ValueTypes["BusinessWorker_stddev_fields"],
	stddev_pop?:ValueTypes["BusinessWorker_stddev_pop_fields"],
	stddev_samp?:ValueTypes["BusinessWorker_stddev_samp_fields"],
	sum?:ValueTypes["BusinessWorker_sum_fields"],
	var_pop?:ValueTypes["BusinessWorker_var_pop_fields"],
	var_samp?:ValueTypes["BusinessWorker_var_samp_fields"],
	variance?:ValueTypes["BusinessWorker_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "BusinessWorker" */
["BusinessWorker_aggregate_order_by"]: {
	avg?: ValueTypes["BusinessWorker_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["BusinessWorker_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["BusinessWorker_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["BusinessWorker_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["BusinessWorker_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["BusinessWorker_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["BusinessWorker_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["BusinessWorker_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["BusinessWorker_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["BusinessWorker_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "BusinessWorker" */
["BusinessWorker_arr_rel_insert_input"]: {
	data: Array<ValueTypes["BusinessWorker_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["BusinessWorker_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["BusinessWorker_avg_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "BusinessWorker" */
["BusinessWorker_avg_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "BusinessWorker". All fields are combined with a logical 'AND'. */
["BusinessWorker_bool_exp"]: {
	Business?: ValueTypes["Business_bool_exp"] | undefined | null | Variable<any, string>,
	Profile?: ValueTypes["Profile_bool_exp"] | undefined | null | Variable<any, string>,
	_and?: Array<ValueTypes["BusinessWorker_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["BusinessWorker_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["BusinessWorker_bool_exp"]> | undefined | null | Variable<any, string>,
	business_id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	role?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "BusinessWorker" */
["BusinessWorker_constraint"]:BusinessWorker_constraint;
	/** input type for incrementing numeric columns in table "BusinessWorker" */
["BusinessWorker_inc_input"]: {
	business_id?: number | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	profile_id?: number | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "BusinessWorker" */
["BusinessWorker_insert_input"]: {
	Business?: ValueTypes["Business_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	Profile?: ValueTypes["Profile_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	business_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	profile_id?: number | undefined | null | Variable<any, string>,
	role?: string | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["BusinessWorker_max_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	role?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "BusinessWorker" */
["BusinessWorker_max_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	role?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["BusinessWorker_min_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	role?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "BusinessWorker" */
["BusinessWorker_min_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	role?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "BusinessWorker" */
["BusinessWorker_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["BusinessWorker"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "BusinessWorker" */
["BusinessWorker_on_conflict"]: {
	constraint: ValueTypes["BusinessWorker_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["BusinessWorker_update_column"]> | Variable<any, string>,
	where?: ValueTypes["BusinessWorker_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "BusinessWorker". */
["BusinessWorker_order_by"]: {
	Business?: ValueTypes["Business_order_by"] | undefined | null | Variable<any, string>,
	Profile?: ValueTypes["Profile_order_by"] | undefined | null | Variable<any, string>,
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	role?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: BusinessWorker */
["BusinessWorker_pk_columns_input"]: {
	id: number | Variable<any, string>
};
	/** select columns of table "BusinessWorker" */
["BusinessWorker_select_column"]:BusinessWorker_select_column;
	/** input type for updating data in table "BusinessWorker" */
["BusinessWorker_set_input"]: {
	business_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	profile_id?: number | undefined | null | Variable<any, string>,
	role?: string | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["BusinessWorker_stddev_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "BusinessWorker" */
["BusinessWorker_stddev_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["BusinessWorker_stddev_pop_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "BusinessWorker" */
["BusinessWorker_stddev_pop_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["BusinessWorker_stddev_samp_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "BusinessWorker" */
["BusinessWorker_stddev_samp_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "BusinessWorker" */
["BusinessWorker_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["BusinessWorker_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["BusinessWorker_stream_cursor_value_input"]: {
	business_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	profile_id?: number | undefined | null | Variable<any, string>,
	role?: string | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["BusinessWorker_sum_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "BusinessWorker" */
["BusinessWorker_sum_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "BusinessWorker" */
["BusinessWorker_update_column"]:BusinessWorker_update_column;
	["BusinessWorker_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["BusinessWorker_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["BusinessWorker_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["BusinessWorker_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["BusinessWorker_var_pop_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "BusinessWorker" */
["BusinessWorker_var_pop_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["BusinessWorker_var_samp_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "BusinessWorker" */
["BusinessWorker_var_samp_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["BusinessWorker_variance_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "BusinessWorker" */
["BusinessWorker_variance_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregated selection of "Business" */
["Business_aggregate"]: AliasType<{
	aggregate?:ValueTypes["Business_aggregate_fields"],
	nodes?:ValueTypes["Business"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "Business" */
["Business_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["Business_avg_fields"],
count?: [{	columns?: Array<ValueTypes["Business_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["Business_max_fields"],
	min?:ValueTypes["Business_min_fields"],
	stddev?:ValueTypes["Business_stddev_fields"],
	stddev_pop?:ValueTypes["Business_stddev_pop_fields"],
	stddev_samp?:ValueTypes["Business_stddev_samp_fields"],
	sum?:ValueTypes["Business_sum_fields"],
	var_pop?:ValueTypes["Business_var_pop_fields"],
	var_samp?:ValueTypes["Business_var_samp_fields"],
	variance?:ValueTypes["Business_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["Business_avg_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "Business". All fields are combined with a logical 'AND'. */
["Business_bool_exp"]: {
	BusinessProducts?: ValueTypes["BusinessProduct_bool_exp"] | undefined | null | Variable<any, string>,
	BusinessProducts_aggregate?: ValueTypes["BusinessProduct_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	BusinessWorkers?: ValueTypes["BusinessWorker_bool_exp"] | undefined | null | Variable<any, string>,
	BusinessWorkers_aggregate?: ValueTypes["BusinessWorker_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	CertificateClaims?: ValueTypes["CertificateClaim_bool_exp"] | undefined | null | Variable<any, string>,
	CertificateClaims_aggregate?: ValueTypes["CertificateClaim_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	Offers?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>,
	Offers_aggregate?: ValueTypes["Offer_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	Orders?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>,
	Orders_aggregate?: ValueTypes["Order_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	_and?: Array<ValueTypes["Business_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["Business_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["Business_bool_exp"]> | undefined | null | Variable<any, string>,
	address?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	phone?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "Business" */
["Business_constraint"]:Business_constraint;
	/** input type for incrementing numeric columns in table "Business" */
["Business_inc_input"]: {
	id?: number | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "Business" */
["Business_insert_input"]: {
	BusinessProducts?: ValueTypes["BusinessProduct_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	BusinessWorkers?: ValueTypes["BusinessWorker_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	CertificateClaims?: ValueTypes["CertificateClaim_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	Offers?: ValueTypes["Offer_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	Orders?: ValueTypes["Order_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	address?: string | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	phone?: string | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["Business_max_fields"]: AliasType<{
	address?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	phone?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["Business_min_fields"]: AliasType<{
	address?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	phone?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "Business" */
["Business_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["Business"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "Business" */
["Business_obj_rel_insert_input"]: {
	data: ValueTypes["Business_insert_input"] | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["Business_on_conflict"] | undefined | null | Variable<any, string>
};
	/** on_conflict condition type for table "Business" */
["Business_on_conflict"]: {
	constraint: ValueTypes["Business_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["Business_update_column"]> | Variable<any, string>,
	where?: ValueTypes["Business_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "Business". */
["Business_order_by"]: {
	BusinessProducts_aggregate?: ValueTypes["BusinessProduct_aggregate_order_by"] | undefined | null | Variable<any, string>,
	BusinessWorkers_aggregate?: ValueTypes["BusinessWorker_aggregate_order_by"] | undefined | null | Variable<any, string>,
	CertificateClaims_aggregate?: ValueTypes["CertificateClaim_aggregate_order_by"] | undefined | null | Variable<any, string>,
	Offers_aggregate?: ValueTypes["Offer_aggregate_order_by"] | undefined | null | Variable<any, string>,
	Orders_aggregate?: ValueTypes["Order_aggregate_order_by"] | undefined | null | Variable<any, string>,
	address?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	phone?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: Business */
["Business_pk_columns_input"]: {
	id: number | Variable<any, string>
};
	/** select columns of table "Business" */
["Business_select_column"]:Business_select_column;
	/** input type for updating data in table "Business" */
["Business_set_input"]: {
	address?: string | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	phone?: string | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["Business_stddev_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["Business_stddev_pop_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["Business_stddev_samp_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "Business" */
["Business_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["Business_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["Business_stream_cursor_value_input"]: {
	address?: string | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	phone?: string | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["Business_sum_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** update columns of table "Business" */
["Business_update_column"]:Business_update_column;
	["Business_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Business_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Business_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["Business_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["Business_var_pop_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["Business_var_samp_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["Business_variance_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "Category" */
["Category"]: AliasType<{
Categories?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Category_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Category_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Category_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Category"]],
Categories_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Category_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Category_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Category_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Category_aggregate"]],
	/** An object relationship */
	Category?:ValueTypes["Category"],
Products?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Product_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Product_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Product_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Product"]],
Products_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Product_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Product_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Product_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Product_aggregate"]],
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	parent_id?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "Category" */
["Category_aggregate"]: AliasType<{
	aggregate?:ValueTypes["Category_aggregate_fields"],
	nodes?:ValueTypes["Category"],
		__typename?: boolean | `@${string}`
}>;
	["Category_aggregate_bool_exp"]: {
	count?: ValueTypes["Category_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["Category_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["Category_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Category_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "Category" */
["Category_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["Category_avg_fields"],
count?: [{	columns?: Array<ValueTypes["Category_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["Category_max_fields"],
	min?:ValueTypes["Category_min_fields"],
	stddev?:ValueTypes["Category_stddev_fields"],
	stddev_pop?:ValueTypes["Category_stddev_pop_fields"],
	stddev_samp?:ValueTypes["Category_stddev_samp_fields"],
	sum?:ValueTypes["Category_sum_fields"],
	var_pop?:ValueTypes["Category_var_pop_fields"],
	var_samp?:ValueTypes["Category_var_samp_fields"],
	variance?:ValueTypes["Category_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "Category" */
["Category_aggregate_order_by"]: {
	avg?: ValueTypes["Category_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["Category_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["Category_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["Category_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["Category_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["Category_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["Category_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["Category_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["Category_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["Category_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "Category" */
["Category_arr_rel_insert_input"]: {
	data: Array<ValueTypes["Category_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["Category_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["Category_avg_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	parent_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "Category" */
["Category_avg_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	parent_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "Category". All fields are combined with a logical 'AND'. */
["Category_bool_exp"]: {
	Categories?: ValueTypes["Category_bool_exp"] | undefined | null | Variable<any, string>,
	Categories_aggregate?: ValueTypes["Category_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	Category?: ValueTypes["Category_bool_exp"] | undefined | null | Variable<any, string>,
	Products?: ValueTypes["Product_bool_exp"] | undefined | null | Variable<any, string>,
	Products_aggregate?: ValueTypes["Product_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	_and?: Array<ValueTypes["Category_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["Category_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["Category_bool_exp"]> | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	parent_id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "Category" */
["Category_constraint"]:Category_constraint;
	/** input type for incrementing numeric columns in table "Category" */
["Category_inc_input"]: {
	id?: number | undefined | null | Variable<any, string>,
	parent_id?: number | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "Category" */
["Category_insert_input"]: {
	Categories?: ValueTypes["Category_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	Category?: ValueTypes["Category_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	Products?: ValueTypes["Product_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	parent_id?: number | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["Category_max_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	parent_id?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "Category" */
["Category_max_order_by"]: {
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	parent_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["Category_min_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	parent_id?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "Category" */
["Category_min_order_by"]: {
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	parent_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "Category" */
["Category_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["Category"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "Category" */
["Category_obj_rel_insert_input"]: {
	data: ValueTypes["Category_insert_input"] | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["Category_on_conflict"] | undefined | null | Variable<any, string>
};
	/** on_conflict condition type for table "Category" */
["Category_on_conflict"]: {
	constraint: ValueTypes["Category_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["Category_update_column"]> | Variable<any, string>,
	where?: ValueTypes["Category_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "Category". */
["Category_order_by"]: {
	Categories_aggregate?: ValueTypes["Category_aggregate_order_by"] | undefined | null | Variable<any, string>,
	Category?: ValueTypes["Category_order_by"] | undefined | null | Variable<any, string>,
	Products_aggregate?: ValueTypes["Product_aggregate_order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	parent_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: Category */
["Category_pk_columns_input"]: {
	id: number | Variable<any, string>
};
	/** select columns of table "Category" */
["Category_select_column"]:Category_select_column;
	/** input type for updating data in table "Category" */
["Category_set_input"]: {
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	parent_id?: number | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["Category_stddev_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	parent_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "Category" */
["Category_stddev_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	parent_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["Category_stddev_pop_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	parent_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "Category" */
["Category_stddev_pop_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	parent_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["Category_stddev_samp_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	parent_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "Category" */
["Category_stddev_samp_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	parent_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "Category" */
["Category_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["Category_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["Category_stream_cursor_value_input"]: {
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	parent_id?: number | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["Category_sum_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	parent_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "Category" */
["Category_sum_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	parent_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "Category" */
["Category_update_column"]:Category_update_column;
	["Category_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Category_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Category_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["Category_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["Category_var_pop_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	parent_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "Category" */
["Category_var_pop_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	parent_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["Category_var_samp_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	parent_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "Category" */
["Category_var_samp_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	parent_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["Category_variance_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	parent_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "Category" */
["Category_variance_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	parent_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** columns and relationships of "Certificate" */
["Certificate"]: AliasType<{
	/** An object relationship */
	CertificateCategory?:ValueTypes["CertificateCategory"],
CertificateClaims?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["CertificateClaim_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["CertificateClaim_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["CertificateClaim_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["CertificateClaim"]],
CertificateClaims_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["CertificateClaim_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["CertificateClaim_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["CertificateClaim_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["CertificateClaim_aggregate"]],
	certificateCategory_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	icon_url?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	image_url?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "CertificateCategory" */
["CertificateCategory"]: AliasType<{
Certificates?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Certificate_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Certificate_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Certificate_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Certificate"]],
Certificates_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Certificate_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Certificate_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Certificate_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Certificate_aggregate"]],
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "CertificateCategory" */
["CertificateCategory_aggregate"]: AliasType<{
	aggregate?:ValueTypes["CertificateCategory_aggregate_fields"],
	nodes?:ValueTypes["CertificateCategory"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "CertificateCategory" */
["CertificateCategory_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["CertificateCategory_avg_fields"],
count?: [{	columns?: Array<ValueTypes["CertificateCategory_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["CertificateCategory_max_fields"],
	min?:ValueTypes["CertificateCategory_min_fields"],
	stddev?:ValueTypes["CertificateCategory_stddev_fields"],
	stddev_pop?:ValueTypes["CertificateCategory_stddev_pop_fields"],
	stddev_samp?:ValueTypes["CertificateCategory_stddev_samp_fields"],
	sum?:ValueTypes["CertificateCategory_sum_fields"],
	var_pop?:ValueTypes["CertificateCategory_var_pop_fields"],
	var_samp?:ValueTypes["CertificateCategory_var_samp_fields"],
	variance?:ValueTypes["CertificateCategory_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["CertificateCategory_avg_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "CertificateCategory". All fields are combined with a logical 'AND'. */
["CertificateCategory_bool_exp"]: {
	Certificates?: ValueTypes["Certificate_bool_exp"] | undefined | null | Variable<any, string>,
	Certificates_aggregate?: ValueTypes["Certificate_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	_and?: Array<ValueTypes["CertificateCategory_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["CertificateCategory_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["CertificateCategory_bool_exp"]> | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "CertificateCategory" */
["CertificateCategory_constraint"]:CertificateCategory_constraint;
	/** input type for incrementing numeric columns in table "CertificateCategory" */
["CertificateCategory_inc_input"]: {
	id?: number | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "CertificateCategory" */
["CertificateCategory_insert_input"]: {
	Certificates?: ValueTypes["Certificate_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["CertificateCategory_max_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["CertificateCategory_min_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "CertificateCategory" */
["CertificateCategory_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["CertificateCategory"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "CertificateCategory" */
["CertificateCategory_obj_rel_insert_input"]: {
	data: ValueTypes["CertificateCategory_insert_input"] | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["CertificateCategory_on_conflict"] | undefined | null | Variable<any, string>
};
	/** on_conflict condition type for table "CertificateCategory" */
["CertificateCategory_on_conflict"]: {
	constraint: ValueTypes["CertificateCategory_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["CertificateCategory_update_column"]> | Variable<any, string>,
	where?: ValueTypes["CertificateCategory_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "CertificateCategory". */
["CertificateCategory_order_by"]: {
	Certificates_aggregate?: ValueTypes["Certificate_aggregate_order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: CertificateCategory */
["CertificateCategory_pk_columns_input"]: {
	id: number | Variable<any, string>
};
	/** select columns of table "CertificateCategory" */
["CertificateCategory_select_column"]:CertificateCategory_select_column;
	/** input type for updating data in table "CertificateCategory" */
["CertificateCategory_set_input"]: {
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["CertificateCategory_stddev_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["CertificateCategory_stddev_pop_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["CertificateCategory_stddev_samp_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "CertificateCategory" */
["CertificateCategory_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["CertificateCategory_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["CertificateCategory_stream_cursor_value_input"]: {
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["CertificateCategory_sum_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** update columns of table "CertificateCategory" */
["CertificateCategory_update_column"]:CertificateCategory_update_column;
	["CertificateCategory_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["CertificateCategory_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["CertificateCategory_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["CertificateCategory_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["CertificateCategory_var_pop_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["CertificateCategory_var_samp_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["CertificateCategory_variance_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "CertificateClaim" */
["CertificateClaim"]: AliasType<{
	/** An object relationship */
	Business?:ValueTypes["Business"],
	/** An object relationship */
	Certificate?:ValueTypes["Certificate"],
	business_id?:boolean | `@${string}`,
	certificate_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	status?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	["CertificateClaimStatus"]:unknown;
	/** Boolean expression to compare columns of type "CertificateClaimStatus". All fields are combined with logical 'AND'. */
["CertificateClaimStatus_comparison_exp"]: {
	_eq?: ValueTypes["CertificateClaimStatus"] | undefined | null | Variable<any, string>,
	_gt?: ValueTypes["CertificateClaimStatus"] | undefined | null | Variable<any, string>,
	_gte?: ValueTypes["CertificateClaimStatus"] | undefined | null | Variable<any, string>,
	_in?: Array<ValueTypes["CertificateClaimStatus"]> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_lt?: ValueTypes["CertificateClaimStatus"] | undefined | null | Variable<any, string>,
	_lte?: ValueTypes["CertificateClaimStatus"] | undefined | null | Variable<any, string>,
	_neq?: ValueTypes["CertificateClaimStatus"] | undefined | null | Variable<any, string>,
	_nin?: Array<ValueTypes["CertificateClaimStatus"]> | undefined | null | Variable<any, string>
};
	/** aggregated selection of "CertificateClaim" */
["CertificateClaim_aggregate"]: AliasType<{
	aggregate?:ValueTypes["CertificateClaim_aggregate_fields"],
	nodes?:ValueTypes["CertificateClaim"],
		__typename?: boolean | `@${string}`
}>;
	["CertificateClaim_aggregate_bool_exp"]: {
	count?: ValueTypes["CertificateClaim_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["CertificateClaim_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["CertificateClaim_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["CertificateClaim_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "CertificateClaim" */
["CertificateClaim_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["CertificateClaim_avg_fields"],
count?: [{	columns?: Array<ValueTypes["CertificateClaim_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["CertificateClaim_max_fields"],
	min?:ValueTypes["CertificateClaim_min_fields"],
	stddev?:ValueTypes["CertificateClaim_stddev_fields"],
	stddev_pop?:ValueTypes["CertificateClaim_stddev_pop_fields"],
	stddev_samp?:ValueTypes["CertificateClaim_stddev_samp_fields"],
	sum?:ValueTypes["CertificateClaim_sum_fields"],
	var_pop?:ValueTypes["CertificateClaim_var_pop_fields"],
	var_samp?:ValueTypes["CertificateClaim_var_samp_fields"],
	variance?:ValueTypes["CertificateClaim_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "CertificateClaim" */
["CertificateClaim_aggregate_order_by"]: {
	avg?: ValueTypes["CertificateClaim_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["CertificateClaim_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["CertificateClaim_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["CertificateClaim_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["CertificateClaim_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["CertificateClaim_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["CertificateClaim_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["CertificateClaim_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["CertificateClaim_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["CertificateClaim_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "CertificateClaim" */
["CertificateClaim_arr_rel_insert_input"]: {
	data: Array<ValueTypes["CertificateClaim_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["CertificateClaim_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["CertificateClaim_avg_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	certificate_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "CertificateClaim" */
["CertificateClaim_avg_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	certificate_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "CertificateClaim". All fields are combined with a logical 'AND'. */
["CertificateClaim_bool_exp"]: {
	Business?: ValueTypes["Business_bool_exp"] | undefined | null | Variable<any, string>,
	Certificate?: ValueTypes["Certificate_bool_exp"] | undefined | null | Variable<any, string>,
	_and?: Array<ValueTypes["CertificateClaim_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["CertificateClaim_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["CertificateClaim_bool_exp"]> | undefined | null | Variable<any, string>,
	business_id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	certificate_id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	status?: ValueTypes["CertificateClaimStatus_comparison_exp"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "CertificateClaim" */
["CertificateClaim_constraint"]:CertificateClaim_constraint;
	/** input type for incrementing numeric columns in table "CertificateClaim" */
["CertificateClaim_inc_input"]: {
	business_id?: number | undefined | null | Variable<any, string>,
	certificate_id?: number | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "CertificateClaim" */
["CertificateClaim_insert_input"]: {
	Business?: ValueTypes["Business_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	Certificate?: ValueTypes["Certificate_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	business_id?: number | undefined | null | Variable<any, string>,
	certificate_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	status?: ValueTypes["CertificateClaimStatus"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["CertificateClaim_max_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	certificate_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	status?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "CertificateClaim" */
["CertificateClaim_max_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	certificate_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	status?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["CertificateClaim_min_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	certificate_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	status?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "CertificateClaim" */
["CertificateClaim_min_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	certificate_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	status?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "CertificateClaim" */
["CertificateClaim_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["CertificateClaim"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "CertificateClaim" */
["CertificateClaim_on_conflict"]: {
	constraint: ValueTypes["CertificateClaim_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["CertificateClaim_update_column"]> | Variable<any, string>,
	where?: ValueTypes["CertificateClaim_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "CertificateClaim". */
["CertificateClaim_order_by"]: {
	Business?: ValueTypes["Business_order_by"] | undefined | null | Variable<any, string>,
	Certificate?: ValueTypes["Certificate_order_by"] | undefined | null | Variable<any, string>,
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	certificate_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	status?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: CertificateClaim */
["CertificateClaim_pk_columns_input"]: {
	id: number | Variable<any, string>
};
	/** select columns of table "CertificateClaim" */
["CertificateClaim_select_column"]:CertificateClaim_select_column;
	/** input type for updating data in table "CertificateClaim" */
["CertificateClaim_set_input"]: {
	business_id?: number | undefined | null | Variable<any, string>,
	certificate_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	status?: ValueTypes["CertificateClaimStatus"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["CertificateClaim_stddev_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	certificate_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "CertificateClaim" */
["CertificateClaim_stddev_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	certificate_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["CertificateClaim_stddev_pop_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	certificate_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "CertificateClaim" */
["CertificateClaim_stddev_pop_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	certificate_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["CertificateClaim_stddev_samp_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	certificate_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "CertificateClaim" */
["CertificateClaim_stddev_samp_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	certificate_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "CertificateClaim" */
["CertificateClaim_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["CertificateClaim_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["CertificateClaim_stream_cursor_value_input"]: {
	business_id?: number | undefined | null | Variable<any, string>,
	certificate_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	status?: ValueTypes["CertificateClaimStatus"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["CertificateClaim_sum_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	certificate_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "CertificateClaim" */
["CertificateClaim_sum_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	certificate_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "CertificateClaim" */
["CertificateClaim_update_column"]:CertificateClaim_update_column;
	["CertificateClaim_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["CertificateClaim_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["CertificateClaim_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["CertificateClaim_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["CertificateClaim_var_pop_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	certificate_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "CertificateClaim" */
["CertificateClaim_var_pop_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	certificate_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["CertificateClaim_var_samp_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	certificate_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "CertificateClaim" */
["CertificateClaim_var_samp_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	certificate_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["CertificateClaim_variance_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	certificate_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "CertificateClaim" */
["CertificateClaim_variance_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	certificate_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregated selection of "Certificate" */
["Certificate_aggregate"]: AliasType<{
	aggregate?:ValueTypes["Certificate_aggregate_fields"],
	nodes?:ValueTypes["Certificate"],
		__typename?: boolean | `@${string}`
}>;
	["Certificate_aggregate_bool_exp"]: {
	count?: ValueTypes["Certificate_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["Certificate_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["Certificate_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Certificate_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "Certificate" */
["Certificate_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["Certificate_avg_fields"],
count?: [{	columns?: Array<ValueTypes["Certificate_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["Certificate_max_fields"],
	min?:ValueTypes["Certificate_min_fields"],
	stddev?:ValueTypes["Certificate_stddev_fields"],
	stddev_pop?:ValueTypes["Certificate_stddev_pop_fields"],
	stddev_samp?:ValueTypes["Certificate_stddev_samp_fields"],
	sum?:ValueTypes["Certificate_sum_fields"],
	var_pop?:ValueTypes["Certificate_var_pop_fields"],
	var_samp?:ValueTypes["Certificate_var_samp_fields"],
	variance?:ValueTypes["Certificate_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "Certificate" */
["Certificate_aggregate_order_by"]: {
	avg?: ValueTypes["Certificate_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["Certificate_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["Certificate_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["Certificate_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["Certificate_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["Certificate_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["Certificate_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["Certificate_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["Certificate_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["Certificate_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "Certificate" */
["Certificate_arr_rel_insert_input"]: {
	data: Array<ValueTypes["Certificate_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["Certificate_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["Certificate_avg_fields"]: AliasType<{
	certificateCategory_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "Certificate" */
["Certificate_avg_order_by"]: {
	certificateCategory_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "Certificate". All fields are combined with a logical 'AND'. */
["Certificate_bool_exp"]: {
	CertificateCategory?: ValueTypes["CertificateCategory_bool_exp"] | undefined | null | Variable<any, string>,
	CertificateClaims?: ValueTypes["CertificateClaim_bool_exp"] | undefined | null | Variable<any, string>,
	CertificateClaims_aggregate?: ValueTypes["CertificateClaim_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	_and?: Array<ValueTypes["Certificate_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["Certificate_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["Certificate_bool_exp"]> | undefined | null | Variable<any, string>,
	certificateCategory_id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>,
	icon_url?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	image_url?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "Certificate" */
["Certificate_constraint"]:Certificate_constraint;
	/** input type for incrementing numeric columns in table "Certificate" */
["Certificate_inc_input"]: {
	certificateCategory_id?: number | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "Certificate" */
["Certificate_insert_input"]: {
	CertificateCategory?: ValueTypes["CertificateCategory_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	CertificateClaims?: ValueTypes["CertificateClaim_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	certificateCategory_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	icon_url?: string | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	image_url?: string | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["Certificate_max_fields"]: AliasType<{
	certificateCategory_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	icon_url?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	image_url?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "Certificate" */
["Certificate_max_order_by"]: {
	certificateCategory_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	icon_url?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	image_url?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["Certificate_min_fields"]: AliasType<{
	certificateCategory_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	icon_url?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	image_url?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "Certificate" */
["Certificate_min_order_by"]: {
	certificateCategory_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	icon_url?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	image_url?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "Certificate" */
["Certificate_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["Certificate"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "Certificate" */
["Certificate_obj_rel_insert_input"]: {
	data: ValueTypes["Certificate_insert_input"] | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["Certificate_on_conflict"] | undefined | null | Variable<any, string>
};
	/** on_conflict condition type for table "Certificate" */
["Certificate_on_conflict"]: {
	constraint: ValueTypes["Certificate_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["Certificate_update_column"]> | Variable<any, string>,
	where?: ValueTypes["Certificate_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "Certificate". */
["Certificate_order_by"]: {
	CertificateCategory?: ValueTypes["CertificateCategory_order_by"] | undefined | null | Variable<any, string>,
	CertificateClaims_aggregate?: ValueTypes["CertificateClaim_aggregate_order_by"] | undefined | null | Variable<any, string>,
	certificateCategory_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	icon_url?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	image_url?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: Certificate */
["Certificate_pk_columns_input"]: {
	id: number | Variable<any, string>
};
	/** select columns of table "Certificate" */
["Certificate_select_column"]:Certificate_select_column;
	/** input type for updating data in table "Certificate" */
["Certificate_set_input"]: {
	certificateCategory_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	icon_url?: string | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	image_url?: string | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["Certificate_stddev_fields"]: AliasType<{
	certificateCategory_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "Certificate" */
["Certificate_stddev_order_by"]: {
	certificateCategory_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["Certificate_stddev_pop_fields"]: AliasType<{
	certificateCategory_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "Certificate" */
["Certificate_stddev_pop_order_by"]: {
	certificateCategory_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["Certificate_stddev_samp_fields"]: AliasType<{
	certificateCategory_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "Certificate" */
["Certificate_stddev_samp_order_by"]: {
	certificateCategory_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "Certificate" */
["Certificate_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["Certificate_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["Certificate_stream_cursor_value_input"]: {
	certificateCategory_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	icon_url?: string | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	image_url?: string | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["Certificate_sum_fields"]: AliasType<{
	certificateCategory_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "Certificate" */
["Certificate_sum_order_by"]: {
	certificateCategory_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "Certificate" */
["Certificate_update_column"]:Certificate_update_column;
	["Certificate_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Certificate_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Certificate_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["Certificate_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["Certificate_var_pop_fields"]: AliasType<{
	certificateCategory_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "Certificate" */
["Certificate_var_pop_order_by"]: {
	certificateCategory_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["Certificate_var_samp_fields"]: AliasType<{
	certificateCategory_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "Certificate" */
["Certificate_var_samp_order_by"]: {
	certificateCategory_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["Certificate_variance_fields"]: AliasType<{
	certificateCategory_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "Certificate" */
["Certificate_variance_order_by"]: {
	certificateCategory_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
["Int_comparison_exp"]: {
	_eq?: number | undefined | null | Variable<any, string>,
	_gt?: number | undefined | null | Variable<any, string>,
	_gte?: number | undefined | null | Variable<any, string>,
	_in?: Array<number> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_lt?: number | undefined | null | Variable<any, string>,
	_lte?: number | undefined | null | Variable<any, string>,
	_neq?: number | undefined | null | Variable<any, string>,
	_nin?: Array<number> | undefined | null | Variable<any, string>
};
	/** columns and relationships of "Offer" */
["Offer"]: AliasType<{
	/** An object relationship */
	Business?:ValueTypes["Business"],
	/** An object relationship */
	Product?:ValueTypes["Product"],
	active?:boolean | `@${string}`,
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	end_date?:boolean | `@${string}`,
	harvest_date?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	packaging?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	["OfferType"]:unknown;
	/** Boolean expression to compare columns of type "OfferType". All fields are combined with logical 'AND'. */
["OfferType_comparison_exp"]: {
	_eq?: ValueTypes["OfferType"] | undefined | null | Variable<any, string>,
	_gt?: ValueTypes["OfferType"] | undefined | null | Variable<any, string>,
	_gte?: ValueTypes["OfferType"] | undefined | null | Variable<any, string>,
	_in?: Array<ValueTypes["OfferType"]> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_lt?: ValueTypes["OfferType"] | undefined | null | Variable<any, string>,
	_lte?: ValueTypes["OfferType"] | undefined | null | Variable<any, string>,
	_neq?: ValueTypes["OfferType"] | undefined | null | Variable<any, string>,
	_nin?: Array<ValueTypes["OfferType"]> | undefined | null | Variable<any, string>
};
	/** aggregated selection of "Offer" */
["Offer_aggregate"]: AliasType<{
	aggregate?:ValueTypes["Offer_aggregate_fields"],
	nodes?:ValueTypes["Offer"],
		__typename?: boolean | `@${string}`
}>;
	["Offer_aggregate_bool_exp"]: {
	avg?: ValueTypes["Offer_aggregate_bool_exp_avg"] | undefined | null | Variable<any, string>,
	bool_and?: ValueTypes["Offer_aggregate_bool_exp_bool_and"] | undefined | null | Variable<any, string>,
	bool_or?: ValueTypes["Offer_aggregate_bool_exp_bool_or"] | undefined | null | Variable<any, string>,
	corr?: ValueTypes["Offer_aggregate_bool_exp_corr"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["Offer_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>,
	covar_samp?: ValueTypes["Offer_aggregate_bool_exp_covar_samp"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["Offer_aggregate_bool_exp_max"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["Offer_aggregate_bool_exp_min"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["Offer_aggregate_bool_exp_stddev_samp"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["Offer_aggregate_bool_exp_sum"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["Offer_aggregate_bool_exp_var_samp"] | undefined | null | Variable<any, string>
};
	["Offer_aggregate_bool_exp_avg"]: {
	arguments: ValueTypes["Offer_select_column_Offer_aggregate_bool_exp_avg_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["float8_comparison_exp"] | Variable<any, string>
};
	["Offer_aggregate_bool_exp_bool_and"]: {
	arguments: ValueTypes["Offer_select_column_Offer_aggregate_bool_exp_bool_and_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Boolean_comparison_exp"] | Variable<any, string>
};
	["Offer_aggregate_bool_exp_bool_or"]: {
	arguments: ValueTypes["Offer_select_column_Offer_aggregate_bool_exp_bool_or_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Boolean_comparison_exp"] | Variable<any, string>
};
	["Offer_aggregate_bool_exp_corr"]: {
	arguments: ValueTypes["Offer_aggregate_bool_exp_corr_arguments"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["float8_comparison_exp"] | Variable<any, string>
};
	["Offer_aggregate_bool_exp_corr_arguments"]: {
	X: ValueTypes["Offer_select_column_Offer_aggregate_bool_exp_corr_arguments_columns"] | Variable<any, string>,
	Y: ValueTypes["Offer_select_column_Offer_aggregate_bool_exp_corr_arguments_columns"] | Variable<any, string>
};
	["Offer_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["Offer_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	["Offer_aggregate_bool_exp_covar_samp"]: {
	arguments: ValueTypes["Offer_aggregate_bool_exp_covar_samp_arguments"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["float8_comparison_exp"] | Variable<any, string>
};
	["Offer_aggregate_bool_exp_covar_samp_arguments"]: {
	X: ValueTypes["Offer_select_column_Offer_aggregate_bool_exp_covar_samp_arguments_columns"] | Variable<any, string>,
	Y: ValueTypes["Offer_select_column_Offer_aggregate_bool_exp_covar_samp_arguments_columns"] | Variable<any, string>
};
	["Offer_aggregate_bool_exp_max"]: {
	arguments: ValueTypes["Offer_select_column_Offer_aggregate_bool_exp_max_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["float8_comparison_exp"] | Variable<any, string>
};
	["Offer_aggregate_bool_exp_min"]: {
	arguments: ValueTypes["Offer_select_column_Offer_aggregate_bool_exp_min_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["float8_comparison_exp"] | Variable<any, string>
};
	["Offer_aggregate_bool_exp_stddev_samp"]: {
	arguments: ValueTypes["Offer_select_column_Offer_aggregate_bool_exp_stddev_samp_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["float8_comparison_exp"] | Variable<any, string>
};
	["Offer_aggregate_bool_exp_sum"]: {
	arguments: ValueTypes["Offer_select_column_Offer_aggregate_bool_exp_sum_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["float8_comparison_exp"] | Variable<any, string>
};
	["Offer_aggregate_bool_exp_var_samp"]: {
	arguments: ValueTypes["Offer_select_column_Offer_aggregate_bool_exp_var_samp_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["float8_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "Offer" */
["Offer_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["Offer_avg_fields"],
count?: [{	columns?: Array<ValueTypes["Offer_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["Offer_max_fields"],
	min?:ValueTypes["Offer_min_fields"],
	stddev?:ValueTypes["Offer_stddev_fields"],
	stddev_pop?:ValueTypes["Offer_stddev_pop_fields"],
	stddev_samp?:ValueTypes["Offer_stddev_samp_fields"],
	sum?:ValueTypes["Offer_sum_fields"],
	var_pop?:ValueTypes["Offer_var_pop_fields"],
	var_samp?:ValueTypes["Offer_var_samp_fields"],
	variance?:ValueTypes["Offer_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "Offer" */
["Offer_aggregate_order_by"]: {
	avg?: ValueTypes["Offer_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["Offer_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["Offer_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["Offer_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["Offer_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["Offer_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["Offer_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["Offer_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["Offer_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["Offer_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "Offer" */
["Offer_arr_rel_insert_input"]: {
	data: Array<ValueTypes["Offer_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["Offer_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["Offer_avg_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	packaging?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "Offer" */
["Offer_avg_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	packaging?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	quantity?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "Offer". All fields are combined with a logical 'AND'. */
["Offer_bool_exp"]: {
	Business?: ValueTypes["Business_bool_exp"] | undefined | null | Variable<any, string>,
	Product?: ValueTypes["Product_bool_exp"] | undefined | null | Variable<any, string>,
	_and?: Array<ValueTypes["Offer_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["Offer_bool_exp"]> | undefined | null | Variable<any, string>,
	active?: ValueTypes["Boolean_comparison_exp"] | undefined | null | Variable<any, string>,
	business_id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>,
	end_date?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>,
	harvest_date?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	packaging?: ValueTypes["float8_comparison_exp"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["float8_comparison_exp"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	quantity?: ValueTypes["float8_comparison_exp"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "Offer" */
["Offer_constraint"]:Offer_constraint;
	/** input type for incrementing numeric columns in table "Offer" */
["Offer_inc_input"]: {
	business_id?: number | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	packaging?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	product_id?: number | undefined | null | Variable<any, string>,
	quantity?: ValueTypes["float8"] | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "Offer" */
["Offer_insert_input"]: {
	Business?: ValueTypes["Business_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	Product?: ValueTypes["Product_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	active?: boolean | undefined | null | Variable<any, string>,
	business_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	end_date?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	harvest_date?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	packaging?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	product_id?: number | undefined | null | Variable<any, string>,
	quantity?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["Offer_max_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	end_date?:boolean | `@${string}`,
	harvest_date?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	packaging?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "Offer" */
["Offer_max_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	end_date?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	harvest_date?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	packaging?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	quantity?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["Offer_min_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	end_date?:boolean | `@${string}`,
	harvest_date?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	packaging?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "Offer" */
["Offer_min_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	end_date?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	harvest_date?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	packaging?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	quantity?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "Offer" */
["Offer_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["Offer"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "Offer" */
["Offer_on_conflict"]: {
	constraint: ValueTypes["Offer_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["Offer_update_column"]> | Variable<any, string>,
	where?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "Offer". */
["Offer_order_by"]: {
	Business?: ValueTypes["Business_order_by"] | undefined | null | Variable<any, string>,
	Product?: ValueTypes["Product_order_by"] | undefined | null | Variable<any, string>,
	active?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	end_date?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	harvest_date?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	packaging?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	quantity?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: Offer */
["Offer_pk_columns_input"]: {
	id: number | Variable<any, string>
};
	/** select columns of table "Offer" */
["Offer_select_column"]:Offer_select_column;
	/** select "Offer_aggregate_bool_exp_avg_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_avg_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_avg_arguments_columns;
	/** select "Offer_aggregate_bool_exp_bool_and_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_bool_and_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "Offer_aggregate_bool_exp_bool_or_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_bool_or_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_bool_or_arguments_columns;
	/** select "Offer_aggregate_bool_exp_corr_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_corr_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_corr_arguments_columns;
	/** select "Offer_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_covar_samp_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_covar_samp_arguments_columns;
	/** select "Offer_aggregate_bool_exp_max_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_max_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_max_arguments_columns;
	/** select "Offer_aggregate_bool_exp_min_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_min_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_min_arguments_columns;
	/** select "Offer_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_stddev_samp_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_stddev_samp_arguments_columns;
	/** select "Offer_aggregate_bool_exp_sum_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_sum_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_sum_arguments_columns;
	/** select "Offer_aggregate_bool_exp_var_samp_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_var_samp_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_var_samp_arguments_columns;
	/** input type for updating data in table "Offer" */
["Offer_set_input"]: {
	active?: boolean | undefined | null | Variable<any, string>,
	business_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	end_date?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	harvest_date?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	packaging?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	product_id?: number | undefined | null | Variable<any, string>,
	quantity?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["Offer_stddev_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	packaging?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "Offer" */
["Offer_stddev_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	packaging?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	quantity?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["Offer_stddev_pop_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	packaging?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "Offer" */
["Offer_stddev_pop_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	packaging?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	quantity?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["Offer_stddev_samp_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	packaging?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "Offer" */
["Offer_stddev_samp_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	packaging?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	quantity?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "Offer" */
["Offer_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["Offer_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["Offer_stream_cursor_value_input"]: {
	active?: boolean | undefined | null | Variable<any, string>,
	business_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	end_date?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	harvest_date?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	packaging?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	product_id?: number | undefined | null | Variable<any, string>,
	quantity?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["Offer_sum_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	packaging?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "Offer" */
["Offer_sum_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	packaging?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	quantity?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "Offer" */
["Offer_update_column"]:Offer_update_column;
	["Offer_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Offer_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Offer_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["Offer_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["Offer_var_pop_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	packaging?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "Offer" */
["Offer_var_pop_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	packaging?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	quantity?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["Offer_var_samp_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	packaging?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "Offer" */
["Offer_var_samp_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	packaging?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	quantity?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["Offer_variance_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	packaging?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "Offer" */
["Offer_variance_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	packaging?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	quantity?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** columns and relationships of "Order" */
["Order"]: AliasType<{
	/** An object relationship */
	Business?:ValueTypes["Business"],
	/** An object relationship */
	Product?:ValueTypes["Product"],
Transactions?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Transaction_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Transaction_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Transaction_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Transaction"]],
Transactions_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Transaction_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Transaction_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Transaction_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Transaction_aggregate"]],
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	end_date?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	offer_type?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity_by_units?:boolean | `@${string}`,
	start_date?:boolean | `@${string}`,
transactionsBySellOrderId?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Transaction_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Transaction_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Transaction_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Transaction"]],
transactionsBySellOrderId_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Transaction_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Transaction_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Transaction_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Transaction_aggregate"]],
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "Order" */
["Order_aggregate"]: AliasType<{
	aggregate?:ValueTypes["Order_aggregate_fields"],
	nodes?:ValueTypes["Order"],
		__typename?: boolean | `@${string}`
}>;
	["Order_aggregate_bool_exp"]: {
	avg?: ValueTypes["Order_aggregate_bool_exp_avg"] | undefined | null | Variable<any, string>,
	corr?: ValueTypes["Order_aggregate_bool_exp_corr"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["Order_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>,
	covar_samp?: ValueTypes["Order_aggregate_bool_exp_covar_samp"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["Order_aggregate_bool_exp_max"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["Order_aggregate_bool_exp_min"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["Order_aggregate_bool_exp_stddev_samp"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["Order_aggregate_bool_exp_sum"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["Order_aggregate_bool_exp_var_samp"] | undefined | null | Variable<any, string>
};
	["Order_aggregate_bool_exp_avg"]: {
	arguments: ValueTypes["Order_select_column_Order_aggregate_bool_exp_avg_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["float8_comparison_exp"] | Variable<any, string>
};
	["Order_aggregate_bool_exp_corr"]: {
	arguments: ValueTypes["Order_aggregate_bool_exp_corr_arguments"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["float8_comparison_exp"] | Variable<any, string>
};
	["Order_aggregate_bool_exp_corr_arguments"]: {
	X: ValueTypes["Order_select_column_Order_aggregate_bool_exp_corr_arguments_columns"] | Variable<any, string>,
	Y: ValueTypes["Order_select_column_Order_aggregate_bool_exp_corr_arguments_columns"] | Variable<any, string>
};
	["Order_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["Order_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	["Order_aggregate_bool_exp_covar_samp"]: {
	arguments: ValueTypes["Order_aggregate_bool_exp_covar_samp_arguments"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["float8_comparison_exp"] | Variable<any, string>
};
	["Order_aggregate_bool_exp_covar_samp_arguments"]: {
	X: ValueTypes["Order_select_column_Order_aggregate_bool_exp_covar_samp_arguments_columns"] | Variable<any, string>,
	Y: ValueTypes["Order_select_column_Order_aggregate_bool_exp_covar_samp_arguments_columns"] | Variable<any, string>
};
	["Order_aggregate_bool_exp_max"]: {
	arguments: ValueTypes["Order_select_column_Order_aggregate_bool_exp_max_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["float8_comparison_exp"] | Variable<any, string>
};
	["Order_aggregate_bool_exp_min"]: {
	arguments: ValueTypes["Order_select_column_Order_aggregate_bool_exp_min_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["float8_comparison_exp"] | Variable<any, string>
};
	["Order_aggregate_bool_exp_stddev_samp"]: {
	arguments: ValueTypes["Order_select_column_Order_aggregate_bool_exp_stddev_samp_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["float8_comparison_exp"] | Variable<any, string>
};
	["Order_aggregate_bool_exp_sum"]: {
	arguments: ValueTypes["Order_select_column_Order_aggregate_bool_exp_sum_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["float8_comparison_exp"] | Variable<any, string>
};
	["Order_aggregate_bool_exp_var_samp"]: {
	arguments: ValueTypes["Order_select_column_Order_aggregate_bool_exp_var_samp_arguments_columns"] | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["float8_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "Order" */
["Order_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["Order_avg_fields"],
count?: [{	columns?: Array<ValueTypes["Order_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["Order_max_fields"],
	min?:ValueTypes["Order_min_fields"],
	stddev?:ValueTypes["Order_stddev_fields"],
	stddev_pop?:ValueTypes["Order_stddev_pop_fields"],
	stddev_samp?:ValueTypes["Order_stddev_samp_fields"],
	sum?:ValueTypes["Order_sum_fields"],
	var_pop?:ValueTypes["Order_var_pop_fields"],
	var_samp?:ValueTypes["Order_var_samp_fields"],
	variance?:ValueTypes["Order_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "Order" */
["Order_aggregate_order_by"]: {
	avg?: ValueTypes["Order_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["Order_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["Order_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["Order_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["Order_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["Order_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["Order_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["Order_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["Order_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["Order_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "Order" */
["Order_arr_rel_insert_input"]: {
	data: Array<ValueTypes["Order_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["Order_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["Order_avg_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity_by_units?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "Order" */
["Order_avg_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	quantity_by_units?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "Order". All fields are combined with a logical 'AND'. */
["Order_bool_exp"]: {
	Business?: ValueTypes["Business_bool_exp"] | undefined | null | Variable<any, string>,
	Product?: ValueTypes["Product_bool_exp"] | undefined | null | Variable<any, string>,
	Transactions?: ValueTypes["Transaction_bool_exp"] | undefined | null | Variable<any, string>,
	Transactions_aggregate?: ValueTypes["Transaction_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	_and?: Array<ValueTypes["Order_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["Order_bool_exp"]> | undefined | null | Variable<any, string>,
	business_id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>,
	end_date?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	offer_type?: ValueTypes["OfferType_comparison_exp"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["float8_comparison_exp"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	quantity_by_units?: ValueTypes["float8_comparison_exp"] | undefined | null | Variable<any, string>,
	start_date?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>,
	transactionsBySellOrderId?: ValueTypes["Transaction_bool_exp"] | undefined | null | Variable<any, string>,
	transactionsBySellOrderId_aggregate?: ValueTypes["Transaction_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "Order" */
["Order_constraint"]:Order_constraint;
	/** input type for incrementing numeric columns in table "Order" */
["Order_inc_input"]: {
	business_id?: number | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	product_id?: number | undefined | null | Variable<any, string>,
	quantity_by_units?: ValueTypes["float8"] | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "Order" */
["Order_insert_input"]: {
	Business?: ValueTypes["Business_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	Product?: ValueTypes["Product_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	Transactions?: ValueTypes["Transaction_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	business_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	end_date?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	offer_type?: ValueTypes["OfferType"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	product_id?: number | undefined | null | Variable<any, string>,
	quantity_by_units?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	start_date?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	transactionsBySellOrderId?: ValueTypes["Transaction_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["Order_max_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	end_date?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	offer_type?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity_by_units?:boolean | `@${string}`,
	start_date?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "Order" */
["Order_max_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	end_date?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	offer_type?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	quantity_by_units?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	start_date?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["Order_min_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	end_date?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	offer_type?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity_by_units?:boolean | `@${string}`,
	start_date?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "Order" */
["Order_min_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	end_date?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	offer_type?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	quantity_by_units?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	start_date?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "Order" */
["Order_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["Order"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "Order" */
["Order_obj_rel_insert_input"]: {
	data: ValueTypes["Order_insert_input"] | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["Order_on_conflict"] | undefined | null | Variable<any, string>
};
	/** on_conflict condition type for table "Order" */
["Order_on_conflict"]: {
	constraint: ValueTypes["Order_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["Order_update_column"]> | Variable<any, string>,
	where?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "Order". */
["Order_order_by"]: {
	Business?: ValueTypes["Business_order_by"] | undefined | null | Variable<any, string>,
	Product?: ValueTypes["Product_order_by"] | undefined | null | Variable<any, string>,
	Transactions_aggregate?: ValueTypes["Transaction_aggregate_order_by"] | undefined | null | Variable<any, string>,
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	end_date?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	offer_type?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	quantity_by_units?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	start_date?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	transactionsBySellOrderId_aggregate?: ValueTypes["Transaction_aggregate_order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: Order */
["Order_pk_columns_input"]: {
	id: number | Variable<any, string>
};
	/** select columns of table "Order" */
["Order_select_column"]:Order_select_column;
	/** select "Order_aggregate_bool_exp_avg_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_avg_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_avg_arguments_columns;
	/** select "Order_aggregate_bool_exp_corr_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_corr_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_corr_arguments_columns;
	/** select "Order_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_covar_samp_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_covar_samp_arguments_columns;
	/** select "Order_aggregate_bool_exp_max_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_max_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_max_arguments_columns;
	/** select "Order_aggregate_bool_exp_min_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_min_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_min_arguments_columns;
	/** select "Order_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_stddev_samp_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_stddev_samp_arguments_columns;
	/** select "Order_aggregate_bool_exp_sum_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_sum_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_sum_arguments_columns;
	/** select "Order_aggregate_bool_exp_var_samp_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_var_samp_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_var_samp_arguments_columns;
	/** input type for updating data in table "Order" */
["Order_set_input"]: {
	business_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	end_date?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	offer_type?: ValueTypes["OfferType"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	product_id?: number | undefined | null | Variable<any, string>,
	quantity_by_units?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	start_date?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["Order_stddev_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity_by_units?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "Order" */
["Order_stddev_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	quantity_by_units?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["Order_stddev_pop_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity_by_units?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "Order" */
["Order_stddev_pop_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	quantity_by_units?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["Order_stddev_samp_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity_by_units?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "Order" */
["Order_stddev_samp_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	quantity_by_units?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "Order" */
["Order_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["Order_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["Order_stream_cursor_value_input"]: {
	business_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	end_date?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	offer_type?: ValueTypes["OfferType"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	product_id?: number | undefined | null | Variable<any, string>,
	quantity_by_units?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	start_date?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["Order_sum_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity_by_units?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "Order" */
["Order_sum_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	quantity_by_units?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "Order" */
["Order_update_column"]:Order_update_column;
	["Order_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Order_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Order_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["Order_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["Order_var_pop_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity_by_units?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "Order" */
["Order_var_pop_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	quantity_by_units?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["Order_var_samp_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity_by_units?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "Order" */
["Order_var_samp_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	quantity_by_units?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["Order_variance_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity_by_units?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "Order" */
["Order_variance_order_by"]: {
	business_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	price_per_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	product_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	quantity_by_units?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** columns and relationships of "Product" */
["Product"]: AliasType<{
BusinessProducts?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["BusinessProduct_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["BusinessProduct_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["BusinessProduct_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["BusinessProduct"]],
BusinessProducts_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["BusinessProduct_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["BusinessProduct_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["BusinessProduct_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["BusinessProduct_aggregate"]],
	/** An object relationship */
	Category?:ValueTypes["Category"],
Offers?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Offer_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Offer_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Offer"]],
Offers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Offer_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Offer_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Offer_aggregate"]],
Orders?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Order_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Order_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Order"]],
Orders_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Order_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Order_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Order_aggregate"]],
	category_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	image_url?:boolean | `@${string}`,
	measurement_unit?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "Product" */
["Product_aggregate"]: AliasType<{
	aggregate?:ValueTypes["Product_aggregate_fields"],
	nodes?:ValueTypes["Product"],
		__typename?: boolean | `@${string}`
}>;
	["Product_aggregate_bool_exp"]: {
	count?: ValueTypes["Product_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["Product_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["Product_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Product_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "Product" */
["Product_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["Product_avg_fields"],
count?: [{	columns?: Array<ValueTypes["Product_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["Product_max_fields"],
	min?:ValueTypes["Product_min_fields"],
	stddev?:ValueTypes["Product_stddev_fields"],
	stddev_pop?:ValueTypes["Product_stddev_pop_fields"],
	stddev_samp?:ValueTypes["Product_stddev_samp_fields"],
	sum?:ValueTypes["Product_sum_fields"],
	var_pop?:ValueTypes["Product_var_pop_fields"],
	var_samp?:ValueTypes["Product_var_samp_fields"],
	variance?:ValueTypes["Product_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "Product" */
["Product_aggregate_order_by"]: {
	avg?: ValueTypes["Product_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["Product_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["Product_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["Product_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["Product_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["Product_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["Product_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["Product_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["Product_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["Product_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "Product" */
["Product_arr_rel_insert_input"]: {
	data: Array<ValueTypes["Product_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["Product_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["Product_avg_fields"]: AliasType<{
	category_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "Product" */
["Product_avg_order_by"]: {
	category_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "Product". All fields are combined with a logical 'AND'. */
["Product_bool_exp"]: {
	BusinessProducts?: ValueTypes["BusinessProduct_bool_exp"] | undefined | null | Variable<any, string>,
	BusinessProducts_aggregate?: ValueTypes["BusinessProduct_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	Category?: ValueTypes["Category_bool_exp"] | undefined | null | Variable<any, string>,
	Offers?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>,
	Offers_aggregate?: ValueTypes["Offer_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	Orders?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>,
	Orders_aggregate?: ValueTypes["Order_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	_and?: Array<ValueTypes["Product_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["Product_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["Product_bool_exp"]> | undefined | null | Variable<any, string>,
	category_id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	image_url?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	measurement_unit?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "Product" */
["Product_constraint"]:Product_constraint;
	/** input type for incrementing numeric columns in table "Product" */
["Product_inc_input"]: {
	category_id?: number | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "Product" */
["Product_insert_input"]: {
	BusinessProducts?: ValueTypes["BusinessProduct_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	Category?: ValueTypes["Category_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	Offers?: ValueTypes["Offer_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	Orders?: ValueTypes["Order_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	category_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	image_url?: string | undefined | null | Variable<any, string>,
	measurement_unit?: string | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["Product_max_fields"]: AliasType<{
	category_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	image_url?:boolean | `@${string}`,
	measurement_unit?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "Product" */
["Product_max_order_by"]: {
	category_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	image_url?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	measurement_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["Product_min_fields"]: AliasType<{
	category_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	image_url?:boolean | `@${string}`,
	measurement_unit?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "Product" */
["Product_min_order_by"]: {
	category_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	image_url?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	measurement_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "Product" */
["Product_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["Product"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "Product" */
["Product_obj_rel_insert_input"]: {
	data: ValueTypes["Product_insert_input"] | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["Product_on_conflict"] | undefined | null | Variable<any, string>
};
	/** on_conflict condition type for table "Product" */
["Product_on_conflict"]: {
	constraint: ValueTypes["Product_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["Product_update_column"]> | Variable<any, string>,
	where?: ValueTypes["Product_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "Product". */
["Product_order_by"]: {
	BusinessProducts_aggregate?: ValueTypes["BusinessProduct_aggregate_order_by"] | undefined | null | Variable<any, string>,
	Category?: ValueTypes["Category_order_by"] | undefined | null | Variable<any, string>,
	Offers_aggregate?: ValueTypes["Offer_aggregate_order_by"] | undefined | null | Variable<any, string>,
	Orders_aggregate?: ValueTypes["Order_aggregate_order_by"] | undefined | null | Variable<any, string>,
	category_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	image_url?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	measurement_unit?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: Product */
["Product_pk_columns_input"]: {
	id: number | Variable<any, string>
};
	/** select columns of table "Product" */
["Product_select_column"]:Product_select_column;
	/** input type for updating data in table "Product" */
["Product_set_input"]: {
	category_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	image_url?: string | undefined | null | Variable<any, string>,
	measurement_unit?: string | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["Product_stddev_fields"]: AliasType<{
	category_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "Product" */
["Product_stddev_order_by"]: {
	category_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["Product_stddev_pop_fields"]: AliasType<{
	category_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "Product" */
["Product_stddev_pop_order_by"]: {
	category_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["Product_stddev_samp_fields"]: AliasType<{
	category_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "Product" */
["Product_stddev_samp_order_by"]: {
	category_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "Product" */
["Product_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["Product_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["Product_stream_cursor_value_input"]: {
	category_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	image_url?: string | undefined | null | Variable<any, string>,
	measurement_unit?: string | undefined | null | Variable<any, string>,
	name?: string | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["Product_sum_fields"]: AliasType<{
	category_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "Product" */
["Product_sum_order_by"]: {
	category_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "Product" */
["Product_update_column"]:Product_update_column;
	["Product_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Product_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Product_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["Product_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["Product_var_pop_fields"]: AliasType<{
	category_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "Product" */
["Product_var_pop_order_by"]: {
	category_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["Product_var_samp_fields"]: AliasType<{
	category_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "Product" */
["Product_var_samp_order_by"]: {
	category_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["Product_variance_fields"]: AliasType<{
	category_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "Product" */
["Product_variance_order_by"]: {
	category_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** columns and relationships of "Profile" */
["Profile"]: AliasType<{
BusinessWorkers?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["BusinessWorker_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["BusinessWorker_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["BusinessWorker_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["BusinessWorker"]],
BusinessWorkers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["BusinessWorker_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["BusinessWorker_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["BusinessWorker_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["BusinessWorker_aggregate"]],
	created_at?:boolean | `@${string}`,
	first_name?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	last_name?:boolean | `@${string}`,
	phone?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "Profile" */
["Profile_aggregate"]: AliasType<{
	aggregate?:ValueTypes["Profile_aggregate_fields"],
	nodes?:ValueTypes["Profile"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "Profile" */
["Profile_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["Profile_avg_fields"],
count?: [{	columns?: Array<ValueTypes["Profile_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["Profile_max_fields"],
	min?:ValueTypes["Profile_min_fields"],
	stddev?:ValueTypes["Profile_stddev_fields"],
	stddev_pop?:ValueTypes["Profile_stddev_pop_fields"],
	stddev_samp?:ValueTypes["Profile_stddev_samp_fields"],
	sum?:ValueTypes["Profile_sum_fields"],
	var_pop?:ValueTypes["Profile_var_pop_fields"],
	var_samp?:ValueTypes["Profile_var_samp_fields"],
	variance?:ValueTypes["Profile_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["Profile_avg_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "Profile". All fields are combined with a logical 'AND'. */
["Profile_bool_exp"]: {
	BusinessWorkers?: ValueTypes["BusinessWorker_bool_exp"] | undefined | null | Variable<any, string>,
	BusinessWorkers_aggregate?: ValueTypes["BusinessWorker_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	_and?: Array<ValueTypes["Profile_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["Profile_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["Profile_bool_exp"]> | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>,
	first_name?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	last_name?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	phone?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "Profile" */
["Profile_constraint"]:Profile_constraint;
	/** input type for incrementing numeric columns in table "Profile" */
["Profile_inc_input"]: {
	id?: number | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "Profile" */
["Profile_insert_input"]: {
	BusinessWorkers?: ValueTypes["BusinessWorker_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	first_name?: string | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	last_name?: string | undefined | null | Variable<any, string>,
	phone?: string | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["Profile_max_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	first_name?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	last_name?:boolean | `@${string}`,
	phone?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["Profile_min_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	first_name?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	last_name?:boolean | `@${string}`,
	phone?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "Profile" */
["Profile_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["Profile"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "Profile" */
["Profile_obj_rel_insert_input"]: {
	data: ValueTypes["Profile_insert_input"] | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["Profile_on_conflict"] | undefined | null | Variable<any, string>
};
	/** on_conflict condition type for table "Profile" */
["Profile_on_conflict"]: {
	constraint: ValueTypes["Profile_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["Profile_update_column"]> | Variable<any, string>,
	where?: ValueTypes["Profile_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "Profile". */
["Profile_order_by"]: {
	BusinessWorkers_aggregate?: ValueTypes["BusinessWorker_aggregate_order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	first_name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	last_name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	phone?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: Profile */
["Profile_pk_columns_input"]: {
	id: number | Variable<any, string>
};
	/** select columns of table "Profile" */
["Profile_select_column"]:Profile_select_column;
	/** input type for updating data in table "Profile" */
["Profile_set_input"]: {
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	first_name?: string | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	last_name?: string | undefined | null | Variable<any, string>,
	phone?: string | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["Profile_stddev_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["Profile_stddev_pop_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["Profile_stddev_samp_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "Profile" */
["Profile_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["Profile_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["Profile_stream_cursor_value_input"]: {
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	first_name?: string | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	last_name?: string | undefined | null | Variable<any, string>,
	phone?: string | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["Profile_sum_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** update columns of table "Profile" */
["Profile_update_column"]:Profile_update_column;
	["Profile_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Profile_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Profile_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["Profile_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["Profile_var_pop_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["Profile_var_samp_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["Profile_variance_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
["String_comparison_exp"]: {
	_eq?: string | undefined | null | Variable<any, string>,
	_gt?: string | undefined | null | Variable<any, string>,
	_gte?: string | undefined | null | Variable<any, string>,
	/** does the column match the given case-insensitive pattern */
	_ilike?: string | undefined | null | Variable<any, string>,
	_in?: Array<string> | undefined | null | Variable<any, string>,
	/** does the column match the given POSIX regular expression, case insensitive */
	_iregex?: string | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	/** does the column match the given pattern */
	_like?: string | undefined | null | Variable<any, string>,
	_lt?: string | undefined | null | Variable<any, string>,
	_lte?: string | undefined | null | Variable<any, string>,
	_neq?: string | undefined | null | Variable<any, string>,
	/** does the column NOT match the given case-insensitive pattern */
	_nilike?: string | undefined | null | Variable<any, string>,
	_nin?: Array<string> | undefined | null | Variable<any, string>,
	/** does the column NOT match the given POSIX regular expression, case insensitive */
	_niregex?: string | undefined | null | Variable<any, string>,
	/** does the column NOT match the given pattern */
	_nlike?: string | undefined | null | Variable<any, string>,
	/** does the column NOT match the given POSIX regular expression, case sensitive */
	_nregex?: string | undefined | null | Variable<any, string>,
	/** does the column NOT match the given SQL regular expression */
	_nsimilar?: string | undefined | null | Variable<any, string>,
	/** does the column match the given POSIX regular expression, case sensitive */
	_regex?: string | undefined | null | Variable<any, string>,
	/** does the column match the given SQL regular expression */
	_similar?: string | undefined | null | Variable<any, string>
};
	/** columns and relationships of "Transaction" */
["Transaction"]: AliasType<{
	/** An object relationship */
	Order?:ValueTypes["Order"],
TransactionReviews?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["TransactionReview_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["TransactionReview_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["TransactionReview_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["TransactionReview"]],
TransactionReviews_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["TransactionReview_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["TransactionReview_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["TransactionReview_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["TransactionReview_aggregate"]],
	buy_order_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** An object relationship */
	orderBySellOrderId?:ValueTypes["Order"],
	profile_id?:boolean | `@${string}`,
	sell_order_id?:boolean | `@${string}`,
	status?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "TransactionReview" */
["TransactionReview"]: AliasType<{
	/** An object relationship */
	Transaction?:ValueTypes["Transaction"],
	comment?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	rating?:boolean | `@${string}`,
	transaction_id?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "TransactionReview" */
["TransactionReview_aggregate"]: AliasType<{
	aggregate?:ValueTypes["TransactionReview_aggregate_fields"],
	nodes?:ValueTypes["TransactionReview"],
		__typename?: boolean | `@${string}`
}>;
	["TransactionReview_aggregate_bool_exp"]: {
	count?: ValueTypes["TransactionReview_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["TransactionReview_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["TransactionReview_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["TransactionReview_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "TransactionReview" */
["TransactionReview_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["TransactionReview_avg_fields"],
count?: [{	columns?: Array<ValueTypes["TransactionReview_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["TransactionReview_max_fields"],
	min?:ValueTypes["TransactionReview_min_fields"],
	stddev?:ValueTypes["TransactionReview_stddev_fields"],
	stddev_pop?:ValueTypes["TransactionReview_stddev_pop_fields"],
	stddev_samp?:ValueTypes["TransactionReview_stddev_samp_fields"],
	sum?:ValueTypes["TransactionReview_sum_fields"],
	var_pop?:ValueTypes["TransactionReview_var_pop_fields"],
	var_samp?:ValueTypes["TransactionReview_var_samp_fields"],
	variance?:ValueTypes["TransactionReview_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "TransactionReview" */
["TransactionReview_aggregate_order_by"]: {
	avg?: ValueTypes["TransactionReview_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["TransactionReview_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["TransactionReview_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["TransactionReview_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["TransactionReview_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["TransactionReview_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["TransactionReview_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["TransactionReview_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["TransactionReview_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["TransactionReview_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "TransactionReview" */
["TransactionReview_arr_rel_insert_input"]: {
	data: Array<ValueTypes["TransactionReview_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["TransactionReview_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["TransactionReview_avg_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	rating?:boolean | `@${string}`,
	transaction_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "TransactionReview" */
["TransactionReview_avg_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	rating?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	transaction_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "TransactionReview". All fields are combined with a logical 'AND'. */
["TransactionReview_bool_exp"]: {
	Transaction?: ValueTypes["Transaction_bool_exp"] | undefined | null | Variable<any, string>,
	_and?: Array<ValueTypes["TransactionReview_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["TransactionReview_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["TransactionReview_bool_exp"]> | undefined | null | Variable<any, string>,
	comment?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	rating?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	transaction_id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "TransactionReview" */
["TransactionReview_constraint"]:TransactionReview_constraint;
	/** input type for incrementing numeric columns in table "TransactionReview" */
["TransactionReview_inc_input"]: {
	id?: number | undefined | null | Variable<any, string>,
	rating?: number | undefined | null | Variable<any, string>,
	transaction_id?: number | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "TransactionReview" */
["TransactionReview_insert_input"]: {
	Transaction?: ValueTypes["Transaction_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	comment?: string | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	rating?: number | undefined | null | Variable<any, string>,
	transaction_id?: number | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["TransactionReview_max_fields"]: AliasType<{
	comment?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	rating?:boolean | `@${string}`,
	transaction_id?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "TransactionReview" */
["TransactionReview_max_order_by"]: {
	comment?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	rating?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	transaction_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["TransactionReview_min_fields"]: AliasType<{
	comment?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	rating?:boolean | `@${string}`,
	transaction_id?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "TransactionReview" */
["TransactionReview_min_order_by"]: {
	comment?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	rating?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	transaction_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "TransactionReview" */
["TransactionReview_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["TransactionReview"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "TransactionReview" */
["TransactionReview_on_conflict"]: {
	constraint: ValueTypes["TransactionReview_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["TransactionReview_update_column"]> | Variable<any, string>,
	where?: ValueTypes["TransactionReview_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "TransactionReview". */
["TransactionReview_order_by"]: {
	Transaction?: ValueTypes["Transaction_order_by"] | undefined | null | Variable<any, string>,
	comment?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	rating?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	transaction_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: TransactionReview */
["TransactionReview_pk_columns_input"]: {
	id: number | Variable<any, string>
};
	/** select columns of table "TransactionReview" */
["TransactionReview_select_column"]:TransactionReview_select_column;
	/** input type for updating data in table "TransactionReview" */
["TransactionReview_set_input"]: {
	comment?: string | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	rating?: number | undefined | null | Variable<any, string>,
	transaction_id?: number | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["TransactionReview_stddev_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	rating?:boolean | `@${string}`,
	transaction_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "TransactionReview" */
["TransactionReview_stddev_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	rating?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	transaction_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["TransactionReview_stddev_pop_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	rating?:boolean | `@${string}`,
	transaction_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "TransactionReview" */
["TransactionReview_stddev_pop_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	rating?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	transaction_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["TransactionReview_stddev_samp_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	rating?:boolean | `@${string}`,
	transaction_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "TransactionReview" */
["TransactionReview_stddev_samp_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	rating?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	transaction_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "TransactionReview" */
["TransactionReview_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["TransactionReview_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["TransactionReview_stream_cursor_value_input"]: {
	comment?: string | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	rating?: number | undefined | null | Variable<any, string>,
	transaction_id?: number | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["TransactionReview_sum_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	rating?:boolean | `@${string}`,
	transaction_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "TransactionReview" */
["TransactionReview_sum_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	rating?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	transaction_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "TransactionReview" */
["TransactionReview_update_column"]:TransactionReview_update_column;
	["TransactionReview_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["TransactionReview_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["TransactionReview_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["TransactionReview_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["TransactionReview_var_pop_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	rating?:boolean | `@${string}`,
	transaction_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "TransactionReview" */
["TransactionReview_var_pop_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	rating?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	transaction_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["TransactionReview_var_samp_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	rating?:boolean | `@${string}`,
	transaction_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "TransactionReview" */
["TransactionReview_var_samp_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	rating?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	transaction_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["TransactionReview_variance_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	rating?:boolean | `@${string}`,
	transaction_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "TransactionReview" */
["TransactionReview_variance_order_by"]: {
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	rating?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	transaction_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	["TransactionStatus"]:unknown;
	/** Boolean expression to compare columns of type "TransactionStatus". All fields are combined with logical 'AND'. */
["TransactionStatus_comparison_exp"]: {
	_eq?: ValueTypes["TransactionStatus"] | undefined | null | Variable<any, string>,
	_gt?: ValueTypes["TransactionStatus"] | undefined | null | Variable<any, string>,
	_gte?: ValueTypes["TransactionStatus"] | undefined | null | Variable<any, string>,
	_in?: Array<ValueTypes["TransactionStatus"]> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_lt?: ValueTypes["TransactionStatus"] | undefined | null | Variable<any, string>,
	_lte?: ValueTypes["TransactionStatus"] | undefined | null | Variable<any, string>,
	_neq?: ValueTypes["TransactionStatus"] | undefined | null | Variable<any, string>,
	_nin?: Array<ValueTypes["TransactionStatus"]> | undefined | null | Variable<any, string>
};
	/** aggregated selection of "Transaction" */
["Transaction_aggregate"]: AliasType<{
	aggregate?:ValueTypes["Transaction_aggregate_fields"],
	nodes?:ValueTypes["Transaction"],
		__typename?: boolean | `@${string}`
}>;
	["Transaction_aggregate_bool_exp"]: {
	count?: ValueTypes["Transaction_aggregate_bool_exp_count"] | undefined | null | Variable<any, string>
};
	["Transaction_aggregate_bool_exp_count"]: {
	arguments?: Array<ValueTypes["Transaction_select_column"]> | undefined | null | Variable<any, string>,
	distinct?: boolean | undefined | null | Variable<any, string>,
	filter?: ValueTypes["Transaction_bool_exp"] | undefined | null | Variable<any, string>,
	predicate: ValueTypes["Int_comparison_exp"] | Variable<any, string>
};
	/** aggregate fields of "Transaction" */
["Transaction_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["Transaction_avg_fields"],
count?: [{	columns?: Array<ValueTypes["Transaction_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["Transaction_max_fields"],
	min?:ValueTypes["Transaction_min_fields"],
	stddev?:ValueTypes["Transaction_stddev_fields"],
	stddev_pop?:ValueTypes["Transaction_stddev_pop_fields"],
	stddev_samp?:ValueTypes["Transaction_stddev_samp_fields"],
	sum?:ValueTypes["Transaction_sum_fields"],
	var_pop?:ValueTypes["Transaction_var_pop_fields"],
	var_samp?:ValueTypes["Transaction_var_samp_fields"],
	variance?:ValueTypes["Transaction_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "Transaction" */
["Transaction_aggregate_order_by"]: {
	avg?: ValueTypes["Transaction_avg_order_by"] | undefined | null | Variable<any, string>,
	count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	max?: ValueTypes["Transaction_max_order_by"] | undefined | null | Variable<any, string>,
	min?: ValueTypes["Transaction_min_order_by"] | undefined | null | Variable<any, string>,
	stddev?: ValueTypes["Transaction_stddev_order_by"] | undefined | null | Variable<any, string>,
	stddev_pop?: ValueTypes["Transaction_stddev_pop_order_by"] | undefined | null | Variable<any, string>,
	stddev_samp?: ValueTypes["Transaction_stddev_samp_order_by"] | undefined | null | Variable<any, string>,
	sum?: ValueTypes["Transaction_sum_order_by"] | undefined | null | Variable<any, string>,
	var_pop?: ValueTypes["Transaction_var_pop_order_by"] | undefined | null | Variable<any, string>,
	var_samp?: ValueTypes["Transaction_var_samp_order_by"] | undefined | null | Variable<any, string>,
	variance?: ValueTypes["Transaction_variance_order_by"] | undefined | null | Variable<any, string>
};
	/** input type for inserting array relation for remote table "Transaction" */
["Transaction_arr_rel_insert_input"]: {
	data: Array<ValueTypes["Transaction_insert_input"]> | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["Transaction_on_conflict"] | undefined | null | Variable<any, string>
};
	/** aggregate avg on columns */
["Transaction_avg_fields"]: AliasType<{
	buy_order_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	sell_order_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "Transaction" */
["Transaction_avg_order_by"]: {
	buy_order_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	sell_order_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Boolean expression to filter rows from the table "Transaction". All fields are combined with a logical 'AND'. */
["Transaction_bool_exp"]: {
	Order?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>,
	TransactionReviews?: ValueTypes["TransactionReview_bool_exp"] | undefined | null | Variable<any, string>,
	TransactionReviews_aggregate?: ValueTypes["TransactionReview_aggregate_bool_exp"] | undefined | null | Variable<any, string>,
	_and?: Array<ValueTypes["Transaction_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["Transaction_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["Transaction_bool_exp"]> | undefined | null | Variable<any, string>,
	buy_order_id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	orderBySellOrderId?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	sell_order_id?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	status?: ValueTypes["TransactionStatus_comparison_exp"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "Transaction" */
["Transaction_constraint"]:Transaction_constraint;
	/** input type for incrementing numeric columns in table "Transaction" */
["Transaction_inc_input"]: {
	buy_order_id?: number | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	profile_id?: number | undefined | null | Variable<any, string>,
	sell_order_id?: number | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "Transaction" */
["Transaction_insert_input"]: {
	Order?: ValueTypes["Order_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	TransactionReviews?: ValueTypes["TransactionReview_arr_rel_insert_input"] | undefined | null | Variable<any, string>,
	buy_order_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	orderBySellOrderId?: ValueTypes["Order_obj_rel_insert_input"] | undefined | null | Variable<any, string>,
	profile_id?: number | undefined | null | Variable<any, string>,
	sell_order_id?: number | undefined | null | Variable<any, string>,
	status?: ValueTypes["TransactionStatus"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["Transaction_max_fields"]: AliasType<{
	buy_order_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	sell_order_id?:boolean | `@${string}`,
	status?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "Transaction" */
["Transaction_max_order_by"]: {
	buy_order_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	sell_order_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	status?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate min on columns */
["Transaction_min_fields"]: AliasType<{
	buy_order_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	sell_order_id?:boolean | `@${string}`,
	status?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "Transaction" */
["Transaction_min_order_by"]: {
	buy_order_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	sell_order_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	status?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** response of any mutation on the table "Transaction" */
["Transaction_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["Transaction"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "Transaction" */
["Transaction_obj_rel_insert_input"]: {
	data: ValueTypes["Transaction_insert_input"] | Variable<any, string>,
	/** upsert condition */
	on_conflict?: ValueTypes["Transaction_on_conflict"] | undefined | null | Variable<any, string>
};
	/** on_conflict condition type for table "Transaction" */
["Transaction_on_conflict"]: {
	constraint: ValueTypes["Transaction_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["Transaction_update_column"]> | Variable<any, string>,
	where?: ValueTypes["Transaction_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "Transaction". */
["Transaction_order_by"]: {
	Order?: ValueTypes["Order_order_by"] | undefined | null | Variable<any, string>,
	TransactionReviews_aggregate?: ValueTypes["TransactionReview_aggregate_order_by"] | undefined | null | Variable<any, string>,
	buy_order_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	orderBySellOrderId?: ValueTypes["Order_order_by"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	sell_order_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	status?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: Transaction */
["Transaction_pk_columns_input"]: {
	id: number | Variable<any, string>
};
	/** select columns of table "Transaction" */
["Transaction_select_column"]:Transaction_select_column;
	/** input type for updating data in table "Transaction" */
["Transaction_set_input"]: {
	buy_order_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	profile_id?: number | undefined | null | Variable<any, string>,
	sell_order_id?: number | undefined | null | Variable<any, string>,
	status?: ValueTypes["TransactionStatus"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["Transaction_stddev_fields"]: AliasType<{
	buy_order_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	sell_order_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "Transaction" */
["Transaction_stddev_order_by"]: {
	buy_order_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	sell_order_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_pop on columns */
["Transaction_stddev_pop_fields"]: AliasType<{
	buy_order_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	sell_order_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "Transaction" */
["Transaction_stddev_pop_order_by"]: {
	buy_order_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	sell_order_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev_samp on columns */
["Transaction_stddev_samp_fields"]: AliasType<{
	buy_order_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	sell_order_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "Transaction" */
["Transaction_stddev_samp_order_by"]: {
	buy_order_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	sell_order_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** Streaming cursor of the table "Transaction" */
["Transaction_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["Transaction_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["Transaction_stream_cursor_value_input"]: {
	buy_order_id?: number | undefined | null | Variable<any, string>,
	created_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	id?: number | undefined | null | Variable<any, string>,
	profile_id?: number | undefined | null | Variable<any, string>,
	sell_order_id?: number | undefined | null | Variable<any, string>,
	status?: ValueTypes["TransactionStatus"] | undefined | null | Variable<any, string>,
	updated_at?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["Transaction_sum_fields"]: AliasType<{
	buy_order_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	sell_order_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "Transaction" */
["Transaction_sum_order_by"]: {
	buy_order_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	sell_order_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** update columns of table "Transaction" */
["Transaction_update_column"]:Transaction_update_column;
	["Transaction_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Transaction_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Transaction_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["Transaction_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["Transaction_var_pop_fields"]: AliasType<{
	buy_order_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	sell_order_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "Transaction" */
["Transaction_var_pop_order_by"]: {
	buy_order_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	sell_order_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate var_samp on columns */
["Transaction_var_samp_fields"]: AliasType<{
	buy_order_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	sell_order_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "Transaction" */
["Transaction_var_samp_order_by"]: {
	buy_order_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	sell_order_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** aggregate variance on columns */
["Transaction_variance_fields"]: AliasType<{
	buy_order_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	sell_order_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "Transaction" */
["Transaction_variance_order_by"]: {
	buy_order_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	profile_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	sell_order_id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** columns and relationships of "_prisma_migrations" */
["_prisma_migrations"]: AliasType<{
	applied_steps_count?:boolean | `@${string}`,
	checksum?:boolean | `@${string}`,
	finished_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	logs?:boolean | `@${string}`,
	migration_name?:boolean | `@${string}`,
	rolled_back_at?:boolean | `@${string}`,
	started_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "_prisma_migrations" */
["_prisma_migrations_aggregate"]: AliasType<{
	aggregate?:ValueTypes["_prisma_migrations_aggregate_fields"],
	nodes?:ValueTypes["_prisma_migrations"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "_prisma_migrations" */
["_prisma_migrations_aggregate_fields"]: AliasType<{
	avg?:ValueTypes["_prisma_migrations_avg_fields"],
count?: [{	columns?: Array<ValueTypes["_prisma_migrations_select_column"]> | undefined | null | Variable<any, string>,	distinct?: boolean | undefined | null | Variable<any, string>},boolean | `@${string}`],
	max?:ValueTypes["_prisma_migrations_max_fields"],
	min?:ValueTypes["_prisma_migrations_min_fields"],
	stddev?:ValueTypes["_prisma_migrations_stddev_fields"],
	stddev_pop?:ValueTypes["_prisma_migrations_stddev_pop_fields"],
	stddev_samp?:ValueTypes["_prisma_migrations_stddev_samp_fields"],
	sum?:ValueTypes["_prisma_migrations_sum_fields"],
	var_pop?:ValueTypes["_prisma_migrations_var_pop_fields"],
	var_samp?:ValueTypes["_prisma_migrations_var_samp_fields"],
	variance?:ValueTypes["_prisma_migrations_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["_prisma_migrations_avg_fields"]: AliasType<{
	applied_steps_count?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "_prisma_migrations". All fields are combined with a logical 'AND'. */
["_prisma_migrations_bool_exp"]: {
	_and?: Array<ValueTypes["_prisma_migrations_bool_exp"]> | undefined | null | Variable<any, string>,
	_not?: ValueTypes["_prisma_migrations_bool_exp"] | undefined | null | Variable<any, string>,
	_or?: Array<ValueTypes["_prisma_migrations_bool_exp"]> | undefined | null | Variable<any, string>,
	applied_steps_count?: ValueTypes["Int_comparison_exp"] | undefined | null | Variable<any, string>,
	checksum?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	finished_at?: ValueTypes["timestamptz_comparison_exp"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	logs?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	migration_name?: ValueTypes["String_comparison_exp"] | undefined | null | Variable<any, string>,
	rolled_back_at?: ValueTypes["timestamptz_comparison_exp"] | undefined | null | Variable<any, string>,
	started_at?: ValueTypes["timestamptz_comparison_exp"] | undefined | null | Variable<any, string>
};
	/** unique or primary key constraints on table "_prisma_migrations" */
["_prisma_migrations_constraint"]:_prisma_migrations_constraint;
	/** input type for incrementing numeric columns in table "_prisma_migrations" */
["_prisma_migrations_inc_input"]: {
	applied_steps_count?: number | undefined | null | Variable<any, string>
};
	/** input type for inserting data into table "_prisma_migrations" */
["_prisma_migrations_insert_input"]: {
	applied_steps_count?: number | undefined | null | Variable<any, string>,
	checksum?: string | undefined | null | Variable<any, string>,
	finished_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	id?: string | undefined | null | Variable<any, string>,
	logs?: string | undefined | null | Variable<any, string>,
	migration_name?: string | undefined | null | Variable<any, string>,
	rolled_back_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	started_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>
};
	/** aggregate max on columns */
["_prisma_migrations_max_fields"]: AliasType<{
	applied_steps_count?:boolean | `@${string}`,
	checksum?:boolean | `@${string}`,
	finished_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	logs?:boolean | `@${string}`,
	migration_name?:boolean | `@${string}`,
	rolled_back_at?:boolean | `@${string}`,
	started_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["_prisma_migrations_min_fields"]: AliasType<{
	applied_steps_count?:boolean | `@${string}`,
	checksum?:boolean | `@${string}`,
	finished_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	logs?:boolean | `@${string}`,
	migration_name?:boolean | `@${string}`,
	rolled_back_at?:boolean | `@${string}`,
	started_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "_prisma_migrations" */
["_prisma_migrations_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ValueTypes["_prisma_migrations"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "_prisma_migrations" */
["_prisma_migrations_on_conflict"]: {
	constraint: ValueTypes["_prisma_migrations_constraint"] | Variable<any, string>,
	update_columns: Array<ValueTypes["_prisma_migrations_update_column"]> | Variable<any, string>,
	where?: ValueTypes["_prisma_migrations_bool_exp"] | undefined | null | Variable<any, string>
};
	/** Ordering options when selecting data from "_prisma_migrations". */
["_prisma_migrations_order_by"]: {
	applied_steps_count?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	checksum?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	finished_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	id?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	logs?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	migration_name?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	rolled_back_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>,
	started_at?: ValueTypes["order_by"] | undefined | null | Variable<any, string>
};
	/** primary key columns input for table: _prisma_migrations */
["_prisma_migrations_pk_columns_input"]: {
	id: string | Variable<any, string>
};
	/** select columns of table "_prisma_migrations" */
["_prisma_migrations_select_column"]:_prisma_migrations_select_column;
	/** input type for updating data in table "_prisma_migrations" */
["_prisma_migrations_set_input"]: {
	applied_steps_count?: number | undefined | null | Variable<any, string>,
	checksum?: string | undefined | null | Variable<any, string>,
	finished_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	id?: string | undefined | null | Variable<any, string>,
	logs?: string | undefined | null | Variable<any, string>,
	migration_name?: string | undefined | null | Variable<any, string>,
	rolled_back_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	started_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>
};
	/** aggregate stddev on columns */
["_prisma_migrations_stddev_fields"]: AliasType<{
	applied_steps_count?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["_prisma_migrations_stddev_pop_fields"]: AliasType<{
	applied_steps_count?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["_prisma_migrations_stddev_samp_fields"]: AliasType<{
	applied_steps_count?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "_prisma_migrations" */
["_prisma_migrations_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ValueTypes["_prisma_migrations_stream_cursor_value_input"] | Variable<any, string>,
	/** cursor ordering */
	ordering?: ValueTypes["cursor_ordering"] | undefined | null | Variable<any, string>
};
	/** Initial value of the column from where the streaming should start */
["_prisma_migrations_stream_cursor_value_input"]: {
	applied_steps_count?: number | undefined | null | Variable<any, string>,
	checksum?: string | undefined | null | Variable<any, string>,
	finished_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	id?: string | undefined | null | Variable<any, string>,
	logs?: string | undefined | null | Variable<any, string>,
	migration_name?: string | undefined | null | Variable<any, string>,
	rolled_back_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	started_at?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>
};
	/** aggregate sum on columns */
["_prisma_migrations_sum_fields"]: AliasType<{
	applied_steps_count?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** update columns of table "_prisma_migrations" */
["_prisma_migrations_update_column"]:_prisma_migrations_update_column;
	["_prisma_migrations_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["_prisma_migrations_inc_input"] | undefined | null | Variable<any, string>,
	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["_prisma_migrations_set_input"] | undefined | null | Variable<any, string>,
	/** filter the rows which have to be updated */
	where: ValueTypes["_prisma_migrations_bool_exp"] | Variable<any, string>
};
	/** aggregate var_pop on columns */
["_prisma_migrations_var_pop_fields"]: AliasType<{
	applied_steps_count?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["_prisma_migrations_var_samp_fields"]: AliasType<{
	applied_steps_count?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["_prisma_migrations_variance_fields"]: AliasType<{
	applied_steps_count?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** ordering argument of a cursor */
["cursor_ordering"]:cursor_ordering;
	["float8"]:unknown;
	/** Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'. */
["float8_comparison_exp"]: {
	_eq?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	_gt?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	_gte?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	_in?: Array<ValueTypes["float8"]> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_lt?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	_lte?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	_neq?: ValueTypes["float8"] | undefined | null | Variable<any, string>,
	_nin?: Array<ValueTypes["float8"]> | undefined | null | Variable<any, string>
};
	/** mutation root */
["mutation_root"]: AliasType<{
delete_Business?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["Business_bool_exp"] | Variable<any, string>},ValueTypes["Business_mutation_response"]],
delete_BusinessProduct?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["BusinessProduct_bool_exp"] | Variable<any, string>},ValueTypes["BusinessProduct_mutation_response"]],
delete_BusinessProduct_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["BusinessProduct"]],
delete_BusinessWorker?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["BusinessWorker_bool_exp"] | Variable<any, string>},ValueTypes["BusinessWorker_mutation_response"]],
delete_BusinessWorker_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["BusinessWorker"]],
delete_Business_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Business"]],
delete_Category?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["Category_bool_exp"] | Variable<any, string>},ValueTypes["Category_mutation_response"]],
delete_Category_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Category"]],
delete_Certificate?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["Certificate_bool_exp"] | Variable<any, string>},ValueTypes["Certificate_mutation_response"]],
delete_CertificateCategory?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["CertificateCategory_bool_exp"] | Variable<any, string>},ValueTypes["CertificateCategory_mutation_response"]],
delete_CertificateCategory_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["CertificateCategory"]],
delete_CertificateClaim?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["CertificateClaim_bool_exp"] | Variable<any, string>},ValueTypes["CertificateClaim_mutation_response"]],
delete_CertificateClaim_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["CertificateClaim"]],
delete_Certificate_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Certificate"]],
delete_Offer?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["Offer_bool_exp"] | Variable<any, string>},ValueTypes["Offer_mutation_response"]],
delete_Offer_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Offer"]],
delete_Order?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["Order_bool_exp"] | Variable<any, string>},ValueTypes["Order_mutation_response"]],
delete_Order_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Order"]],
delete_Product?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["Product_bool_exp"] | Variable<any, string>},ValueTypes["Product_mutation_response"]],
delete_Product_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Product"]],
delete_Profile?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["Profile_bool_exp"] | Variable<any, string>},ValueTypes["Profile_mutation_response"]],
delete_Profile_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Profile"]],
delete_Transaction?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["Transaction_bool_exp"] | Variable<any, string>},ValueTypes["Transaction_mutation_response"]],
delete_TransactionReview?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["TransactionReview_bool_exp"] | Variable<any, string>},ValueTypes["TransactionReview_mutation_response"]],
delete_TransactionReview_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["TransactionReview"]],
delete_Transaction_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Transaction"]],
delete__prisma_migrations?: [{	/** filter the rows which have to be deleted */
	where: ValueTypes["_prisma_migrations_bool_exp"] | Variable<any, string>},ValueTypes["_prisma_migrations_mutation_response"]],
delete__prisma_migrations_by_pk?: [{	id: string | Variable<any, string>},ValueTypes["_prisma_migrations"]],
insert_Business?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["Business_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["Business_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["Business_mutation_response"]],
insert_BusinessProduct?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["BusinessProduct_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["BusinessProduct_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["BusinessProduct_mutation_response"]],
insert_BusinessProduct_one?: [{	/** the row to be inserted */
	object: ValueTypes["BusinessProduct_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["BusinessProduct_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["BusinessProduct"]],
insert_BusinessWorker?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["BusinessWorker_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["BusinessWorker_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["BusinessWorker_mutation_response"]],
insert_BusinessWorker_one?: [{	/** the row to be inserted */
	object: ValueTypes["BusinessWorker_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["BusinessWorker_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["BusinessWorker"]],
insert_Business_one?: [{	/** the row to be inserted */
	object: ValueTypes["Business_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["Business_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["Business"]],
insert_Category?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["Category_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["Category_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["Category_mutation_response"]],
insert_Category_one?: [{	/** the row to be inserted */
	object: ValueTypes["Category_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["Category_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["Category"]],
insert_Certificate?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["Certificate_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["Certificate_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["Certificate_mutation_response"]],
insert_CertificateCategory?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["CertificateCategory_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["CertificateCategory_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["CertificateCategory_mutation_response"]],
insert_CertificateCategory_one?: [{	/** the row to be inserted */
	object: ValueTypes["CertificateCategory_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["CertificateCategory_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["CertificateCategory"]],
insert_CertificateClaim?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["CertificateClaim_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["CertificateClaim_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["CertificateClaim_mutation_response"]],
insert_CertificateClaim_one?: [{	/** the row to be inserted */
	object: ValueTypes["CertificateClaim_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["CertificateClaim_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["CertificateClaim"]],
insert_Certificate_one?: [{	/** the row to be inserted */
	object: ValueTypes["Certificate_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["Certificate_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["Certificate"]],
insert_Offer?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["Offer_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["Offer_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["Offer_mutation_response"]],
insert_Offer_one?: [{	/** the row to be inserted */
	object: ValueTypes["Offer_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["Offer_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["Offer"]],
insert_Order?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["Order_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["Order_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["Order_mutation_response"]],
insert_Order_one?: [{	/** the row to be inserted */
	object: ValueTypes["Order_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["Order_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["Order"]],
insert_Product?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["Product_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["Product_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["Product_mutation_response"]],
insert_Product_one?: [{	/** the row to be inserted */
	object: ValueTypes["Product_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["Product_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["Product"]],
insert_Profile?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["Profile_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["Profile_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["Profile_mutation_response"]],
insert_Profile_one?: [{	/** the row to be inserted */
	object: ValueTypes["Profile_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["Profile_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["Profile"]],
insert_Transaction?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["Transaction_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["Transaction_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["Transaction_mutation_response"]],
insert_TransactionReview?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["TransactionReview_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["TransactionReview_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["TransactionReview_mutation_response"]],
insert_TransactionReview_one?: [{	/** the row to be inserted */
	object: ValueTypes["TransactionReview_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["TransactionReview_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["TransactionReview"]],
insert_Transaction_one?: [{	/** the row to be inserted */
	object: ValueTypes["Transaction_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["Transaction_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["Transaction"]],
insert__prisma_migrations?: [{	/** the rows to be inserted */
	objects: Array<ValueTypes["_prisma_migrations_insert_input"]> | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["_prisma_migrations_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["_prisma_migrations_mutation_response"]],
insert__prisma_migrations_one?: [{	/** the row to be inserted */
	object: ValueTypes["_prisma_migrations_insert_input"] | Variable<any, string>,	/** upsert condition */
	on_conflict?: ValueTypes["_prisma_migrations_on_conflict"] | undefined | null | Variable<any, string>},ValueTypes["_prisma_migrations"]],
update_Business?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Business_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Business_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["Business_bool_exp"] | Variable<any, string>},ValueTypes["Business_mutation_response"]],
update_BusinessProduct?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["BusinessProduct_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["BusinessProduct_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["BusinessProduct_bool_exp"] | Variable<any, string>},ValueTypes["BusinessProduct_mutation_response"]],
update_BusinessProduct_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["BusinessProduct_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["BusinessProduct_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["BusinessProduct_pk_columns_input"] | Variable<any, string>},ValueTypes["BusinessProduct"]],
update_BusinessProduct_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["BusinessProduct_updates"]> | Variable<any, string>},ValueTypes["BusinessProduct_mutation_response"]],
update_BusinessWorker?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["BusinessWorker_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["BusinessWorker_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["BusinessWorker_bool_exp"] | Variable<any, string>},ValueTypes["BusinessWorker_mutation_response"]],
update_BusinessWorker_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["BusinessWorker_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["BusinessWorker_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["BusinessWorker_pk_columns_input"] | Variable<any, string>},ValueTypes["BusinessWorker"]],
update_BusinessWorker_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["BusinessWorker_updates"]> | Variable<any, string>},ValueTypes["BusinessWorker_mutation_response"]],
update_Business_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Business_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Business_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["Business_pk_columns_input"] | Variable<any, string>},ValueTypes["Business"]],
update_Business_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["Business_updates"]> | Variable<any, string>},ValueTypes["Business_mutation_response"]],
update_Category?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Category_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Category_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["Category_bool_exp"] | Variable<any, string>},ValueTypes["Category_mutation_response"]],
update_Category_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Category_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Category_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["Category_pk_columns_input"] | Variable<any, string>},ValueTypes["Category"]],
update_Category_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["Category_updates"]> | Variable<any, string>},ValueTypes["Category_mutation_response"]],
update_Certificate?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Certificate_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Certificate_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["Certificate_bool_exp"] | Variable<any, string>},ValueTypes["Certificate_mutation_response"]],
update_CertificateCategory?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["CertificateCategory_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["CertificateCategory_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["CertificateCategory_bool_exp"] | Variable<any, string>},ValueTypes["CertificateCategory_mutation_response"]],
update_CertificateCategory_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["CertificateCategory_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["CertificateCategory_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["CertificateCategory_pk_columns_input"] | Variable<any, string>},ValueTypes["CertificateCategory"]],
update_CertificateCategory_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["CertificateCategory_updates"]> | Variable<any, string>},ValueTypes["CertificateCategory_mutation_response"]],
update_CertificateClaim?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["CertificateClaim_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["CertificateClaim_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["CertificateClaim_bool_exp"] | Variable<any, string>},ValueTypes["CertificateClaim_mutation_response"]],
update_CertificateClaim_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["CertificateClaim_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["CertificateClaim_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["CertificateClaim_pk_columns_input"] | Variable<any, string>},ValueTypes["CertificateClaim"]],
update_CertificateClaim_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["CertificateClaim_updates"]> | Variable<any, string>},ValueTypes["CertificateClaim_mutation_response"]],
update_Certificate_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Certificate_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Certificate_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["Certificate_pk_columns_input"] | Variable<any, string>},ValueTypes["Certificate"]],
update_Certificate_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["Certificate_updates"]> | Variable<any, string>},ValueTypes["Certificate_mutation_response"]],
update_Offer?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Offer_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Offer_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["Offer_bool_exp"] | Variable<any, string>},ValueTypes["Offer_mutation_response"]],
update_Offer_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Offer_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Offer_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["Offer_pk_columns_input"] | Variable<any, string>},ValueTypes["Offer"]],
update_Offer_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["Offer_updates"]> | Variable<any, string>},ValueTypes["Offer_mutation_response"]],
update_Order?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Order_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Order_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["Order_bool_exp"] | Variable<any, string>},ValueTypes["Order_mutation_response"]],
update_Order_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Order_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Order_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["Order_pk_columns_input"] | Variable<any, string>},ValueTypes["Order"]],
update_Order_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["Order_updates"]> | Variable<any, string>},ValueTypes["Order_mutation_response"]],
update_Product?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Product_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Product_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["Product_bool_exp"] | Variable<any, string>},ValueTypes["Product_mutation_response"]],
update_Product_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Product_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Product_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["Product_pk_columns_input"] | Variable<any, string>},ValueTypes["Product"]],
update_Product_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["Product_updates"]> | Variable<any, string>},ValueTypes["Product_mutation_response"]],
update_Profile?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Profile_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Profile_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["Profile_bool_exp"] | Variable<any, string>},ValueTypes["Profile_mutation_response"]],
update_Profile_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Profile_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Profile_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["Profile_pk_columns_input"] | Variable<any, string>},ValueTypes["Profile"]],
update_Profile_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["Profile_updates"]> | Variable<any, string>},ValueTypes["Profile_mutation_response"]],
update_Transaction?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Transaction_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Transaction_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["Transaction_bool_exp"] | Variable<any, string>},ValueTypes["Transaction_mutation_response"]],
update_TransactionReview?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["TransactionReview_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["TransactionReview_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["TransactionReview_bool_exp"] | Variable<any, string>},ValueTypes["TransactionReview_mutation_response"]],
update_TransactionReview_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["TransactionReview_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["TransactionReview_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["TransactionReview_pk_columns_input"] | Variable<any, string>},ValueTypes["TransactionReview"]],
update_TransactionReview_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["TransactionReview_updates"]> | Variable<any, string>},ValueTypes["TransactionReview_mutation_response"]],
update_Transaction_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["Transaction_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["Transaction_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["Transaction_pk_columns_input"] | Variable<any, string>},ValueTypes["Transaction"]],
update_Transaction_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["Transaction_updates"]> | Variable<any, string>},ValueTypes["Transaction_mutation_response"]],
update__prisma_migrations?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["_prisma_migrations_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["_prisma_migrations_set_input"] | undefined | null | Variable<any, string>,	/** filter the rows which have to be updated */
	where: ValueTypes["_prisma_migrations_bool_exp"] | Variable<any, string>},ValueTypes["_prisma_migrations_mutation_response"]],
update__prisma_migrations_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ValueTypes["_prisma_migrations_inc_input"] | undefined | null | Variable<any, string>,	/** sets the columns of the filtered rows to the given values */
	_set?: ValueTypes["_prisma_migrations_set_input"] | undefined | null | Variable<any, string>,	pk_columns: ValueTypes["_prisma_migrations_pk_columns_input"] | Variable<any, string>},ValueTypes["_prisma_migrations"]],
update__prisma_migrations_many?: [{	/** updates to execute, in order */
	updates: Array<ValueTypes["_prisma_migrations_updates"]> | Variable<any, string>},ValueTypes["_prisma_migrations_mutation_response"]],
		__typename?: boolean | `@${string}`
}>;
	/** column ordering options */
["order_by"]:order_by;
	["query_root"]: AliasType<{
Business?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Business_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Business_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Business_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Business"]],
BusinessProduct?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["BusinessProduct_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["BusinessProduct_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["BusinessProduct_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["BusinessProduct"]],
BusinessProduct_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["BusinessProduct_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["BusinessProduct_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["BusinessProduct_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["BusinessProduct_aggregate"]],
BusinessProduct_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["BusinessProduct"]],
BusinessWorker?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["BusinessWorker_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["BusinessWorker_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["BusinessWorker_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["BusinessWorker"]],
BusinessWorker_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["BusinessWorker_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["BusinessWorker_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["BusinessWorker_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["BusinessWorker_aggregate"]],
BusinessWorker_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["BusinessWorker"]],
Business_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Business_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Business_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Business_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Business_aggregate"]],
Business_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Business"]],
Category?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Category_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Category_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Category_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Category"]],
Category_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Category_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Category_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Category_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Category_aggregate"]],
Category_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Category"]],
Certificate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Certificate_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Certificate_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Certificate_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Certificate"]],
CertificateCategory?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["CertificateCategory_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["CertificateCategory_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["CertificateCategory_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["CertificateCategory"]],
CertificateCategory_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["CertificateCategory_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["CertificateCategory_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["CertificateCategory_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["CertificateCategory_aggregate"]],
CertificateCategory_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["CertificateCategory"]],
CertificateClaim?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["CertificateClaim_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["CertificateClaim_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["CertificateClaim_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["CertificateClaim"]],
CertificateClaim_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["CertificateClaim_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["CertificateClaim_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["CertificateClaim_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["CertificateClaim_aggregate"]],
CertificateClaim_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["CertificateClaim"]],
Certificate_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Certificate_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Certificate_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Certificate_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Certificate_aggregate"]],
Certificate_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Certificate"]],
Offer?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Offer_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Offer_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Offer"]],
Offer_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Offer_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Offer_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Offer_aggregate"]],
Offer_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Offer"]],
Order?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Order_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Order_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Order"]],
Order_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Order_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Order_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Order_aggregate"]],
Order_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Order"]],
Product?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Product_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Product_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Product_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Product"]],
Product_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Product_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Product_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Product_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Product_aggregate"]],
Product_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Product"]],
Profile?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Profile_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Profile_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Profile_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Profile"]],
Profile_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Profile_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Profile_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Profile_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Profile_aggregate"]],
Profile_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Profile"]],
Transaction?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Transaction_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Transaction_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Transaction_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Transaction"]],
TransactionReview?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["TransactionReview_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["TransactionReview_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["TransactionReview_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["TransactionReview"]],
TransactionReview_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["TransactionReview_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["TransactionReview_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["TransactionReview_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["TransactionReview_aggregate"]],
TransactionReview_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["TransactionReview"]],
Transaction_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Transaction_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Transaction_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Transaction_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Transaction_aggregate"]],
Transaction_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Transaction"]],
_prisma_migrations?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["_prisma_migrations_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["_prisma_migrations_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["_prisma_migrations_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["_prisma_migrations"]],
_prisma_migrations_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["_prisma_migrations_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["_prisma_migrations_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["_prisma_migrations_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["_prisma_migrations_aggregate"]],
_prisma_migrations_by_pk?: [{	id: string | Variable<any, string>},ValueTypes["_prisma_migrations"]],
		__typename?: boolean | `@${string}`
}>;
	["subscription_root"]: AliasType<{
Business?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Business_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Business_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Business_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Business"]],
BusinessProduct?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["BusinessProduct_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["BusinessProduct_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["BusinessProduct_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["BusinessProduct"]],
BusinessProduct_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["BusinessProduct_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["BusinessProduct_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["BusinessProduct_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["BusinessProduct_aggregate"]],
BusinessProduct_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["BusinessProduct"]],
BusinessProduct_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["BusinessProduct_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["BusinessProduct_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["BusinessProduct"]],
BusinessWorker?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["BusinessWorker_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["BusinessWorker_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["BusinessWorker_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["BusinessWorker"]],
BusinessWorker_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["BusinessWorker_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["BusinessWorker_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["BusinessWorker_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["BusinessWorker_aggregate"]],
BusinessWorker_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["BusinessWorker"]],
BusinessWorker_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["BusinessWorker_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["BusinessWorker_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["BusinessWorker"]],
Business_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Business_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Business_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Business_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Business_aggregate"]],
Business_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Business"]],
Business_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["Business_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Business_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Business"]],
Category?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Category_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Category_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Category_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Category"]],
Category_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Category_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Category_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Category_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Category_aggregate"]],
Category_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Category"]],
Category_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["Category_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Category_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Category"]],
Certificate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Certificate_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Certificate_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Certificate_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Certificate"]],
CertificateCategory?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["CertificateCategory_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["CertificateCategory_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["CertificateCategory_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["CertificateCategory"]],
CertificateCategory_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["CertificateCategory_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["CertificateCategory_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["CertificateCategory_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["CertificateCategory_aggregate"]],
CertificateCategory_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["CertificateCategory"]],
CertificateCategory_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["CertificateCategory_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["CertificateCategory_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["CertificateCategory"]],
CertificateClaim?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["CertificateClaim_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["CertificateClaim_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["CertificateClaim_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["CertificateClaim"]],
CertificateClaim_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["CertificateClaim_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["CertificateClaim_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["CertificateClaim_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["CertificateClaim_aggregate"]],
CertificateClaim_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["CertificateClaim"]],
CertificateClaim_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["CertificateClaim_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["CertificateClaim_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["CertificateClaim"]],
Certificate_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Certificate_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Certificate_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Certificate_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Certificate_aggregate"]],
Certificate_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Certificate"]],
Certificate_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["Certificate_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Certificate_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Certificate"]],
Offer?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Offer_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Offer_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Offer"]],
Offer_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Offer_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Offer_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Offer_aggregate"]],
Offer_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Offer"]],
Offer_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["Offer_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Offer_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Offer"]],
Order?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Order_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Order_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Order"]],
Order_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Order_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Order_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Order_aggregate"]],
Order_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Order"]],
Order_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["Order_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Order_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Order"]],
Product?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Product_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Product_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Product_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Product"]],
Product_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Product_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Product_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Product_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Product_aggregate"]],
Product_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Product"]],
Product_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["Product_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Product_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Product"]],
Profile?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Profile_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Profile_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Profile_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Profile"]],
Profile_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Profile_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Profile_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Profile_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Profile_aggregate"]],
Profile_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Profile"]],
Profile_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["Profile_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Profile_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Profile"]],
Transaction?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Transaction_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Transaction_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Transaction_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Transaction"]],
TransactionReview?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["TransactionReview_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["TransactionReview_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["TransactionReview_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["TransactionReview"]],
TransactionReview_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["TransactionReview_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["TransactionReview_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["TransactionReview_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["TransactionReview_aggregate"]],
TransactionReview_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["TransactionReview"]],
TransactionReview_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["TransactionReview_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["TransactionReview_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["TransactionReview"]],
Transaction_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["Transaction_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["Transaction_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Transaction_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Transaction_aggregate"]],
Transaction_by_pk?: [{	id: number | Variable<any, string>},ValueTypes["Transaction"]],
Transaction_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["Transaction_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["Transaction_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["Transaction"]],
_prisma_migrations?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["_prisma_migrations_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["_prisma_migrations_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["_prisma_migrations_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["_prisma_migrations"]],
_prisma_migrations_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ValueTypes["_prisma_migrations_select_column"]> | undefined | null | Variable<any, string>,	/** limit the number of rows returned */
	limit?: number | undefined | null | Variable<any, string>,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null | Variable<any, string>,	/** sort the rows by one or more columns */
	order_by?: Array<ValueTypes["_prisma_migrations_order_by"]> | undefined | null | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["_prisma_migrations_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["_prisma_migrations_aggregate"]],
_prisma_migrations_by_pk?: [{	id: string | Variable<any, string>},ValueTypes["_prisma_migrations"]],
_prisma_migrations_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number | Variable<any, string>,	/** cursor to stream the results returned by the query */
	cursor: Array<ValueTypes["_prisma_migrations_stream_cursor_input"] | undefined | null> | Variable<any, string>,	/** filter the rows returned */
	where?: ValueTypes["_prisma_migrations_bool_exp"] | undefined | null | Variable<any, string>},ValueTypes["_prisma_migrations"]],
		__typename?: boolean | `@${string}`
}>;
	["timestamp"]:unknown;
	/** Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'. */
["timestamp_comparison_exp"]: {
	_eq?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	_gt?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	_gte?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	_in?: Array<ValueTypes["timestamp"]> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_lt?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	_lte?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	_neq?: ValueTypes["timestamp"] | undefined | null | Variable<any, string>,
	_nin?: Array<ValueTypes["timestamp"]> | undefined | null | Variable<any, string>
};
	["timestamptz"]:unknown;
	/** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
["timestamptz_comparison_exp"]: {
	_eq?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	_gt?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	_gte?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	_in?: Array<ValueTypes["timestamptz"]> | undefined | null | Variable<any, string>,
	_is_null?: boolean | undefined | null | Variable<any, string>,
	_lt?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	_lte?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	_neq?: ValueTypes["timestamptz"] | undefined | null | Variable<any, string>,
	_nin?: Array<ValueTypes["timestamptz"]> | undefined | null | Variable<any, string>
}
  }

export type ResolverInputTypes = {
    ["schema"]: AliasType<{
	query?:ResolverInputTypes["query_root"],
	mutation?:ResolverInputTypes["mutation_root"],
	subscription?:ResolverInputTypes["subscription_root"],
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
["Boolean_comparison_exp"]: {
	_eq?: boolean | undefined | null,
	_gt?: boolean | undefined | null,
	_gte?: boolean | undefined | null,
	_in?: Array<boolean> | undefined | null,
	_is_null?: boolean | undefined | null,
	_lt?: boolean | undefined | null,
	_lte?: boolean | undefined | null,
	_neq?: boolean | undefined | null,
	_nin?: Array<boolean> | undefined | null
};
	/** columns and relationships of "Business" */
["Business"]: AliasType<{
BusinessProducts?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["BusinessProduct_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["BusinessProduct_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["BusinessProduct_bool_exp"] | undefined | null},ResolverInputTypes["BusinessProduct"]],
BusinessProducts_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["BusinessProduct_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["BusinessProduct_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["BusinessProduct_bool_exp"] | undefined | null},ResolverInputTypes["BusinessProduct_aggregate"]],
BusinessWorkers?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["BusinessWorker_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["BusinessWorker_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["BusinessWorker_bool_exp"] | undefined | null},ResolverInputTypes["BusinessWorker"]],
BusinessWorkers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["BusinessWorker_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["BusinessWorker_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["BusinessWorker_bool_exp"] | undefined | null},ResolverInputTypes["BusinessWorker_aggregate"]],
CertificateClaims?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["CertificateClaim_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["CertificateClaim_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["CertificateClaim_bool_exp"] | undefined | null},ResolverInputTypes["CertificateClaim"]],
CertificateClaims_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["CertificateClaim_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["CertificateClaim_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["CertificateClaim_bool_exp"] | undefined | null},ResolverInputTypes["CertificateClaim_aggregate"]],
Offers?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Offer_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Offer_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Offer_bool_exp"] | undefined | null},ResolverInputTypes["Offer"]],
Offers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Offer_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Offer_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Offer_bool_exp"] | undefined | null},ResolverInputTypes["Offer_aggregate"]],
Orders?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Order_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Order_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Order_bool_exp"] | undefined | null},ResolverInputTypes["Order"]],
Orders_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Order_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Order_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Order_bool_exp"] | undefined | null},ResolverInputTypes["Order_aggregate"]],
	address?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	phone?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "BusinessProduct" */
["BusinessProduct"]: AliasType<{
	/** An object relationship */
	Business?:ResolverInputTypes["Business"],
	/** An object relationship */
	Product?:ResolverInputTypes["Product"],
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "BusinessProduct" */
["BusinessProduct_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["BusinessProduct_aggregate_fields"],
	nodes?:ResolverInputTypes["BusinessProduct"],
		__typename?: boolean | `@${string}`
}>;
	["BusinessProduct_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["BusinessProduct_aggregate_bool_exp_count"] | undefined | null
};
	["BusinessProduct_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["BusinessProduct_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["BusinessProduct_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "BusinessProduct" */
["BusinessProduct_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["BusinessProduct_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["BusinessProduct_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["BusinessProduct_max_fields"],
	min?:ResolverInputTypes["BusinessProduct_min_fields"],
	stddev?:ResolverInputTypes["BusinessProduct_stddev_fields"],
	stddev_pop?:ResolverInputTypes["BusinessProduct_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["BusinessProduct_stddev_samp_fields"],
	sum?:ResolverInputTypes["BusinessProduct_sum_fields"],
	var_pop?:ResolverInputTypes["BusinessProduct_var_pop_fields"],
	var_samp?:ResolverInputTypes["BusinessProduct_var_samp_fields"],
	variance?:ResolverInputTypes["BusinessProduct_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "BusinessProduct" */
["BusinessProduct_aggregate_order_by"]: {
	avg?: ResolverInputTypes["BusinessProduct_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["BusinessProduct_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["BusinessProduct_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["BusinessProduct_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["BusinessProduct_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["BusinessProduct_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["BusinessProduct_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["BusinessProduct_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["BusinessProduct_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["BusinessProduct_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "BusinessProduct" */
["BusinessProduct_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["BusinessProduct_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["BusinessProduct_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["BusinessProduct_avg_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "BusinessProduct" */
["BusinessProduct_avg_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "BusinessProduct". All fields are combined with a logical 'AND'. */
["BusinessProduct_bool_exp"]: {
	Business?: ResolverInputTypes["Business_bool_exp"] | undefined | null,
	Product?: ResolverInputTypes["Product_bool_exp"] | undefined | null,
	_and?: Array<ResolverInputTypes["BusinessProduct_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["BusinessProduct_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["BusinessProduct_bool_exp"]> | undefined | null,
	business_id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	created_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	product_id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "BusinessProduct" */
["BusinessProduct_constraint"]:BusinessProduct_constraint;
	/** input type for incrementing numeric columns in table "BusinessProduct" */
["BusinessProduct_inc_input"]: {
	business_id?: number | undefined | null,
	id?: number | undefined | null,
	product_id?: number | undefined | null
};
	/** input type for inserting data into table "BusinessProduct" */
["BusinessProduct_insert_input"]: {
	Business?: ResolverInputTypes["Business_obj_rel_insert_input"] | undefined | null,
	Product?: ResolverInputTypes["Product_obj_rel_insert_input"] | undefined | null,
	business_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	product_id?: number | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate max on columns */
["BusinessProduct_max_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "BusinessProduct" */
["BusinessProduct_max_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["BusinessProduct_min_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "BusinessProduct" */
["BusinessProduct_min_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "BusinessProduct" */
["BusinessProduct_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["BusinessProduct"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "BusinessProduct" */
["BusinessProduct_on_conflict"]: {
	constraint: ResolverInputTypes["BusinessProduct_constraint"],
	update_columns: Array<ResolverInputTypes["BusinessProduct_update_column"]>,
	where?: ResolverInputTypes["BusinessProduct_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "BusinessProduct". */
["BusinessProduct_order_by"]: {
	Business?: ResolverInputTypes["Business_order_by"] | undefined | null,
	Product?: ResolverInputTypes["Product_order_by"] | undefined | null,
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: BusinessProduct */
["BusinessProduct_pk_columns_input"]: {
	id: number
};
	/** select columns of table "BusinessProduct" */
["BusinessProduct_select_column"]:BusinessProduct_select_column;
	/** input type for updating data in table "BusinessProduct" */
["BusinessProduct_set_input"]: {
	business_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	product_id?: number | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate stddev on columns */
["BusinessProduct_stddev_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "BusinessProduct" */
["BusinessProduct_stddev_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["BusinessProduct_stddev_pop_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "BusinessProduct" */
["BusinessProduct_stddev_pop_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["BusinessProduct_stddev_samp_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "BusinessProduct" */
["BusinessProduct_stddev_samp_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "BusinessProduct" */
["BusinessProduct_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["BusinessProduct_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["BusinessProduct_stream_cursor_value_input"]: {
	business_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	product_id?: number | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate sum on columns */
["BusinessProduct_sum_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "BusinessProduct" */
["BusinessProduct_sum_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "BusinessProduct" */
["BusinessProduct_update_column"]:BusinessProduct_update_column;
	["BusinessProduct_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["BusinessProduct_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["BusinessProduct_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["BusinessProduct_bool_exp"]
};
	/** aggregate var_pop on columns */
["BusinessProduct_var_pop_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "BusinessProduct" */
["BusinessProduct_var_pop_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["BusinessProduct_var_samp_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "BusinessProduct" */
["BusinessProduct_var_samp_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["BusinessProduct_variance_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "BusinessProduct" */
["BusinessProduct_variance_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** columns and relationships of "BusinessWorker" */
["BusinessWorker"]: AliasType<{
	/** An object relationship */
	Business?:ResolverInputTypes["Business"],
	/** An object relationship */
	Profile?:ResolverInputTypes["Profile"],
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	role?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "BusinessWorker" */
["BusinessWorker_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["BusinessWorker_aggregate_fields"],
	nodes?:ResolverInputTypes["BusinessWorker"],
		__typename?: boolean | `@${string}`
}>;
	["BusinessWorker_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["BusinessWorker_aggregate_bool_exp_count"] | undefined | null
};
	["BusinessWorker_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["BusinessWorker_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["BusinessWorker_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "BusinessWorker" */
["BusinessWorker_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["BusinessWorker_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["BusinessWorker_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["BusinessWorker_max_fields"],
	min?:ResolverInputTypes["BusinessWorker_min_fields"],
	stddev?:ResolverInputTypes["BusinessWorker_stddev_fields"],
	stddev_pop?:ResolverInputTypes["BusinessWorker_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["BusinessWorker_stddev_samp_fields"],
	sum?:ResolverInputTypes["BusinessWorker_sum_fields"],
	var_pop?:ResolverInputTypes["BusinessWorker_var_pop_fields"],
	var_samp?:ResolverInputTypes["BusinessWorker_var_samp_fields"],
	variance?:ResolverInputTypes["BusinessWorker_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "BusinessWorker" */
["BusinessWorker_aggregate_order_by"]: {
	avg?: ResolverInputTypes["BusinessWorker_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["BusinessWorker_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["BusinessWorker_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["BusinessWorker_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["BusinessWorker_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["BusinessWorker_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["BusinessWorker_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["BusinessWorker_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["BusinessWorker_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["BusinessWorker_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "BusinessWorker" */
["BusinessWorker_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["BusinessWorker_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["BusinessWorker_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["BusinessWorker_avg_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "BusinessWorker" */
["BusinessWorker_avg_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	profile_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "BusinessWorker". All fields are combined with a logical 'AND'. */
["BusinessWorker_bool_exp"]: {
	Business?: ResolverInputTypes["Business_bool_exp"] | undefined | null,
	Profile?: ResolverInputTypes["Profile_bool_exp"] | undefined | null,
	_and?: Array<ResolverInputTypes["BusinessWorker_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["BusinessWorker_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["BusinessWorker_bool_exp"]> | undefined | null,
	business_id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	created_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	profile_id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	role?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "BusinessWorker" */
["BusinessWorker_constraint"]:BusinessWorker_constraint;
	/** input type for incrementing numeric columns in table "BusinessWorker" */
["BusinessWorker_inc_input"]: {
	business_id?: number | undefined | null,
	id?: number | undefined | null,
	profile_id?: number | undefined | null
};
	/** input type for inserting data into table "BusinessWorker" */
["BusinessWorker_insert_input"]: {
	Business?: ResolverInputTypes["Business_obj_rel_insert_input"] | undefined | null,
	Profile?: ResolverInputTypes["Profile_obj_rel_insert_input"] | undefined | null,
	business_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	profile_id?: number | undefined | null,
	role?: string | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate max on columns */
["BusinessWorker_max_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	role?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "BusinessWorker" */
["BusinessWorker_max_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	profile_id?: ResolverInputTypes["order_by"] | undefined | null,
	role?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["BusinessWorker_min_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	role?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "BusinessWorker" */
["BusinessWorker_min_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	profile_id?: ResolverInputTypes["order_by"] | undefined | null,
	role?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "BusinessWorker" */
["BusinessWorker_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["BusinessWorker"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "BusinessWorker" */
["BusinessWorker_on_conflict"]: {
	constraint: ResolverInputTypes["BusinessWorker_constraint"],
	update_columns: Array<ResolverInputTypes["BusinessWorker_update_column"]>,
	where?: ResolverInputTypes["BusinessWorker_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "BusinessWorker". */
["BusinessWorker_order_by"]: {
	Business?: ResolverInputTypes["Business_order_by"] | undefined | null,
	Profile?: ResolverInputTypes["Profile_order_by"] | undefined | null,
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	profile_id?: ResolverInputTypes["order_by"] | undefined | null,
	role?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: BusinessWorker */
["BusinessWorker_pk_columns_input"]: {
	id: number
};
	/** select columns of table "BusinessWorker" */
["BusinessWorker_select_column"]:BusinessWorker_select_column;
	/** input type for updating data in table "BusinessWorker" */
["BusinessWorker_set_input"]: {
	business_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	profile_id?: number | undefined | null,
	role?: string | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate stddev on columns */
["BusinessWorker_stddev_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "BusinessWorker" */
["BusinessWorker_stddev_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	profile_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["BusinessWorker_stddev_pop_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "BusinessWorker" */
["BusinessWorker_stddev_pop_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	profile_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["BusinessWorker_stddev_samp_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "BusinessWorker" */
["BusinessWorker_stddev_samp_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	profile_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "BusinessWorker" */
["BusinessWorker_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["BusinessWorker_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["BusinessWorker_stream_cursor_value_input"]: {
	business_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	profile_id?: number | undefined | null,
	role?: string | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate sum on columns */
["BusinessWorker_sum_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "BusinessWorker" */
["BusinessWorker_sum_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	profile_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "BusinessWorker" */
["BusinessWorker_update_column"]:BusinessWorker_update_column;
	["BusinessWorker_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["BusinessWorker_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["BusinessWorker_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["BusinessWorker_bool_exp"]
};
	/** aggregate var_pop on columns */
["BusinessWorker_var_pop_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "BusinessWorker" */
["BusinessWorker_var_pop_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	profile_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["BusinessWorker_var_samp_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "BusinessWorker" */
["BusinessWorker_var_samp_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	profile_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["BusinessWorker_variance_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "BusinessWorker" */
["BusinessWorker_variance_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	profile_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregated selection of "Business" */
["Business_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["Business_aggregate_fields"],
	nodes?:ResolverInputTypes["Business"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "Business" */
["Business_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["Business_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["Business_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["Business_max_fields"],
	min?:ResolverInputTypes["Business_min_fields"],
	stddev?:ResolverInputTypes["Business_stddev_fields"],
	stddev_pop?:ResolverInputTypes["Business_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["Business_stddev_samp_fields"],
	sum?:ResolverInputTypes["Business_sum_fields"],
	var_pop?:ResolverInputTypes["Business_var_pop_fields"],
	var_samp?:ResolverInputTypes["Business_var_samp_fields"],
	variance?:ResolverInputTypes["Business_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["Business_avg_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "Business". All fields are combined with a logical 'AND'. */
["Business_bool_exp"]: {
	BusinessProducts?: ResolverInputTypes["BusinessProduct_bool_exp"] | undefined | null,
	BusinessProducts_aggregate?: ResolverInputTypes["BusinessProduct_aggregate_bool_exp"] | undefined | null,
	BusinessWorkers?: ResolverInputTypes["BusinessWorker_bool_exp"] | undefined | null,
	BusinessWorkers_aggregate?: ResolverInputTypes["BusinessWorker_aggregate_bool_exp"] | undefined | null,
	CertificateClaims?: ResolverInputTypes["CertificateClaim_bool_exp"] | undefined | null,
	CertificateClaims_aggregate?: ResolverInputTypes["CertificateClaim_aggregate_bool_exp"] | undefined | null,
	Offers?: ResolverInputTypes["Offer_bool_exp"] | undefined | null,
	Offers_aggregate?: ResolverInputTypes["Offer_aggregate_bool_exp"] | undefined | null,
	Orders?: ResolverInputTypes["Order_bool_exp"] | undefined | null,
	Orders_aggregate?: ResolverInputTypes["Order_aggregate_bool_exp"] | undefined | null,
	_and?: Array<ResolverInputTypes["Business_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["Business_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["Business_bool_exp"]> | undefined | null,
	address?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	created_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	name?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	phone?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "Business" */
["Business_constraint"]:Business_constraint;
	/** input type for incrementing numeric columns in table "Business" */
["Business_inc_input"]: {
	id?: number | undefined | null
};
	/** input type for inserting data into table "Business" */
["Business_insert_input"]: {
	BusinessProducts?: ResolverInputTypes["BusinessProduct_arr_rel_insert_input"] | undefined | null,
	BusinessWorkers?: ResolverInputTypes["BusinessWorker_arr_rel_insert_input"] | undefined | null,
	CertificateClaims?: ResolverInputTypes["CertificateClaim_arr_rel_insert_input"] | undefined | null,
	Offers?: ResolverInputTypes["Offer_arr_rel_insert_input"] | undefined | null,
	Orders?: ResolverInputTypes["Order_arr_rel_insert_input"] | undefined | null,
	address?: string | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	name?: string | undefined | null,
	phone?: string | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate max on columns */
["Business_max_fields"]: AliasType<{
	address?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	phone?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["Business_min_fields"]: AliasType<{
	address?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	phone?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "Business" */
["Business_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["Business"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "Business" */
["Business_obj_rel_insert_input"]: {
	data: ResolverInputTypes["Business_insert_input"],
	/** upsert condition */
	on_conflict?: ResolverInputTypes["Business_on_conflict"] | undefined | null
};
	/** on_conflict condition type for table "Business" */
["Business_on_conflict"]: {
	constraint: ResolverInputTypes["Business_constraint"],
	update_columns: Array<ResolverInputTypes["Business_update_column"]>,
	where?: ResolverInputTypes["Business_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "Business". */
["Business_order_by"]: {
	BusinessProducts_aggregate?: ResolverInputTypes["BusinessProduct_aggregate_order_by"] | undefined | null,
	BusinessWorkers_aggregate?: ResolverInputTypes["BusinessWorker_aggregate_order_by"] | undefined | null,
	CertificateClaims_aggregate?: ResolverInputTypes["CertificateClaim_aggregate_order_by"] | undefined | null,
	Offers_aggregate?: ResolverInputTypes["Offer_aggregate_order_by"] | undefined | null,
	Orders_aggregate?: ResolverInputTypes["Order_aggregate_order_by"] | undefined | null,
	address?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	phone?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: Business */
["Business_pk_columns_input"]: {
	id: number
};
	/** select columns of table "Business" */
["Business_select_column"]:Business_select_column;
	/** input type for updating data in table "Business" */
["Business_set_input"]: {
	address?: string | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	name?: string | undefined | null,
	phone?: string | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate stddev on columns */
["Business_stddev_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["Business_stddev_pop_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["Business_stddev_samp_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "Business" */
["Business_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["Business_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["Business_stream_cursor_value_input"]: {
	address?: string | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	name?: string | undefined | null,
	phone?: string | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate sum on columns */
["Business_sum_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** update columns of table "Business" */
["Business_update_column"]:Business_update_column;
	["Business_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Business_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Business_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["Business_bool_exp"]
};
	/** aggregate var_pop on columns */
["Business_var_pop_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["Business_var_samp_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["Business_variance_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "Category" */
["Category"]: AliasType<{
Categories?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Category_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Category_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Category_bool_exp"] | undefined | null},ResolverInputTypes["Category"]],
Categories_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Category_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Category_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Category_bool_exp"] | undefined | null},ResolverInputTypes["Category_aggregate"]],
	/** An object relationship */
	Category?:ResolverInputTypes["Category"],
Products?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Product_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Product_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Product_bool_exp"] | undefined | null},ResolverInputTypes["Product"]],
Products_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Product_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Product_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Product_bool_exp"] | undefined | null},ResolverInputTypes["Product_aggregate"]],
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	parent_id?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "Category" */
["Category_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["Category_aggregate_fields"],
	nodes?:ResolverInputTypes["Category"],
		__typename?: boolean | `@${string}`
}>;
	["Category_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["Category_aggregate_bool_exp_count"] | undefined | null
};
	["Category_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["Category_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Category_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "Category" */
["Category_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["Category_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["Category_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["Category_max_fields"],
	min?:ResolverInputTypes["Category_min_fields"],
	stddev?:ResolverInputTypes["Category_stddev_fields"],
	stddev_pop?:ResolverInputTypes["Category_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["Category_stddev_samp_fields"],
	sum?:ResolverInputTypes["Category_sum_fields"],
	var_pop?:ResolverInputTypes["Category_var_pop_fields"],
	var_samp?:ResolverInputTypes["Category_var_samp_fields"],
	variance?:ResolverInputTypes["Category_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "Category" */
["Category_aggregate_order_by"]: {
	avg?: ResolverInputTypes["Category_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["Category_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["Category_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["Category_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["Category_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["Category_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["Category_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["Category_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["Category_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["Category_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "Category" */
["Category_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["Category_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["Category_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["Category_avg_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	parent_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "Category" */
["Category_avg_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	parent_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "Category". All fields are combined with a logical 'AND'. */
["Category_bool_exp"]: {
	Categories?: ResolverInputTypes["Category_bool_exp"] | undefined | null,
	Categories_aggregate?: ResolverInputTypes["Category_aggregate_bool_exp"] | undefined | null,
	Category?: ResolverInputTypes["Category_bool_exp"] | undefined | null,
	Products?: ResolverInputTypes["Product_bool_exp"] | undefined | null,
	Products_aggregate?: ResolverInputTypes["Product_aggregate_bool_exp"] | undefined | null,
	_and?: Array<ResolverInputTypes["Category_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["Category_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["Category_bool_exp"]> | undefined | null,
	created_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	name?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	parent_id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "Category" */
["Category_constraint"]:Category_constraint;
	/** input type for incrementing numeric columns in table "Category" */
["Category_inc_input"]: {
	id?: number | undefined | null,
	parent_id?: number | undefined | null
};
	/** input type for inserting data into table "Category" */
["Category_insert_input"]: {
	Categories?: ResolverInputTypes["Category_arr_rel_insert_input"] | undefined | null,
	Category?: ResolverInputTypes["Category_obj_rel_insert_input"] | undefined | null,
	Products?: ResolverInputTypes["Product_arr_rel_insert_input"] | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	name?: string | undefined | null,
	parent_id?: number | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate max on columns */
["Category_max_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	parent_id?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "Category" */
["Category_max_order_by"]: {
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	parent_id?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["Category_min_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	parent_id?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "Category" */
["Category_min_order_by"]: {
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	parent_id?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "Category" */
["Category_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["Category"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "Category" */
["Category_obj_rel_insert_input"]: {
	data: ResolverInputTypes["Category_insert_input"],
	/** upsert condition */
	on_conflict?: ResolverInputTypes["Category_on_conflict"] | undefined | null
};
	/** on_conflict condition type for table "Category" */
["Category_on_conflict"]: {
	constraint: ResolverInputTypes["Category_constraint"],
	update_columns: Array<ResolverInputTypes["Category_update_column"]>,
	where?: ResolverInputTypes["Category_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "Category". */
["Category_order_by"]: {
	Categories_aggregate?: ResolverInputTypes["Category_aggregate_order_by"] | undefined | null,
	Category?: ResolverInputTypes["Category_order_by"] | undefined | null,
	Products_aggregate?: ResolverInputTypes["Product_aggregate_order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	parent_id?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: Category */
["Category_pk_columns_input"]: {
	id: number
};
	/** select columns of table "Category" */
["Category_select_column"]:Category_select_column;
	/** input type for updating data in table "Category" */
["Category_set_input"]: {
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	name?: string | undefined | null,
	parent_id?: number | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate stddev on columns */
["Category_stddev_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	parent_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "Category" */
["Category_stddev_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	parent_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["Category_stddev_pop_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	parent_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "Category" */
["Category_stddev_pop_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	parent_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["Category_stddev_samp_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	parent_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "Category" */
["Category_stddev_samp_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	parent_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "Category" */
["Category_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["Category_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["Category_stream_cursor_value_input"]: {
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	name?: string | undefined | null,
	parent_id?: number | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate sum on columns */
["Category_sum_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	parent_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "Category" */
["Category_sum_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	parent_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "Category" */
["Category_update_column"]:Category_update_column;
	["Category_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Category_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Category_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["Category_bool_exp"]
};
	/** aggregate var_pop on columns */
["Category_var_pop_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	parent_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "Category" */
["Category_var_pop_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	parent_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["Category_var_samp_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	parent_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "Category" */
["Category_var_samp_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	parent_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["Category_variance_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	parent_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "Category" */
["Category_variance_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	parent_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** columns and relationships of "Certificate" */
["Certificate"]: AliasType<{
	/** An object relationship */
	CertificateCategory?:ResolverInputTypes["CertificateCategory"],
CertificateClaims?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["CertificateClaim_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["CertificateClaim_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["CertificateClaim_bool_exp"] | undefined | null},ResolverInputTypes["CertificateClaim"]],
CertificateClaims_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["CertificateClaim_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["CertificateClaim_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["CertificateClaim_bool_exp"] | undefined | null},ResolverInputTypes["CertificateClaim_aggregate"]],
	certificateCategory_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	icon_url?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	image_url?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "CertificateCategory" */
["CertificateCategory"]: AliasType<{
Certificates?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Certificate_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Certificate_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Certificate_bool_exp"] | undefined | null},ResolverInputTypes["Certificate"]],
Certificates_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Certificate_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Certificate_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Certificate_bool_exp"] | undefined | null},ResolverInputTypes["Certificate_aggregate"]],
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "CertificateCategory" */
["CertificateCategory_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["CertificateCategory_aggregate_fields"],
	nodes?:ResolverInputTypes["CertificateCategory"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "CertificateCategory" */
["CertificateCategory_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["CertificateCategory_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["CertificateCategory_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["CertificateCategory_max_fields"],
	min?:ResolverInputTypes["CertificateCategory_min_fields"],
	stddev?:ResolverInputTypes["CertificateCategory_stddev_fields"],
	stddev_pop?:ResolverInputTypes["CertificateCategory_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["CertificateCategory_stddev_samp_fields"],
	sum?:ResolverInputTypes["CertificateCategory_sum_fields"],
	var_pop?:ResolverInputTypes["CertificateCategory_var_pop_fields"],
	var_samp?:ResolverInputTypes["CertificateCategory_var_samp_fields"],
	variance?:ResolverInputTypes["CertificateCategory_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["CertificateCategory_avg_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "CertificateCategory". All fields are combined with a logical 'AND'. */
["CertificateCategory_bool_exp"]: {
	Certificates?: ResolverInputTypes["Certificate_bool_exp"] | undefined | null,
	Certificates_aggregate?: ResolverInputTypes["Certificate_aggregate_bool_exp"] | undefined | null,
	_and?: Array<ResolverInputTypes["CertificateCategory_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["CertificateCategory_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["CertificateCategory_bool_exp"]> | undefined | null,
	created_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	name?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "CertificateCategory" */
["CertificateCategory_constraint"]:CertificateCategory_constraint;
	/** input type for incrementing numeric columns in table "CertificateCategory" */
["CertificateCategory_inc_input"]: {
	id?: number | undefined | null
};
	/** input type for inserting data into table "CertificateCategory" */
["CertificateCategory_insert_input"]: {
	Certificates?: ResolverInputTypes["Certificate_arr_rel_insert_input"] | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	name?: string | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate max on columns */
["CertificateCategory_max_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["CertificateCategory_min_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "CertificateCategory" */
["CertificateCategory_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["CertificateCategory"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "CertificateCategory" */
["CertificateCategory_obj_rel_insert_input"]: {
	data: ResolverInputTypes["CertificateCategory_insert_input"],
	/** upsert condition */
	on_conflict?: ResolverInputTypes["CertificateCategory_on_conflict"] | undefined | null
};
	/** on_conflict condition type for table "CertificateCategory" */
["CertificateCategory_on_conflict"]: {
	constraint: ResolverInputTypes["CertificateCategory_constraint"],
	update_columns: Array<ResolverInputTypes["CertificateCategory_update_column"]>,
	where?: ResolverInputTypes["CertificateCategory_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "CertificateCategory". */
["CertificateCategory_order_by"]: {
	Certificates_aggregate?: ResolverInputTypes["Certificate_aggregate_order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: CertificateCategory */
["CertificateCategory_pk_columns_input"]: {
	id: number
};
	/** select columns of table "CertificateCategory" */
["CertificateCategory_select_column"]:CertificateCategory_select_column;
	/** input type for updating data in table "CertificateCategory" */
["CertificateCategory_set_input"]: {
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	name?: string | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate stddev on columns */
["CertificateCategory_stddev_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["CertificateCategory_stddev_pop_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["CertificateCategory_stddev_samp_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "CertificateCategory" */
["CertificateCategory_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["CertificateCategory_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["CertificateCategory_stream_cursor_value_input"]: {
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	name?: string | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate sum on columns */
["CertificateCategory_sum_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** update columns of table "CertificateCategory" */
["CertificateCategory_update_column"]:CertificateCategory_update_column;
	["CertificateCategory_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["CertificateCategory_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["CertificateCategory_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["CertificateCategory_bool_exp"]
};
	/** aggregate var_pop on columns */
["CertificateCategory_var_pop_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["CertificateCategory_var_samp_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["CertificateCategory_variance_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "CertificateClaim" */
["CertificateClaim"]: AliasType<{
	/** An object relationship */
	Business?:ResolverInputTypes["Business"],
	/** An object relationship */
	Certificate?:ResolverInputTypes["Certificate"],
	business_id?:boolean | `@${string}`,
	certificate_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	status?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	["CertificateClaimStatus"]:unknown;
	/** Boolean expression to compare columns of type "CertificateClaimStatus". All fields are combined with logical 'AND'. */
["CertificateClaimStatus_comparison_exp"]: {
	_eq?: ResolverInputTypes["CertificateClaimStatus"] | undefined | null,
	_gt?: ResolverInputTypes["CertificateClaimStatus"] | undefined | null,
	_gte?: ResolverInputTypes["CertificateClaimStatus"] | undefined | null,
	_in?: Array<ResolverInputTypes["CertificateClaimStatus"]> | undefined | null,
	_is_null?: boolean | undefined | null,
	_lt?: ResolverInputTypes["CertificateClaimStatus"] | undefined | null,
	_lte?: ResolverInputTypes["CertificateClaimStatus"] | undefined | null,
	_neq?: ResolverInputTypes["CertificateClaimStatus"] | undefined | null,
	_nin?: Array<ResolverInputTypes["CertificateClaimStatus"]> | undefined | null
};
	/** aggregated selection of "CertificateClaim" */
["CertificateClaim_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["CertificateClaim_aggregate_fields"],
	nodes?:ResolverInputTypes["CertificateClaim"],
		__typename?: boolean | `@${string}`
}>;
	["CertificateClaim_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["CertificateClaim_aggregate_bool_exp_count"] | undefined | null
};
	["CertificateClaim_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["CertificateClaim_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["CertificateClaim_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "CertificateClaim" */
["CertificateClaim_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["CertificateClaim_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["CertificateClaim_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["CertificateClaim_max_fields"],
	min?:ResolverInputTypes["CertificateClaim_min_fields"],
	stddev?:ResolverInputTypes["CertificateClaim_stddev_fields"],
	stddev_pop?:ResolverInputTypes["CertificateClaim_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["CertificateClaim_stddev_samp_fields"],
	sum?:ResolverInputTypes["CertificateClaim_sum_fields"],
	var_pop?:ResolverInputTypes["CertificateClaim_var_pop_fields"],
	var_samp?:ResolverInputTypes["CertificateClaim_var_samp_fields"],
	variance?:ResolverInputTypes["CertificateClaim_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "CertificateClaim" */
["CertificateClaim_aggregate_order_by"]: {
	avg?: ResolverInputTypes["CertificateClaim_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["CertificateClaim_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["CertificateClaim_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["CertificateClaim_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["CertificateClaim_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["CertificateClaim_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["CertificateClaim_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["CertificateClaim_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["CertificateClaim_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["CertificateClaim_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "CertificateClaim" */
["CertificateClaim_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["CertificateClaim_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["CertificateClaim_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["CertificateClaim_avg_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	certificate_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "CertificateClaim" */
["CertificateClaim_avg_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	certificate_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "CertificateClaim". All fields are combined with a logical 'AND'. */
["CertificateClaim_bool_exp"]: {
	Business?: ResolverInputTypes["Business_bool_exp"] | undefined | null,
	Certificate?: ResolverInputTypes["Certificate_bool_exp"] | undefined | null,
	_and?: Array<ResolverInputTypes["CertificateClaim_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["CertificateClaim_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["CertificateClaim_bool_exp"]> | undefined | null,
	business_id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	certificate_id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	created_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	status?: ResolverInputTypes["CertificateClaimStatus_comparison_exp"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "CertificateClaim" */
["CertificateClaim_constraint"]:CertificateClaim_constraint;
	/** input type for incrementing numeric columns in table "CertificateClaim" */
["CertificateClaim_inc_input"]: {
	business_id?: number | undefined | null,
	certificate_id?: number | undefined | null,
	id?: number | undefined | null
};
	/** input type for inserting data into table "CertificateClaim" */
["CertificateClaim_insert_input"]: {
	Business?: ResolverInputTypes["Business_obj_rel_insert_input"] | undefined | null,
	Certificate?: ResolverInputTypes["Certificate_obj_rel_insert_input"] | undefined | null,
	business_id?: number | undefined | null,
	certificate_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	status?: ResolverInputTypes["CertificateClaimStatus"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate max on columns */
["CertificateClaim_max_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	certificate_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	status?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "CertificateClaim" */
["CertificateClaim_max_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	certificate_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	status?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["CertificateClaim_min_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	certificate_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	status?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "CertificateClaim" */
["CertificateClaim_min_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	certificate_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	status?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "CertificateClaim" */
["CertificateClaim_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["CertificateClaim"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "CertificateClaim" */
["CertificateClaim_on_conflict"]: {
	constraint: ResolverInputTypes["CertificateClaim_constraint"],
	update_columns: Array<ResolverInputTypes["CertificateClaim_update_column"]>,
	where?: ResolverInputTypes["CertificateClaim_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "CertificateClaim". */
["CertificateClaim_order_by"]: {
	Business?: ResolverInputTypes["Business_order_by"] | undefined | null,
	Certificate?: ResolverInputTypes["Certificate_order_by"] | undefined | null,
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	certificate_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	status?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: CertificateClaim */
["CertificateClaim_pk_columns_input"]: {
	id: number
};
	/** select columns of table "CertificateClaim" */
["CertificateClaim_select_column"]:CertificateClaim_select_column;
	/** input type for updating data in table "CertificateClaim" */
["CertificateClaim_set_input"]: {
	business_id?: number | undefined | null,
	certificate_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	status?: ResolverInputTypes["CertificateClaimStatus"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate stddev on columns */
["CertificateClaim_stddev_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	certificate_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "CertificateClaim" */
["CertificateClaim_stddev_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	certificate_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["CertificateClaim_stddev_pop_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	certificate_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "CertificateClaim" */
["CertificateClaim_stddev_pop_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	certificate_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["CertificateClaim_stddev_samp_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	certificate_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "CertificateClaim" */
["CertificateClaim_stddev_samp_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	certificate_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "CertificateClaim" */
["CertificateClaim_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["CertificateClaim_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["CertificateClaim_stream_cursor_value_input"]: {
	business_id?: number | undefined | null,
	certificate_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	status?: ResolverInputTypes["CertificateClaimStatus"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate sum on columns */
["CertificateClaim_sum_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	certificate_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "CertificateClaim" */
["CertificateClaim_sum_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	certificate_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "CertificateClaim" */
["CertificateClaim_update_column"]:CertificateClaim_update_column;
	["CertificateClaim_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["CertificateClaim_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["CertificateClaim_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["CertificateClaim_bool_exp"]
};
	/** aggregate var_pop on columns */
["CertificateClaim_var_pop_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	certificate_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "CertificateClaim" */
["CertificateClaim_var_pop_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	certificate_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["CertificateClaim_var_samp_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	certificate_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "CertificateClaim" */
["CertificateClaim_var_samp_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	certificate_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["CertificateClaim_variance_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	certificate_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "CertificateClaim" */
["CertificateClaim_variance_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	certificate_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregated selection of "Certificate" */
["Certificate_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["Certificate_aggregate_fields"],
	nodes?:ResolverInputTypes["Certificate"],
		__typename?: boolean | `@${string}`
}>;
	["Certificate_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["Certificate_aggregate_bool_exp_count"] | undefined | null
};
	["Certificate_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["Certificate_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Certificate_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "Certificate" */
["Certificate_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["Certificate_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["Certificate_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["Certificate_max_fields"],
	min?:ResolverInputTypes["Certificate_min_fields"],
	stddev?:ResolverInputTypes["Certificate_stddev_fields"],
	stddev_pop?:ResolverInputTypes["Certificate_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["Certificate_stddev_samp_fields"],
	sum?:ResolverInputTypes["Certificate_sum_fields"],
	var_pop?:ResolverInputTypes["Certificate_var_pop_fields"],
	var_samp?:ResolverInputTypes["Certificate_var_samp_fields"],
	variance?:ResolverInputTypes["Certificate_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "Certificate" */
["Certificate_aggregate_order_by"]: {
	avg?: ResolverInputTypes["Certificate_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["Certificate_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["Certificate_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["Certificate_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["Certificate_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["Certificate_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["Certificate_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["Certificate_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["Certificate_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["Certificate_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "Certificate" */
["Certificate_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["Certificate_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["Certificate_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["Certificate_avg_fields"]: AliasType<{
	certificateCategory_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "Certificate" */
["Certificate_avg_order_by"]: {
	certificateCategory_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "Certificate". All fields are combined with a logical 'AND'. */
["Certificate_bool_exp"]: {
	CertificateCategory?: ResolverInputTypes["CertificateCategory_bool_exp"] | undefined | null,
	CertificateClaims?: ResolverInputTypes["CertificateClaim_bool_exp"] | undefined | null,
	CertificateClaims_aggregate?: ResolverInputTypes["CertificateClaim_aggregate_bool_exp"] | undefined | null,
	_and?: Array<ResolverInputTypes["Certificate_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["Certificate_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["Certificate_bool_exp"]> | undefined | null,
	certificateCategory_id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	created_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null,
	icon_url?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	image_url?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	name?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "Certificate" */
["Certificate_constraint"]:Certificate_constraint;
	/** input type for incrementing numeric columns in table "Certificate" */
["Certificate_inc_input"]: {
	certificateCategory_id?: number | undefined | null,
	id?: number | undefined | null
};
	/** input type for inserting data into table "Certificate" */
["Certificate_insert_input"]: {
	CertificateCategory?: ResolverInputTypes["CertificateCategory_obj_rel_insert_input"] | undefined | null,
	CertificateClaims?: ResolverInputTypes["CertificateClaim_arr_rel_insert_input"] | undefined | null,
	certificateCategory_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	icon_url?: string | undefined | null,
	id?: number | undefined | null,
	image_url?: string | undefined | null,
	name?: string | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate max on columns */
["Certificate_max_fields"]: AliasType<{
	certificateCategory_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	icon_url?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	image_url?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "Certificate" */
["Certificate_max_order_by"]: {
	certificateCategory_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	icon_url?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	image_url?: ResolverInputTypes["order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["Certificate_min_fields"]: AliasType<{
	certificateCategory_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	icon_url?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	image_url?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "Certificate" */
["Certificate_min_order_by"]: {
	certificateCategory_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	icon_url?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	image_url?: ResolverInputTypes["order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "Certificate" */
["Certificate_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["Certificate"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "Certificate" */
["Certificate_obj_rel_insert_input"]: {
	data: ResolverInputTypes["Certificate_insert_input"],
	/** upsert condition */
	on_conflict?: ResolverInputTypes["Certificate_on_conflict"] | undefined | null
};
	/** on_conflict condition type for table "Certificate" */
["Certificate_on_conflict"]: {
	constraint: ResolverInputTypes["Certificate_constraint"],
	update_columns: Array<ResolverInputTypes["Certificate_update_column"]>,
	where?: ResolverInputTypes["Certificate_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "Certificate". */
["Certificate_order_by"]: {
	CertificateCategory?: ResolverInputTypes["CertificateCategory_order_by"] | undefined | null,
	CertificateClaims_aggregate?: ResolverInputTypes["CertificateClaim_aggregate_order_by"] | undefined | null,
	certificateCategory_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	icon_url?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	image_url?: ResolverInputTypes["order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: Certificate */
["Certificate_pk_columns_input"]: {
	id: number
};
	/** select columns of table "Certificate" */
["Certificate_select_column"]:Certificate_select_column;
	/** input type for updating data in table "Certificate" */
["Certificate_set_input"]: {
	certificateCategory_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	icon_url?: string | undefined | null,
	id?: number | undefined | null,
	image_url?: string | undefined | null,
	name?: string | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate stddev on columns */
["Certificate_stddev_fields"]: AliasType<{
	certificateCategory_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "Certificate" */
["Certificate_stddev_order_by"]: {
	certificateCategory_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["Certificate_stddev_pop_fields"]: AliasType<{
	certificateCategory_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "Certificate" */
["Certificate_stddev_pop_order_by"]: {
	certificateCategory_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["Certificate_stddev_samp_fields"]: AliasType<{
	certificateCategory_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "Certificate" */
["Certificate_stddev_samp_order_by"]: {
	certificateCategory_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "Certificate" */
["Certificate_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["Certificate_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["Certificate_stream_cursor_value_input"]: {
	certificateCategory_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	icon_url?: string | undefined | null,
	id?: number | undefined | null,
	image_url?: string | undefined | null,
	name?: string | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate sum on columns */
["Certificate_sum_fields"]: AliasType<{
	certificateCategory_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "Certificate" */
["Certificate_sum_order_by"]: {
	certificateCategory_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "Certificate" */
["Certificate_update_column"]:Certificate_update_column;
	["Certificate_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Certificate_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Certificate_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["Certificate_bool_exp"]
};
	/** aggregate var_pop on columns */
["Certificate_var_pop_fields"]: AliasType<{
	certificateCategory_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "Certificate" */
["Certificate_var_pop_order_by"]: {
	certificateCategory_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["Certificate_var_samp_fields"]: AliasType<{
	certificateCategory_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "Certificate" */
["Certificate_var_samp_order_by"]: {
	certificateCategory_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["Certificate_variance_fields"]: AliasType<{
	certificateCategory_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "Certificate" */
["Certificate_variance_order_by"]: {
	certificateCategory_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
["Int_comparison_exp"]: {
	_eq?: number | undefined | null,
	_gt?: number | undefined | null,
	_gte?: number | undefined | null,
	_in?: Array<number> | undefined | null,
	_is_null?: boolean | undefined | null,
	_lt?: number | undefined | null,
	_lte?: number | undefined | null,
	_neq?: number | undefined | null,
	_nin?: Array<number> | undefined | null
};
	/** columns and relationships of "Offer" */
["Offer"]: AliasType<{
	/** An object relationship */
	Business?:ResolverInputTypes["Business"],
	/** An object relationship */
	Product?:ResolverInputTypes["Product"],
	active?:boolean | `@${string}`,
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	end_date?:boolean | `@${string}`,
	harvest_date?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	packaging?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	["OfferType"]:unknown;
	/** Boolean expression to compare columns of type "OfferType". All fields are combined with logical 'AND'. */
["OfferType_comparison_exp"]: {
	_eq?: ResolverInputTypes["OfferType"] | undefined | null,
	_gt?: ResolverInputTypes["OfferType"] | undefined | null,
	_gte?: ResolverInputTypes["OfferType"] | undefined | null,
	_in?: Array<ResolverInputTypes["OfferType"]> | undefined | null,
	_is_null?: boolean | undefined | null,
	_lt?: ResolverInputTypes["OfferType"] | undefined | null,
	_lte?: ResolverInputTypes["OfferType"] | undefined | null,
	_neq?: ResolverInputTypes["OfferType"] | undefined | null,
	_nin?: Array<ResolverInputTypes["OfferType"]> | undefined | null
};
	/** aggregated selection of "Offer" */
["Offer_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["Offer_aggregate_fields"],
	nodes?:ResolverInputTypes["Offer"],
		__typename?: boolean | `@${string}`
}>;
	["Offer_aggregate_bool_exp"]: {
	avg?: ResolverInputTypes["Offer_aggregate_bool_exp_avg"] | undefined | null,
	bool_and?: ResolverInputTypes["Offer_aggregate_bool_exp_bool_and"] | undefined | null,
	bool_or?: ResolverInputTypes["Offer_aggregate_bool_exp_bool_or"] | undefined | null,
	corr?: ResolverInputTypes["Offer_aggregate_bool_exp_corr"] | undefined | null,
	count?: ResolverInputTypes["Offer_aggregate_bool_exp_count"] | undefined | null,
	covar_samp?: ResolverInputTypes["Offer_aggregate_bool_exp_covar_samp"] | undefined | null,
	max?: ResolverInputTypes["Offer_aggregate_bool_exp_max"] | undefined | null,
	min?: ResolverInputTypes["Offer_aggregate_bool_exp_min"] | undefined | null,
	stddev_samp?: ResolverInputTypes["Offer_aggregate_bool_exp_stddev_samp"] | undefined | null,
	sum?: ResolverInputTypes["Offer_aggregate_bool_exp_sum"] | undefined | null,
	var_samp?: ResolverInputTypes["Offer_aggregate_bool_exp_var_samp"] | undefined | null
};
	["Offer_aggregate_bool_exp_avg"]: {
	arguments: ResolverInputTypes["Offer_select_column_Offer_aggregate_bool_exp_avg_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Offer_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["float8_comparison_exp"]
};
	["Offer_aggregate_bool_exp_bool_and"]: {
	arguments: ResolverInputTypes["Offer_select_column_Offer_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Offer_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Boolean_comparison_exp"]
};
	["Offer_aggregate_bool_exp_bool_or"]: {
	arguments: ResolverInputTypes["Offer_select_column_Offer_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Offer_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Boolean_comparison_exp"]
};
	["Offer_aggregate_bool_exp_corr"]: {
	arguments: ResolverInputTypes["Offer_aggregate_bool_exp_corr_arguments"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Offer_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["float8_comparison_exp"]
};
	["Offer_aggregate_bool_exp_corr_arguments"]: {
	X: ResolverInputTypes["Offer_select_column_Offer_aggregate_bool_exp_corr_arguments_columns"],
	Y: ResolverInputTypes["Offer_select_column_Offer_aggregate_bool_exp_corr_arguments_columns"]
};
	["Offer_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["Offer_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Offer_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	["Offer_aggregate_bool_exp_covar_samp"]: {
	arguments: ResolverInputTypes["Offer_aggregate_bool_exp_covar_samp_arguments"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Offer_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["float8_comparison_exp"]
};
	["Offer_aggregate_bool_exp_covar_samp_arguments"]: {
	X: ResolverInputTypes["Offer_select_column_Offer_aggregate_bool_exp_covar_samp_arguments_columns"],
	Y: ResolverInputTypes["Offer_select_column_Offer_aggregate_bool_exp_covar_samp_arguments_columns"]
};
	["Offer_aggregate_bool_exp_max"]: {
	arguments: ResolverInputTypes["Offer_select_column_Offer_aggregate_bool_exp_max_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Offer_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["float8_comparison_exp"]
};
	["Offer_aggregate_bool_exp_min"]: {
	arguments: ResolverInputTypes["Offer_select_column_Offer_aggregate_bool_exp_min_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Offer_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["float8_comparison_exp"]
};
	["Offer_aggregate_bool_exp_stddev_samp"]: {
	arguments: ResolverInputTypes["Offer_select_column_Offer_aggregate_bool_exp_stddev_samp_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Offer_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["float8_comparison_exp"]
};
	["Offer_aggregate_bool_exp_sum"]: {
	arguments: ResolverInputTypes["Offer_select_column_Offer_aggregate_bool_exp_sum_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Offer_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["float8_comparison_exp"]
};
	["Offer_aggregate_bool_exp_var_samp"]: {
	arguments: ResolverInputTypes["Offer_select_column_Offer_aggregate_bool_exp_var_samp_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Offer_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["float8_comparison_exp"]
};
	/** aggregate fields of "Offer" */
["Offer_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["Offer_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["Offer_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["Offer_max_fields"],
	min?:ResolverInputTypes["Offer_min_fields"],
	stddev?:ResolverInputTypes["Offer_stddev_fields"],
	stddev_pop?:ResolverInputTypes["Offer_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["Offer_stddev_samp_fields"],
	sum?:ResolverInputTypes["Offer_sum_fields"],
	var_pop?:ResolverInputTypes["Offer_var_pop_fields"],
	var_samp?:ResolverInputTypes["Offer_var_samp_fields"],
	variance?:ResolverInputTypes["Offer_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "Offer" */
["Offer_aggregate_order_by"]: {
	avg?: ResolverInputTypes["Offer_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["Offer_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["Offer_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["Offer_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["Offer_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["Offer_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["Offer_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["Offer_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["Offer_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["Offer_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "Offer" */
["Offer_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["Offer_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["Offer_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["Offer_avg_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	packaging?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "Offer" */
["Offer_avg_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	packaging?: ResolverInputTypes["order_by"] | undefined | null,
	price_per_unit?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	quantity?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "Offer". All fields are combined with a logical 'AND'. */
["Offer_bool_exp"]: {
	Business?: ResolverInputTypes["Business_bool_exp"] | undefined | null,
	Product?: ResolverInputTypes["Product_bool_exp"] | undefined | null,
	_and?: Array<ResolverInputTypes["Offer_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["Offer_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["Offer_bool_exp"]> | undefined | null,
	active?: ResolverInputTypes["Boolean_comparison_exp"] | undefined | null,
	business_id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	created_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null,
	end_date?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null,
	harvest_date?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	packaging?: ResolverInputTypes["float8_comparison_exp"] | undefined | null,
	price_per_unit?: ResolverInputTypes["float8_comparison_exp"] | undefined | null,
	product_id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	quantity?: ResolverInputTypes["float8_comparison_exp"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "Offer" */
["Offer_constraint"]:Offer_constraint;
	/** input type for incrementing numeric columns in table "Offer" */
["Offer_inc_input"]: {
	business_id?: number | undefined | null,
	id?: number | undefined | null,
	packaging?: ResolverInputTypes["float8"] | undefined | null,
	price_per_unit?: ResolverInputTypes["float8"] | undefined | null,
	product_id?: number | undefined | null,
	quantity?: ResolverInputTypes["float8"] | undefined | null
};
	/** input type for inserting data into table "Offer" */
["Offer_insert_input"]: {
	Business?: ResolverInputTypes["Business_obj_rel_insert_input"] | undefined | null,
	Product?: ResolverInputTypes["Product_obj_rel_insert_input"] | undefined | null,
	active?: boolean | undefined | null,
	business_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	end_date?: ResolverInputTypes["timestamp"] | undefined | null,
	harvest_date?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	packaging?: ResolverInputTypes["float8"] | undefined | null,
	price_per_unit?: ResolverInputTypes["float8"] | undefined | null,
	product_id?: number | undefined | null,
	quantity?: ResolverInputTypes["float8"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate max on columns */
["Offer_max_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	end_date?:boolean | `@${string}`,
	harvest_date?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	packaging?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "Offer" */
["Offer_max_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	end_date?: ResolverInputTypes["order_by"] | undefined | null,
	harvest_date?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	packaging?: ResolverInputTypes["order_by"] | undefined | null,
	price_per_unit?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	quantity?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["Offer_min_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	end_date?:boolean | `@${string}`,
	harvest_date?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	packaging?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "Offer" */
["Offer_min_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	end_date?: ResolverInputTypes["order_by"] | undefined | null,
	harvest_date?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	packaging?: ResolverInputTypes["order_by"] | undefined | null,
	price_per_unit?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	quantity?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "Offer" */
["Offer_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["Offer"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "Offer" */
["Offer_on_conflict"]: {
	constraint: ResolverInputTypes["Offer_constraint"],
	update_columns: Array<ResolverInputTypes["Offer_update_column"]>,
	where?: ResolverInputTypes["Offer_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "Offer". */
["Offer_order_by"]: {
	Business?: ResolverInputTypes["Business_order_by"] | undefined | null,
	Product?: ResolverInputTypes["Product_order_by"] | undefined | null,
	active?: ResolverInputTypes["order_by"] | undefined | null,
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	end_date?: ResolverInputTypes["order_by"] | undefined | null,
	harvest_date?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	packaging?: ResolverInputTypes["order_by"] | undefined | null,
	price_per_unit?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	quantity?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: Offer */
["Offer_pk_columns_input"]: {
	id: number
};
	/** select columns of table "Offer" */
["Offer_select_column"]:Offer_select_column;
	/** select "Offer_aggregate_bool_exp_avg_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_avg_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_avg_arguments_columns;
	/** select "Offer_aggregate_bool_exp_bool_and_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_bool_and_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "Offer_aggregate_bool_exp_bool_or_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_bool_or_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_bool_or_arguments_columns;
	/** select "Offer_aggregate_bool_exp_corr_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_corr_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_corr_arguments_columns;
	/** select "Offer_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_covar_samp_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_covar_samp_arguments_columns;
	/** select "Offer_aggregate_bool_exp_max_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_max_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_max_arguments_columns;
	/** select "Offer_aggregate_bool_exp_min_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_min_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_min_arguments_columns;
	/** select "Offer_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_stddev_samp_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_stddev_samp_arguments_columns;
	/** select "Offer_aggregate_bool_exp_sum_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_sum_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_sum_arguments_columns;
	/** select "Offer_aggregate_bool_exp_var_samp_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_var_samp_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_var_samp_arguments_columns;
	/** input type for updating data in table "Offer" */
["Offer_set_input"]: {
	active?: boolean | undefined | null,
	business_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	end_date?: ResolverInputTypes["timestamp"] | undefined | null,
	harvest_date?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	packaging?: ResolverInputTypes["float8"] | undefined | null,
	price_per_unit?: ResolverInputTypes["float8"] | undefined | null,
	product_id?: number | undefined | null,
	quantity?: ResolverInputTypes["float8"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate stddev on columns */
["Offer_stddev_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	packaging?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "Offer" */
["Offer_stddev_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	packaging?: ResolverInputTypes["order_by"] | undefined | null,
	price_per_unit?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	quantity?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["Offer_stddev_pop_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	packaging?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "Offer" */
["Offer_stddev_pop_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	packaging?: ResolverInputTypes["order_by"] | undefined | null,
	price_per_unit?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	quantity?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["Offer_stddev_samp_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	packaging?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "Offer" */
["Offer_stddev_samp_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	packaging?: ResolverInputTypes["order_by"] | undefined | null,
	price_per_unit?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	quantity?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "Offer" */
["Offer_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["Offer_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["Offer_stream_cursor_value_input"]: {
	active?: boolean | undefined | null,
	business_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	end_date?: ResolverInputTypes["timestamp"] | undefined | null,
	harvest_date?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	packaging?: ResolverInputTypes["float8"] | undefined | null,
	price_per_unit?: ResolverInputTypes["float8"] | undefined | null,
	product_id?: number | undefined | null,
	quantity?: ResolverInputTypes["float8"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate sum on columns */
["Offer_sum_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	packaging?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "Offer" */
["Offer_sum_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	packaging?: ResolverInputTypes["order_by"] | undefined | null,
	price_per_unit?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	quantity?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "Offer" */
["Offer_update_column"]:Offer_update_column;
	["Offer_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Offer_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Offer_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["Offer_bool_exp"]
};
	/** aggregate var_pop on columns */
["Offer_var_pop_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	packaging?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "Offer" */
["Offer_var_pop_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	packaging?: ResolverInputTypes["order_by"] | undefined | null,
	price_per_unit?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	quantity?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["Offer_var_samp_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	packaging?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "Offer" */
["Offer_var_samp_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	packaging?: ResolverInputTypes["order_by"] | undefined | null,
	price_per_unit?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	quantity?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["Offer_variance_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	packaging?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "Offer" */
["Offer_variance_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	packaging?: ResolverInputTypes["order_by"] | undefined | null,
	price_per_unit?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	quantity?: ResolverInputTypes["order_by"] | undefined | null
};
	/** columns and relationships of "Order" */
["Order"]: AliasType<{
	/** An object relationship */
	Business?:ResolverInputTypes["Business"],
	/** An object relationship */
	Product?:ResolverInputTypes["Product"],
Transactions?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Transaction_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Transaction_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Transaction_bool_exp"] | undefined | null},ResolverInputTypes["Transaction"]],
Transactions_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Transaction_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Transaction_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Transaction_bool_exp"] | undefined | null},ResolverInputTypes["Transaction_aggregate"]],
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	end_date?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	offer_type?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity_by_units?:boolean | `@${string}`,
	start_date?:boolean | `@${string}`,
transactionsBySellOrderId?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Transaction_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Transaction_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Transaction_bool_exp"] | undefined | null},ResolverInputTypes["Transaction"]],
transactionsBySellOrderId_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Transaction_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Transaction_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Transaction_bool_exp"] | undefined | null},ResolverInputTypes["Transaction_aggregate"]],
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "Order" */
["Order_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["Order_aggregate_fields"],
	nodes?:ResolverInputTypes["Order"],
		__typename?: boolean | `@${string}`
}>;
	["Order_aggregate_bool_exp"]: {
	avg?: ResolverInputTypes["Order_aggregate_bool_exp_avg"] | undefined | null,
	corr?: ResolverInputTypes["Order_aggregate_bool_exp_corr"] | undefined | null,
	count?: ResolverInputTypes["Order_aggregate_bool_exp_count"] | undefined | null,
	covar_samp?: ResolverInputTypes["Order_aggregate_bool_exp_covar_samp"] | undefined | null,
	max?: ResolverInputTypes["Order_aggregate_bool_exp_max"] | undefined | null,
	min?: ResolverInputTypes["Order_aggregate_bool_exp_min"] | undefined | null,
	stddev_samp?: ResolverInputTypes["Order_aggregate_bool_exp_stddev_samp"] | undefined | null,
	sum?: ResolverInputTypes["Order_aggregate_bool_exp_sum"] | undefined | null,
	var_samp?: ResolverInputTypes["Order_aggregate_bool_exp_var_samp"] | undefined | null
};
	["Order_aggregate_bool_exp_avg"]: {
	arguments: ResolverInputTypes["Order_select_column_Order_aggregate_bool_exp_avg_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Order_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["float8_comparison_exp"]
};
	["Order_aggregate_bool_exp_corr"]: {
	arguments: ResolverInputTypes["Order_aggregate_bool_exp_corr_arguments"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Order_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["float8_comparison_exp"]
};
	["Order_aggregate_bool_exp_corr_arguments"]: {
	X: ResolverInputTypes["Order_select_column_Order_aggregate_bool_exp_corr_arguments_columns"],
	Y: ResolverInputTypes["Order_select_column_Order_aggregate_bool_exp_corr_arguments_columns"]
};
	["Order_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["Order_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Order_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	["Order_aggregate_bool_exp_covar_samp"]: {
	arguments: ResolverInputTypes["Order_aggregate_bool_exp_covar_samp_arguments"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Order_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["float8_comparison_exp"]
};
	["Order_aggregate_bool_exp_covar_samp_arguments"]: {
	X: ResolverInputTypes["Order_select_column_Order_aggregate_bool_exp_covar_samp_arguments_columns"],
	Y: ResolverInputTypes["Order_select_column_Order_aggregate_bool_exp_covar_samp_arguments_columns"]
};
	["Order_aggregate_bool_exp_max"]: {
	arguments: ResolverInputTypes["Order_select_column_Order_aggregate_bool_exp_max_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Order_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["float8_comparison_exp"]
};
	["Order_aggregate_bool_exp_min"]: {
	arguments: ResolverInputTypes["Order_select_column_Order_aggregate_bool_exp_min_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Order_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["float8_comparison_exp"]
};
	["Order_aggregate_bool_exp_stddev_samp"]: {
	arguments: ResolverInputTypes["Order_select_column_Order_aggregate_bool_exp_stddev_samp_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Order_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["float8_comparison_exp"]
};
	["Order_aggregate_bool_exp_sum"]: {
	arguments: ResolverInputTypes["Order_select_column_Order_aggregate_bool_exp_sum_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Order_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["float8_comparison_exp"]
};
	["Order_aggregate_bool_exp_var_samp"]: {
	arguments: ResolverInputTypes["Order_select_column_Order_aggregate_bool_exp_var_samp_arguments_columns"],
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Order_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["float8_comparison_exp"]
};
	/** aggregate fields of "Order" */
["Order_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["Order_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["Order_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["Order_max_fields"],
	min?:ResolverInputTypes["Order_min_fields"],
	stddev?:ResolverInputTypes["Order_stddev_fields"],
	stddev_pop?:ResolverInputTypes["Order_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["Order_stddev_samp_fields"],
	sum?:ResolverInputTypes["Order_sum_fields"],
	var_pop?:ResolverInputTypes["Order_var_pop_fields"],
	var_samp?:ResolverInputTypes["Order_var_samp_fields"],
	variance?:ResolverInputTypes["Order_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "Order" */
["Order_aggregate_order_by"]: {
	avg?: ResolverInputTypes["Order_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["Order_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["Order_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["Order_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["Order_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["Order_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["Order_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["Order_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["Order_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["Order_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "Order" */
["Order_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["Order_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["Order_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["Order_avg_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity_by_units?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "Order" */
["Order_avg_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	price_per_unit?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	quantity_by_units?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "Order". All fields are combined with a logical 'AND'. */
["Order_bool_exp"]: {
	Business?: ResolverInputTypes["Business_bool_exp"] | undefined | null,
	Product?: ResolverInputTypes["Product_bool_exp"] | undefined | null,
	Transactions?: ResolverInputTypes["Transaction_bool_exp"] | undefined | null,
	Transactions_aggregate?: ResolverInputTypes["Transaction_aggregate_bool_exp"] | undefined | null,
	_and?: Array<ResolverInputTypes["Order_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["Order_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["Order_bool_exp"]> | undefined | null,
	business_id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	created_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null,
	end_date?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	offer_type?: ResolverInputTypes["OfferType_comparison_exp"] | undefined | null,
	price_per_unit?: ResolverInputTypes["float8_comparison_exp"] | undefined | null,
	product_id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	quantity_by_units?: ResolverInputTypes["float8_comparison_exp"] | undefined | null,
	start_date?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null,
	transactionsBySellOrderId?: ResolverInputTypes["Transaction_bool_exp"] | undefined | null,
	transactionsBySellOrderId_aggregate?: ResolverInputTypes["Transaction_aggregate_bool_exp"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "Order" */
["Order_constraint"]:Order_constraint;
	/** input type for incrementing numeric columns in table "Order" */
["Order_inc_input"]: {
	business_id?: number | undefined | null,
	id?: number | undefined | null,
	price_per_unit?: ResolverInputTypes["float8"] | undefined | null,
	product_id?: number | undefined | null,
	quantity_by_units?: ResolverInputTypes["float8"] | undefined | null
};
	/** input type for inserting data into table "Order" */
["Order_insert_input"]: {
	Business?: ResolverInputTypes["Business_obj_rel_insert_input"] | undefined | null,
	Product?: ResolverInputTypes["Product_obj_rel_insert_input"] | undefined | null,
	Transactions?: ResolverInputTypes["Transaction_arr_rel_insert_input"] | undefined | null,
	business_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	end_date?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	offer_type?: ResolverInputTypes["OfferType"] | undefined | null,
	price_per_unit?: ResolverInputTypes["float8"] | undefined | null,
	product_id?: number | undefined | null,
	quantity_by_units?: ResolverInputTypes["float8"] | undefined | null,
	start_date?: ResolverInputTypes["timestamp"] | undefined | null,
	transactionsBySellOrderId?: ResolverInputTypes["Transaction_arr_rel_insert_input"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate max on columns */
["Order_max_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	end_date?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	offer_type?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity_by_units?:boolean | `@${string}`,
	start_date?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "Order" */
["Order_max_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	end_date?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	offer_type?: ResolverInputTypes["order_by"] | undefined | null,
	price_per_unit?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	quantity_by_units?: ResolverInputTypes["order_by"] | undefined | null,
	start_date?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["Order_min_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	end_date?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	offer_type?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity_by_units?:boolean | `@${string}`,
	start_date?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "Order" */
["Order_min_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	end_date?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	offer_type?: ResolverInputTypes["order_by"] | undefined | null,
	price_per_unit?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	quantity_by_units?: ResolverInputTypes["order_by"] | undefined | null,
	start_date?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "Order" */
["Order_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["Order"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "Order" */
["Order_obj_rel_insert_input"]: {
	data: ResolverInputTypes["Order_insert_input"],
	/** upsert condition */
	on_conflict?: ResolverInputTypes["Order_on_conflict"] | undefined | null
};
	/** on_conflict condition type for table "Order" */
["Order_on_conflict"]: {
	constraint: ResolverInputTypes["Order_constraint"],
	update_columns: Array<ResolverInputTypes["Order_update_column"]>,
	where?: ResolverInputTypes["Order_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "Order". */
["Order_order_by"]: {
	Business?: ResolverInputTypes["Business_order_by"] | undefined | null,
	Product?: ResolverInputTypes["Product_order_by"] | undefined | null,
	Transactions_aggregate?: ResolverInputTypes["Transaction_aggregate_order_by"] | undefined | null,
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	end_date?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	offer_type?: ResolverInputTypes["order_by"] | undefined | null,
	price_per_unit?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	quantity_by_units?: ResolverInputTypes["order_by"] | undefined | null,
	start_date?: ResolverInputTypes["order_by"] | undefined | null,
	transactionsBySellOrderId_aggregate?: ResolverInputTypes["Transaction_aggregate_order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: Order */
["Order_pk_columns_input"]: {
	id: number
};
	/** select columns of table "Order" */
["Order_select_column"]:Order_select_column;
	/** select "Order_aggregate_bool_exp_avg_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_avg_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_avg_arguments_columns;
	/** select "Order_aggregate_bool_exp_corr_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_corr_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_corr_arguments_columns;
	/** select "Order_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_covar_samp_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_covar_samp_arguments_columns;
	/** select "Order_aggregate_bool_exp_max_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_max_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_max_arguments_columns;
	/** select "Order_aggregate_bool_exp_min_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_min_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_min_arguments_columns;
	/** select "Order_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_stddev_samp_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_stddev_samp_arguments_columns;
	/** select "Order_aggregate_bool_exp_sum_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_sum_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_sum_arguments_columns;
	/** select "Order_aggregate_bool_exp_var_samp_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_var_samp_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_var_samp_arguments_columns;
	/** input type for updating data in table "Order" */
["Order_set_input"]: {
	business_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	end_date?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	offer_type?: ResolverInputTypes["OfferType"] | undefined | null,
	price_per_unit?: ResolverInputTypes["float8"] | undefined | null,
	product_id?: number | undefined | null,
	quantity_by_units?: ResolverInputTypes["float8"] | undefined | null,
	start_date?: ResolverInputTypes["timestamp"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate stddev on columns */
["Order_stddev_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity_by_units?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "Order" */
["Order_stddev_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	price_per_unit?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	quantity_by_units?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["Order_stddev_pop_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity_by_units?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "Order" */
["Order_stddev_pop_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	price_per_unit?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	quantity_by_units?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["Order_stddev_samp_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity_by_units?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "Order" */
["Order_stddev_samp_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	price_per_unit?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	quantity_by_units?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "Order" */
["Order_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["Order_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["Order_stream_cursor_value_input"]: {
	business_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	end_date?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	offer_type?: ResolverInputTypes["OfferType"] | undefined | null,
	price_per_unit?: ResolverInputTypes["float8"] | undefined | null,
	product_id?: number | undefined | null,
	quantity_by_units?: ResolverInputTypes["float8"] | undefined | null,
	start_date?: ResolverInputTypes["timestamp"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate sum on columns */
["Order_sum_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity_by_units?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "Order" */
["Order_sum_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	price_per_unit?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	quantity_by_units?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "Order" */
["Order_update_column"]:Order_update_column;
	["Order_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Order_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Order_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["Order_bool_exp"]
};
	/** aggregate var_pop on columns */
["Order_var_pop_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity_by_units?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "Order" */
["Order_var_pop_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	price_per_unit?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	quantity_by_units?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["Order_var_samp_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity_by_units?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "Order" */
["Order_var_samp_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	price_per_unit?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	quantity_by_units?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["Order_variance_fields"]: AliasType<{
	business_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	price_per_unit?:boolean | `@${string}`,
	product_id?:boolean | `@${string}`,
	quantity_by_units?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "Order" */
["Order_variance_order_by"]: {
	business_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	price_per_unit?: ResolverInputTypes["order_by"] | undefined | null,
	product_id?: ResolverInputTypes["order_by"] | undefined | null,
	quantity_by_units?: ResolverInputTypes["order_by"] | undefined | null
};
	/** columns and relationships of "Product" */
["Product"]: AliasType<{
BusinessProducts?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["BusinessProduct_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["BusinessProduct_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["BusinessProduct_bool_exp"] | undefined | null},ResolverInputTypes["BusinessProduct"]],
BusinessProducts_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["BusinessProduct_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["BusinessProduct_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["BusinessProduct_bool_exp"] | undefined | null},ResolverInputTypes["BusinessProduct_aggregate"]],
	/** An object relationship */
	Category?:ResolverInputTypes["Category"],
Offers?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Offer_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Offer_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Offer_bool_exp"] | undefined | null},ResolverInputTypes["Offer"]],
Offers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Offer_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Offer_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Offer_bool_exp"] | undefined | null},ResolverInputTypes["Offer_aggregate"]],
Orders?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Order_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Order_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Order_bool_exp"] | undefined | null},ResolverInputTypes["Order"]],
Orders_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Order_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Order_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Order_bool_exp"] | undefined | null},ResolverInputTypes["Order_aggregate"]],
	category_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	image_url?:boolean | `@${string}`,
	measurement_unit?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "Product" */
["Product_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["Product_aggregate_fields"],
	nodes?:ResolverInputTypes["Product"],
		__typename?: boolean | `@${string}`
}>;
	["Product_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["Product_aggregate_bool_exp_count"] | undefined | null
};
	["Product_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["Product_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Product_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "Product" */
["Product_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["Product_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["Product_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["Product_max_fields"],
	min?:ResolverInputTypes["Product_min_fields"],
	stddev?:ResolverInputTypes["Product_stddev_fields"],
	stddev_pop?:ResolverInputTypes["Product_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["Product_stddev_samp_fields"],
	sum?:ResolverInputTypes["Product_sum_fields"],
	var_pop?:ResolverInputTypes["Product_var_pop_fields"],
	var_samp?:ResolverInputTypes["Product_var_samp_fields"],
	variance?:ResolverInputTypes["Product_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "Product" */
["Product_aggregate_order_by"]: {
	avg?: ResolverInputTypes["Product_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["Product_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["Product_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["Product_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["Product_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["Product_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["Product_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["Product_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["Product_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["Product_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "Product" */
["Product_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["Product_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["Product_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["Product_avg_fields"]: AliasType<{
	category_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "Product" */
["Product_avg_order_by"]: {
	category_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "Product". All fields are combined with a logical 'AND'. */
["Product_bool_exp"]: {
	BusinessProducts?: ResolverInputTypes["BusinessProduct_bool_exp"] | undefined | null,
	BusinessProducts_aggregate?: ResolverInputTypes["BusinessProduct_aggregate_bool_exp"] | undefined | null,
	Category?: ResolverInputTypes["Category_bool_exp"] | undefined | null,
	Offers?: ResolverInputTypes["Offer_bool_exp"] | undefined | null,
	Offers_aggregate?: ResolverInputTypes["Offer_aggregate_bool_exp"] | undefined | null,
	Orders?: ResolverInputTypes["Order_bool_exp"] | undefined | null,
	Orders_aggregate?: ResolverInputTypes["Order_aggregate_bool_exp"] | undefined | null,
	_and?: Array<ResolverInputTypes["Product_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["Product_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["Product_bool_exp"]> | undefined | null,
	category_id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	created_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	image_url?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	measurement_unit?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	name?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "Product" */
["Product_constraint"]:Product_constraint;
	/** input type for incrementing numeric columns in table "Product" */
["Product_inc_input"]: {
	category_id?: number | undefined | null,
	id?: number | undefined | null
};
	/** input type for inserting data into table "Product" */
["Product_insert_input"]: {
	BusinessProducts?: ResolverInputTypes["BusinessProduct_arr_rel_insert_input"] | undefined | null,
	Category?: ResolverInputTypes["Category_obj_rel_insert_input"] | undefined | null,
	Offers?: ResolverInputTypes["Offer_arr_rel_insert_input"] | undefined | null,
	Orders?: ResolverInputTypes["Order_arr_rel_insert_input"] | undefined | null,
	category_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	image_url?: string | undefined | null,
	measurement_unit?: string | undefined | null,
	name?: string | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate max on columns */
["Product_max_fields"]: AliasType<{
	category_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	image_url?:boolean | `@${string}`,
	measurement_unit?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "Product" */
["Product_max_order_by"]: {
	category_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	image_url?: ResolverInputTypes["order_by"] | undefined | null,
	measurement_unit?: ResolverInputTypes["order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["Product_min_fields"]: AliasType<{
	category_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	image_url?:boolean | `@${string}`,
	measurement_unit?:boolean | `@${string}`,
	name?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "Product" */
["Product_min_order_by"]: {
	category_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	image_url?: ResolverInputTypes["order_by"] | undefined | null,
	measurement_unit?: ResolverInputTypes["order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "Product" */
["Product_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["Product"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "Product" */
["Product_obj_rel_insert_input"]: {
	data: ResolverInputTypes["Product_insert_input"],
	/** upsert condition */
	on_conflict?: ResolverInputTypes["Product_on_conflict"] | undefined | null
};
	/** on_conflict condition type for table "Product" */
["Product_on_conflict"]: {
	constraint: ResolverInputTypes["Product_constraint"],
	update_columns: Array<ResolverInputTypes["Product_update_column"]>,
	where?: ResolverInputTypes["Product_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "Product". */
["Product_order_by"]: {
	BusinessProducts_aggregate?: ResolverInputTypes["BusinessProduct_aggregate_order_by"] | undefined | null,
	Category?: ResolverInputTypes["Category_order_by"] | undefined | null,
	Offers_aggregate?: ResolverInputTypes["Offer_aggregate_order_by"] | undefined | null,
	Orders_aggregate?: ResolverInputTypes["Order_aggregate_order_by"] | undefined | null,
	category_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	image_url?: ResolverInputTypes["order_by"] | undefined | null,
	measurement_unit?: ResolverInputTypes["order_by"] | undefined | null,
	name?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: Product */
["Product_pk_columns_input"]: {
	id: number
};
	/** select columns of table "Product" */
["Product_select_column"]:Product_select_column;
	/** input type for updating data in table "Product" */
["Product_set_input"]: {
	category_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	image_url?: string | undefined | null,
	measurement_unit?: string | undefined | null,
	name?: string | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate stddev on columns */
["Product_stddev_fields"]: AliasType<{
	category_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "Product" */
["Product_stddev_order_by"]: {
	category_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["Product_stddev_pop_fields"]: AliasType<{
	category_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "Product" */
["Product_stddev_pop_order_by"]: {
	category_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["Product_stddev_samp_fields"]: AliasType<{
	category_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "Product" */
["Product_stddev_samp_order_by"]: {
	category_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "Product" */
["Product_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["Product_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["Product_stream_cursor_value_input"]: {
	category_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	image_url?: string | undefined | null,
	measurement_unit?: string | undefined | null,
	name?: string | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate sum on columns */
["Product_sum_fields"]: AliasType<{
	category_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "Product" */
["Product_sum_order_by"]: {
	category_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "Product" */
["Product_update_column"]:Product_update_column;
	["Product_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Product_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Product_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["Product_bool_exp"]
};
	/** aggregate var_pop on columns */
["Product_var_pop_fields"]: AliasType<{
	category_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "Product" */
["Product_var_pop_order_by"]: {
	category_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["Product_var_samp_fields"]: AliasType<{
	category_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "Product" */
["Product_var_samp_order_by"]: {
	category_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["Product_variance_fields"]: AliasType<{
	category_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "Product" */
["Product_variance_order_by"]: {
	category_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** columns and relationships of "Profile" */
["Profile"]: AliasType<{
BusinessWorkers?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["BusinessWorker_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["BusinessWorker_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["BusinessWorker_bool_exp"] | undefined | null},ResolverInputTypes["BusinessWorker"]],
BusinessWorkers_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["BusinessWorker_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["BusinessWorker_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["BusinessWorker_bool_exp"] | undefined | null},ResolverInputTypes["BusinessWorker_aggregate"]],
	created_at?:boolean | `@${string}`,
	first_name?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	last_name?:boolean | `@${string}`,
	phone?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "Profile" */
["Profile_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["Profile_aggregate_fields"],
	nodes?:ResolverInputTypes["Profile"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "Profile" */
["Profile_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["Profile_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["Profile_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["Profile_max_fields"],
	min?:ResolverInputTypes["Profile_min_fields"],
	stddev?:ResolverInputTypes["Profile_stddev_fields"],
	stddev_pop?:ResolverInputTypes["Profile_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["Profile_stddev_samp_fields"],
	sum?:ResolverInputTypes["Profile_sum_fields"],
	var_pop?:ResolverInputTypes["Profile_var_pop_fields"],
	var_samp?:ResolverInputTypes["Profile_var_samp_fields"],
	variance?:ResolverInputTypes["Profile_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["Profile_avg_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "Profile". All fields are combined with a logical 'AND'. */
["Profile_bool_exp"]: {
	BusinessWorkers?: ResolverInputTypes["BusinessWorker_bool_exp"] | undefined | null,
	BusinessWorkers_aggregate?: ResolverInputTypes["BusinessWorker_aggregate_bool_exp"] | undefined | null,
	_and?: Array<ResolverInputTypes["Profile_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["Profile_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["Profile_bool_exp"]> | undefined | null,
	created_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null,
	first_name?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	last_name?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	phone?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "Profile" */
["Profile_constraint"]:Profile_constraint;
	/** input type for incrementing numeric columns in table "Profile" */
["Profile_inc_input"]: {
	id?: number | undefined | null
};
	/** input type for inserting data into table "Profile" */
["Profile_insert_input"]: {
	BusinessWorkers?: ResolverInputTypes["BusinessWorker_arr_rel_insert_input"] | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	first_name?: string | undefined | null,
	id?: number | undefined | null,
	last_name?: string | undefined | null,
	phone?: string | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate max on columns */
["Profile_max_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	first_name?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	last_name?:boolean | `@${string}`,
	phone?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["Profile_min_fields"]: AliasType<{
	created_at?:boolean | `@${string}`,
	first_name?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	last_name?:boolean | `@${string}`,
	phone?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "Profile" */
["Profile_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["Profile"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "Profile" */
["Profile_obj_rel_insert_input"]: {
	data: ResolverInputTypes["Profile_insert_input"],
	/** upsert condition */
	on_conflict?: ResolverInputTypes["Profile_on_conflict"] | undefined | null
};
	/** on_conflict condition type for table "Profile" */
["Profile_on_conflict"]: {
	constraint: ResolverInputTypes["Profile_constraint"],
	update_columns: Array<ResolverInputTypes["Profile_update_column"]>,
	where?: ResolverInputTypes["Profile_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "Profile". */
["Profile_order_by"]: {
	BusinessWorkers_aggregate?: ResolverInputTypes["BusinessWorker_aggregate_order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	first_name?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	last_name?: ResolverInputTypes["order_by"] | undefined | null,
	phone?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: Profile */
["Profile_pk_columns_input"]: {
	id: number
};
	/** select columns of table "Profile" */
["Profile_select_column"]:Profile_select_column;
	/** input type for updating data in table "Profile" */
["Profile_set_input"]: {
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	first_name?: string | undefined | null,
	id?: number | undefined | null,
	last_name?: string | undefined | null,
	phone?: string | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate stddev on columns */
["Profile_stddev_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["Profile_stddev_pop_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["Profile_stddev_samp_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "Profile" */
["Profile_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["Profile_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["Profile_stream_cursor_value_input"]: {
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	first_name?: string | undefined | null,
	id?: number | undefined | null,
	last_name?: string | undefined | null,
	phone?: string | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate sum on columns */
["Profile_sum_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** update columns of table "Profile" */
["Profile_update_column"]:Profile_update_column;
	["Profile_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Profile_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Profile_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["Profile_bool_exp"]
};
	/** aggregate var_pop on columns */
["Profile_var_pop_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["Profile_var_samp_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["Profile_variance_fields"]: AliasType<{
	id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
["String_comparison_exp"]: {
	_eq?: string | undefined | null,
	_gt?: string | undefined | null,
	_gte?: string | undefined | null,
	/** does the column match the given case-insensitive pattern */
	_ilike?: string | undefined | null,
	_in?: Array<string> | undefined | null,
	/** does the column match the given POSIX regular expression, case insensitive */
	_iregex?: string | undefined | null,
	_is_null?: boolean | undefined | null,
	/** does the column match the given pattern */
	_like?: string | undefined | null,
	_lt?: string | undefined | null,
	_lte?: string | undefined | null,
	_neq?: string | undefined | null,
	/** does the column NOT match the given case-insensitive pattern */
	_nilike?: string | undefined | null,
	_nin?: Array<string> | undefined | null,
	/** does the column NOT match the given POSIX regular expression, case insensitive */
	_niregex?: string | undefined | null,
	/** does the column NOT match the given pattern */
	_nlike?: string | undefined | null,
	/** does the column NOT match the given POSIX regular expression, case sensitive */
	_nregex?: string | undefined | null,
	/** does the column NOT match the given SQL regular expression */
	_nsimilar?: string | undefined | null,
	/** does the column match the given POSIX regular expression, case sensitive */
	_regex?: string | undefined | null,
	/** does the column match the given SQL regular expression */
	_similar?: string | undefined | null
};
	/** columns and relationships of "Transaction" */
["Transaction"]: AliasType<{
	/** An object relationship */
	Order?:ResolverInputTypes["Order"],
TransactionReviews?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["TransactionReview_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["TransactionReview_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["TransactionReview_bool_exp"] | undefined | null},ResolverInputTypes["TransactionReview"]],
TransactionReviews_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["TransactionReview_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["TransactionReview_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["TransactionReview_bool_exp"] | undefined | null},ResolverInputTypes["TransactionReview_aggregate"]],
	buy_order_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	/** An object relationship */
	orderBySellOrderId?:ResolverInputTypes["Order"],
	profile_id?:boolean | `@${string}`,
	sell_order_id?:boolean | `@${string}`,
	status?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** columns and relationships of "TransactionReview" */
["TransactionReview"]: AliasType<{
	/** An object relationship */
	Transaction?:ResolverInputTypes["Transaction"],
	comment?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	rating?:boolean | `@${string}`,
	transaction_id?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "TransactionReview" */
["TransactionReview_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["TransactionReview_aggregate_fields"],
	nodes?:ResolverInputTypes["TransactionReview"],
		__typename?: boolean | `@${string}`
}>;
	["TransactionReview_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["TransactionReview_aggregate_bool_exp_count"] | undefined | null
};
	["TransactionReview_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["TransactionReview_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["TransactionReview_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "TransactionReview" */
["TransactionReview_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["TransactionReview_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["TransactionReview_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["TransactionReview_max_fields"],
	min?:ResolverInputTypes["TransactionReview_min_fields"],
	stddev?:ResolverInputTypes["TransactionReview_stddev_fields"],
	stddev_pop?:ResolverInputTypes["TransactionReview_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["TransactionReview_stddev_samp_fields"],
	sum?:ResolverInputTypes["TransactionReview_sum_fields"],
	var_pop?:ResolverInputTypes["TransactionReview_var_pop_fields"],
	var_samp?:ResolverInputTypes["TransactionReview_var_samp_fields"],
	variance?:ResolverInputTypes["TransactionReview_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "TransactionReview" */
["TransactionReview_aggregate_order_by"]: {
	avg?: ResolverInputTypes["TransactionReview_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["TransactionReview_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["TransactionReview_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["TransactionReview_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["TransactionReview_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["TransactionReview_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["TransactionReview_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["TransactionReview_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["TransactionReview_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["TransactionReview_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "TransactionReview" */
["TransactionReview_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["TransactionReview_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["TransactionReview_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["TransactionReview_avg_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	rating?:boolean | `@${string}`,
	transaction_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "TransactionReview" */
["TransactionReview_avg_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	rating?: ResolverInputTypes["order_by"] | undefined | null,
	transaction_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "TransactionReview". All fields are combined with a logical 'AND'. */
["TransactionReview_bool_exp"]: {
	Transaction?: ResolverInputTypes["Transaction_bool_exp"] | undefined | null,
	_and?: Array<ResolverInputTypes["TransactionReview_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["TransactionReview_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["TransactionReview_bool_exp"]> | undefined | null,
	comment?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	created_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	rating?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	transaction_id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "TransactionReview" */
["TransactionReview_constraint"]:TransactionReview_constraint;
	/** input type for incrementing numeric columns in table "TransactionReview" */
["TransactionReview_inc_input"]: {
	id?: number | undefined | null,
	rating?: number | undefined | null,
	transaction_id?: number | undefined | null
};
	/** input type for inserting data into table "TransactionReview" */
["TransactionReview_insert_input"]: {
	Transaction?: ResolverInputTypes["Transaction_obj_rel_insert_input"] | undefined | null,
	comment?: string | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	rating?: number | undefined | null,
	transaction_id?: number | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate max on columns */
["TransactionReview_max_fields"]: AliasType<{
	comment?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	rating?:boolean | `@${string}`,
	transaction_id?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "TransactionReview" */
["TransactionReview_max_order_by"]: {
	comment?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	rating?: ResolverInputTypes["order_by"] | undefined | null,
	transaction_id?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["TransactionReview_min_fields"]: AliasType<{
	comment?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	rating?:boolean | `@${string}`,
	transaction_id?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "TransactionReview" */
["TransactionReview_min_order_by"]: {
	comment?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	rating?: ResolverInputTypes["order_by"] | undefined | null,
	transaction_id?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "TransactionReview" */
["TransactionReview_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["TransactionReview"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "TransactionReview" */
["TransactionReview_on_conflict"]: {
	constraint: ResolverInputTypes["TransactionReview_constraint"],
	update_columns: Array<ResolverInputTypes["TransactionReview_update_column"]>,
	where?: ResolverInputTypes["TransactionReview_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "TransactionReview". */
["TransactionReview_order_by"]: {
	Transaction?: ResolverInputTypes["Transaction_order_by"] | undefined | null,
	comment?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	rating?: ResolverInputTypes["order_by"] | undefined | null,
	transaction_id?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: TransactionReview */
["TransactionReview_pk_columns_input"]: {
	id: number
};
	/** select columns of table "TransactionReview" */
["TransactionReview_select_column"]:TransactionReview_select_column;
	/** input type for updating data in table "TransactionReview" */
["TransactionReview_set_input"]: {
	comment?: string | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	rating?: number | undefined | null,
	transaction_id?: number | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate stddev on columns */
["TransactionReview_stddev_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	rating?:boolean | `@${string}`,
	transaction_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "TransactionReview" */
["TransactionReview_stddev_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	rating?: ResolverInputTypes["order_by"] | undefined | null,
	transaction_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["TransactionReview_stddev_pop_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	rating?:boolean | `@${string}`,
	transaction_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "TransactionReview" */
["TransactionReview_stddev_pop_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	rating?: ResolverInputTypes["order_by"] | undefined | null,
	transaction_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["TransactionReview_stddev_samp_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	rating?:boolean | `@${string}`,
	transaction_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "TransactionReview" */
["TransactionReview_stddev_samp_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	rating?: ResolverInputTypes["order_by"] | undefined | null,
	transaction_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "TransactionReview" */
["TransactionReview_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["TransactionReview_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["TransactionReview_stream_cursor_value_input"]: {
	comment?: string | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	rating?: number | undefined | null,
	transaction_id?: number | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate sum on columns */
["TransactionReview_sum_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	rating?:boolean | `@${string}`,
	transaction_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "TransactionReview" */
["TransactionReview_sum_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	rating?: ResolverInputTypes["order_by"] | undefined | null,
	transaction_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "TransactionReview" */
["TransactionReview_update_column"]:TransactionReview_update_column;
	["TransactionReview_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["TransactionReview_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["TransactionReview_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["TransactionReview_bool_exp"]
};
	/** aggregate var_pop on columns */
["TransactionReview_var_pop_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	rating?:boolean | `@${string}`,
	transaction_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "TransactionReview" */
["TransactionReview_var_pop_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	rating?: ResolverInputTypes["order_by"] | undefined | null,
	transaction_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["TransactionReview_var_samp_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	rating?:boolean | `@${string}`,
	transaction_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "TransactionReview" */
["TransactionReview_var_samp_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	rating?: ResolverInputTypes["order_by"] | undefined | null,
	transaction_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["TransactionReview_variance_fields"]: AliasType<{
	id?:boolean | `@${string}`,
	rating?:boolean | `@${string}`,
	transaction_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "TransactionReview" */
["TransactionReview_variance_order_by"]: {
	id?: ResolverInputTypes["order_by"] | undefined | null,
	rating?: ResolverInputTypes["order_by"] | undefined | null,
	transaction_id?: ResolverInputTypes["order_by"] | undefined | null
};
	["TransactionStatus"]:unknown;
	/** Boolean expression to compare columns of type "TransactionStatus". All fields are combined with logical 'AND'. */
["TransactionStatus_comparison_exp"]: {
	_eq?: ResolverInputTypes["TransactionStatus"] | undefined | null,
	_gt?: ResolverInputTypes["TransactionStatus"] | undefined | null,
	_gte?: ResolverInputTypes["TransactionStatus"] | undefined | null,
	_in?: Array<ResolverInputTypes["TransactionStatus"]> | undefined | null,
	_is_null?: boolean | undefined | null,
	_lt?: ResolverInputTypes["TransactionStatus"] | undefined | null,
	_lte?: ResolverInputTypes["TransactionStatus"] | undefined | null,
	_neq?: ResolverInputTypes["TransactionStatus"] | undefined | null,
	_nin?: Array<ResolverInputTypes["TransactionStatus"]> | undefined | null
};
	/** aggregated selection of "Transaction" */
["Transaction_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["Transaction_aggregate_fields"],
	nodes?:ResolverInputTypes["Transaction"],
		__typename?: boolean | `@${string}`
}>;
	["Transaction_aggregate_bool_exp"]: {
	count?: ResolverInputTypes["Transaction_aggregate_bool_exp_count"] | undefined | null
};
	["Transaction_aggregate_bool_exp_count"]: {
	arguments?: Array<ResolverInputTypes["Transaction_select_column"]> | undefined | null,
	distinct?: boolean | undefined | null,
	filter?: ResolverInputTypes["Transaction_bool_exp"] | undefined | null,
	predicate: ResolverInputTypes["Int_comparison_exp"]
};
	/** aggregate fields of "Transaction" */
["Transaction_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["Transaction_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["Transaction_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["Transaction_max_fields"],
	min?:ResolverInputTypes["Transaction_min_fields"],
	stddev?:ResolverInputTypes["Transaction_stddev_fields"],
	stddev_pop?:ResolverInputTypes["Transaction_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["Transaction_stddev_samp_fields"],
	sum?:ResolverInputTypes["Transaction_sum_fields"],
	var_pop?:ResolverInputTypes["Transaction_var_pop_fields"],
	var_samp?:ResolverInputTypes["Transaction_var_samp_fields"],
	variance?:ResolverInputTypes["Transaction_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** order by aggregate values of table "Transaction" */
["Transaction_aggregate_order_by"]: {
	avg?: ResolverInputTypes["Transaction_avg_order_by"] | undefined | null,
	count?: ResolverInputTypes["order_by"] | undefined | null,
	max?: ResolverInputTypes["Transaction_max_order_by"] | undefined | null,
	min?: ResolverInputTypes["Transaction_min_order_by"] | undefined | null,
	stddev?: ResolverInputTypes["Transaction_stddev_order_by"] | undefined | null,
	stddev_pop?: ResolverInputTypes["Transaction_stddev_pop_order_by"] | undefined | null,
	stddev_samp?: ResolverInputTypes["Transaction_stddev_samp_order_by"] | undefined | null,
	sum?: ResolverInputTypes["Transaction_sum_order_by"] | undefined | null,
	var_pop?: ResolverInputTypes["Transaction_var_pop_order_by"] | undefined | null,
	var_samp?: ResolverInputTypes["Transaction_var_samp_order_by"] | undefined | null,
	variance?: ResolverInputTypes["Transaction_variance_order_by"] | undefined | null
};
	/** input type for inserting array relation for remote table "Transaction" */
["Transaction_arr_rel_insert_input"]: {
	data: Array<ResolverInputTypes["Transaction_insert_input"]>,
	/** upsert condition */
	on_conflict?: ResolverInputTypes["Transaction_on_conflict"] | undefined | null
};
	/** aggregate avg on columns */
["Transaction_avg_fields"]: AliasType<{
	buy_order_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	sell_order_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by avg() on columns of table "Transaction" */
["Transaction_avg_order_by"]: {
	buy_order_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	profile_id?: ResolverInputTypes["order_by"] | undefined | null,
	sell_order_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Boolean expression to filter rows from the table "Transaction". All fields are combined with a logical 'AND'. */
["Transaction_bool_exp"]: {
	Order?: ResolverInputTypes["Order_bool_exp"] | undefined | null,
	TransactionReviews?: ResolverInputTypes["TransactionReview_bool_exp"] | undefined | null,
	TransactionReviews_aggregate?: ResolverInputTypes["TransactionReview_aggregate_bool_exp"] | undefined | null,
	_and?: Array<ResolverInputTypes["Transaction_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["Transaction_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["Transaction_bool_exp"]> | undefined | null,
	buy_order_id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	created_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	orderBySellOrderId?: ResolverInputTypes["Order_bool_exp"] | undefined | null,
	profile_id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	sell_order_id?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	status?: ResolverInputTypes["TransactionStatus_comparison_exp"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "Transaction" */
["Transaction_constraint"]:Transaction_constraint;
	/** input type for incrementing numeric columns in table "Transaction" */
["Transaction_inc_input"]: {
	buy_order_id?: number | undefined | null,
	id?: number | undefined | null,
	profile_id?: number | undefined | null,
	sell_order_id?: number | undefined | null
};
	/** input type for inserting data into table "Transaction" */
["Transaction_insert_input"]: {
	Order?: ResolverInputTypes["Order_obj_rel_insert_input"] | undefined | null,
	TransactionReviews?: ResolverInputTypes["TransactionReview_arr_rel_insert_input"] | undefined | null,
	buy_order_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	orderBySellOrderId?: ResolverInputTypes["Order_obj_rel_insert_input"] | undefined | null,
	profile_id?: number | undefined | null,
	sell_order_id?: number | undefined | null,
	status?: ResolverInputTypes["TransactionStatus"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate max on columns */
["Transaction_max_fields"]: AliasType<{
	buy_order_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	sell_order_id?:boolean | `@${string}`,
	status?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by max() on columns of table "Transaction" */
["Transaction_max_order_by"]: {
	buy_order_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	profile_id?: ResolverInputTypes["order_by"] | undefined | null,
	sell_order_id?: ResolverInputTypes["order_by"] | undefined | null,
	status?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate min on columns */
["Transaction_min_fields"]: AliasType<{
	buy_order_id?:boolean | `@${string}`,
	created_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	sell_order_id?:boolean | `@${string}`,
	status?:boolean | `@${string}`,
	updated_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by min() on columns of table "Transaction" */
["Transaction_min_order_by"]: {
	buy_order_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	profile_id?: ResolverInputTypes["order_by"] | undefined | null,
	sell_order_id?: ResolverInputTypes["order_by"] | undefined | null,
	status?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** response of any mutation on the table "Transaction" */
["Transaction_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["Transaction"],
		__typename?: boolean | `@${string}`
}>;
	/** input type for inserting object relation for remote table "Transaction" */
["Transaction_obj_rel_insert_input"]: {
	data: ResolverInputTypes["Transaction_insert_input"],
	/** upsert condition */
	on_conflict?: ResolverInputTypes["Transaction_on_conflict"] | undefined | null
};
	/** on_conflict condition type for table "Transaction" */
["Transaction_on_conflict"]: {
	constraint: ResolverInputTypes["Transaction_constraint"],
	update_columns: Array<ResolverInputTypes["Transaction_update_column"]>,
	where?: ResolverInputTypes["Transaction_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "Transaction". */
["Transaction_order_by"]: {
	Order?: ResolverInputTypes["Order_order_by"] | undefined | null,
	TransactionReviews_aggregate?: ResolverInputTypes["TransactionReview_aggregate_order_by"] | undefined | null,
	buy_order_id?: ResolverInputTypes["order_by"] | undefined | null,
	created_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	orderBySellOrderId?: ResolverInputTypes["Order_order_by"] | undefined | null,
	profile_id?: ResolverInputTypes["order_by"] | undefined | null,
	sell_order_id?: ResolverInputTypes["order_by"] | undefined | null,
	status?: ResolverInputTypes["order_by"] | undefined | null,
	updated_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: Transaction */
["Transaction_pk_columns_input"]: {
	id: number
};
	/** select columns of table "Transaction" */
["Transaction_select_column"]:Transaction_select_column;
	/** input type for updating data in table "Transaction" */
["Transaction_set_input"]: {
	buy_order_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	profile_id?: number | undefined | null,
	sell_order_id?: number | undefined | null,
	status?: ResolverInputTypes["TransactionStatus"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate stddev on columns */
["Transaction_stddev_fields"]: AliasType<{
	buy_order_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	sell_order_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev() on columns of table "Transaction" */
["Transaction_stddev_order_by"]: {
	buy_order_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	profile_id?: ResolverInputTypes["order_by"] | undefined | null,
	sell_order_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_pop on columns */
["Transaction_stddev_pop_fields"]: AliasType<{
	buy_order_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	sell_order_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_pop() on columns of table "Transaction" */
["Transaction_stddev_pop_order_by"]: {
	buy_order_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	profile_id?: ResolverInputTypes["order_by"] | undefined | null,
	sell_order_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate stddev_samp on columns */
["Transaction_stddev_samp_fields"]: AliasType<{
	buy_order_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	sell_order_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by stddev_samp() on columns of table "Transaction" */
["Transaction_stddev_samp_order_by"]: {
	buy_order_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	profile_id?: ResolverInputTypes["order_by"] | undefined | null,
	sell_order_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** Streaming cursor of the table "Transaction" */
["Transaction_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["Transaction_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["Transaction_stream_cursor_value_input"]: {
	buy_order_id?: number | undefined | null,
	created_at?: ResolverInputTypes["timestamp"] | undefined | null,
	id?: number | undefined | null,
	profile_id?: number | undefined | null,
	sell_order_id?: number | undefined | null,
	status?: ResolverInputTypes["TransactionStatus"] | undefined | null,
	updated_at?: ResolverInputTypes["timestamp"] | undefined | null
};
	/** aggregate sum on columns */
["Transaction_sum_fields"]: AliasType<{
	buy_order_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	sell_order_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by sum() on columns of table "Transaction" */
["Transaction_sum_order_by"]: {
	buy_order_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	profile_id?: ResolverInputTypes["order_by"] | undefined | null,
	sell_order_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** update columns of table "Transaction" */
["Transaction_update_column"]:Transaction_update_column;
	["Transaction_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Transaction_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Transaction_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["Transaction_bool_exp"]
};
	/** aggregate var_pop on columns */
["Transaction_var_pop_fields"]: AliasType<{
	buy_order_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	sell_order_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_pop() on columns of table "Transaction" */
["Transaction_var_pop_order_by"]: {
	buy_order_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	profile_id?: ResolverInputTypes["order_by"] | undefined | null,
	sell_order_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate var_samp on columns */
["Transaction_var_samp_fields"]: AliasType<{
	buy_order_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	sell_order_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by var_samp() on columns of table "Transaction" */
["Transaction_var_samp_order_by"]: {
	buy_order_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	profile_id?: ResolverInputTypes["order_by"] | undefined | null,
	sell_order_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** aggregate variance on columns */
["Transaction_variance_fields"]: AliasType<{
	buy_order_id?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	profile_id?:boolean | `@${string}`,
	sell_order_id?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** order by variance() on columns of table "Transaction" */
["Transaction_variance_order_by"]: {
	buy_order_id?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	profile_id?: ResolverInputTypes["order_by"] | undefined | null,
	sell_order_id?: ResolverInputTypes["order_by"] | undefined | null
};
	/** columns and relationships of "_prisma_migrations" */
["_prisma_migrations"]: AliasType<{
	applied_steps_count?:boolean | `@${string}`,
	checksum?:boolean | `@${string}`,
	finished_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	logs?:boolean | `@${string}`,
	migration_name?:boolean | `@${string}`,
	rolled_back_at?:boolean | `@${string}`,
	started_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregated selection of "_prisma_migrations" */
["_prisma_migrations_aggregate"]: AliasType<{
	aggregate?:ResolverInputTypes["_prisma_migrations_aggregate_fields"],
	nodes?:ResolverInputTypes["_prisma_migrations"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate fields of "_prisma_migrations" */
["_prisma_migrations_aggregate_fields"]: AliasType<{
	avg?:ResolverInputTypes["_prisma_migrations_avg_fields"],
count?: [{	columns?: Array<ResolverInputTypes["_prisma_migrations_select_column"]> | undefined | null,	distinct?: boolean | undefined | null},boolean | `@${string}`],
	max?:ResolverInputTypes["_prisma_migrations_max_fields"],
	min?:ResolverInputTypes["_prisma_migrations_min_fields"],
	stddev?:ResolverInputTypes["_prisma_migrations_stddev_fields"],
	stddev_pop?:ResolverInputTypes["_prisma_migrations_stddev_pop_fields"],
	stddev_samp?:ResolverInputTypes["_prisma_migrations_stddev_samp_fields"],
	sum?:ResolverInputTypes["_prisma_migrations_sum_fields"],
	var_pop?:ResolverInputTypes["_prisma_migrations_var_pop_fields"],
	var_samp?:ResolverInputTypes["_prisma_migrations_var_samp_fields"],
	variance?:ResolverInputTypes["_prisma_migrations_variance_fields"],
		__typename?: boolean | `@${string}`
}>;
	/** aggregate avg on columns */
["_prisma_migrations_avg_fields"]: AliasType<{
	applied_steps_count?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Boolean expression to filter rows from the table "_prisma_migrations". All fields are combined with a logical 'AND'. */
["_prisma_migrations_bool_exp"]: {
	_and?: Array<ResolverInputTypes["_prisma_migrations_bool_exp"]> | undefined | null,
	_not?: ResolverInputTypes["_prisma_migrations_bool_exp"] | undefined | null,
	_or?: Array<ResolverInputTypes["_prisma_migrations_bool_exp"]> | undefined | null,
	applied_steps_count?: ResolverInputTypes["Int_comparison_exp"] | undefined | null,
	checksum?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	finished_at?: ResolverInputTypes["timestamptz_comparison_exp"] | undefined | null,
	id?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	logs?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	migration_name?: ResolverInputTypes["String_comparison_exp"] | undefined | null,
	rolled_back_at?: ResolverInputTypes["timestamptz_comparison_exp"] | undefined | null,
	started_at?: ResolverInputTypes["timestamptz_comparison_exp"] | undefined | null
};
	/** unique or primary key constraints on table "_prisma_migrations" */
["_prisma_migrations_constraint"]:_prisma_migrations_constraint;
	/** input type for incrementing numeric columns in table "_prisma_migrations" */
["_prisma_migrations_inc_input"]: {
	applied_steps_count?: number | undefined | null
};
	/** input type for inserting data into table "_prisma_migrations" */
["_prisma_migrations_insert_input"]: {
	applied_steps_count?: number | undefined | null,
	checksum?: string | undefined | null,
	finished_at?: ResolverInputTypes["timestamptz"] | undefined | null,
	id?: string | undefined | null,
	logs?: string | undefined | null,
	migration_name?: string | undefined | null,
	rolled_back_at?: ResolverInputTypes["timestamptz"] | undefined | null,
	started_at?: ResolverInputTypes["timestamptz"] | undefined | null
};
	/** aggregate max on columns */
["_prisma_migrations_max_fields"]: AliasType<{
	applied_steps_count?:boolean | `@${string}`,
	checksum?:boolean | `@${string}`,
	finished_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	logs?:boolean | `@${string}`,
	migration_name?:boolean | `@${string}`,
	rolled_back_at?:boolean | `@${string}`,
	started_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate min on columns */
["_prisma_migrations_min_fields"]: AliasType<{
	applied_steps_count?:boolean | `@${string}`,
	checksum?:boolean | `@${string}`,
	finished_at?:boolean | `@${string}`,
	id?:boolean | `@${string}`,
	logs?:boolean | `@${string}`,
	migration_name?:boolean | `@${string}`,
	rolled_back_at?:boolean | `@${string}`,
	started_at?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** response of any mutation on the table "_prisma_migrations" */
["_prisma_migrations_mutation_response"]: AliasType<{
	/** number of rows affected by the mutation */
	affected_rows?:boolean | `@${string}`,
	/** data from the rows affected by the mutation */
	returning?:ResolverInputTypes["_prisma_migrations"],
		__typename?: boolean | `@${string}`
}>;
	/** on_conflict condition type for table "_prisma_migrations" */
["_prisma_migrations_on_conflict"]: {
	constraint: ResolverInputTypes["_prisma_migrations_constraint"],
	update_columns: Array<ResolverInputTypes["_prisma_migrations_update_column"]>,
	where?: ResolverInputTypes["_prisma_migrations_bool_exp"] | undefined | null
};
	/** Ordering options when selecting data from "_prisma_migrations". */
["_prisma_migrations_order_by"]: {
	applied_steps_count?: ResolverInputTypes["order_by"] | undefined | null,
	checksum?: ResolverInputTypes["order_by"] | undefined | null,
	finished_at?: ResolverInputTypes["order_by"] | undefined | null,
	id?: ResolverInputTypes["order_by"] | undefined | null,
	logs?: ResolverInputTypes["order_by"] | undefined | null,
	migration_name?: ResolverInputTypes["order_by"] | undefined | null,
	rolled_back_at?: ResolverInputTypes["order_by"] | undefined | null,
	started_at?: ResolverInputTypes["order_by"] | undefined | null
};
	/** primary key columns input for table: _prisma_migrations */
["_prisma_migrations_pk_columns_input"]: {
	id: string
};
	/** select columns of table "_prisma_migrations" */
["_prisma_migrations_select_column"]:_prisma_migrations_select_column;
	/** input type for updating data in table "_prisma_migrations" */
["_prisma_migrations_set_input"]: {
	applied_steps_count?: number | undefined | null,
	checksum?: string | undefined | null,
	finished_at?: ResolverInputTypes["timestamptz"] | undefined | null,
	id?: string | undefined | null,
	logs?: string | undefined | null,
	migration_name?: string | undefined | null,
	rolled_back_at?: ResolverInputTypes["timestamptz"] | undefined | null,
	started_at?: ResolverInputTypes["timestamptz"] | undefined | null
};
	/** aggregate stddev on columns */
["_prisma_migrations_stddev_fields"]: AliasType<{
	applied_steps_count?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_pop on columns */
["_prisma_migrations_stddev_pop_fields"]: AliasType<{
	applied_steps_count?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate stddev_samp on columns */
["_prisma_migrations_stddev_samp_fields"]: AliasType<{
	applied_steps_count?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** Streaming cursor of the table "_prisma_migrations" */
["_prisma_migrations_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ResolverInputTypes["_prisma_migrations_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ResolverInputTypes["cursor_ordering"] | undefined | null
};
	/** Initial value of the column from where the streaming should start */
["_prisma_migrations_stream_cursor_value_input"]: {
	applied_steps_count?: number | undefined | null,
	checksum?: string | undefined | null,
	finished_at?: ResolverInputTypes["timestamptz"] | undefined | null,
	id?: string | undefined | null,
	logs?: string | undefined | null,
	migration_name?: string | undefined | null,
	rolled_back_at?: ResolverInputTypes["timestamptz"] | undefined | null,
	started_at?: ResolverInputTypes["timestamptz"] | undefined | null
};
	/** aggregate sum on columns */
["_prisma_migrations_sum_fields"]: AliasType<{
	applied_steps_count?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** update columns of table "_prisma_migrations" */
["_prisma_migrations_update_column"]:_prisma_migrations_update_column;
	["_prisma_migrations_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["_prisma_migrations_inc_input"] | undefined | null,
	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["_prisma_migrations_set_input"] | undefined | null,
	/** filter the rows which have to be updated */
	where: ResolverInputTypes["_prisma_migrations_bool_exp"]
};
	/** aggregate var_pop on columns */
["_prisma_migrations_var_pop_fields"]: AliasType<{
	applied_steps_count?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate var_samp on columns */
["_prisma_migrations_var_samp_fields"]: AliasType<{
	applied_steps_count?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** aggregate variance on columns */
["_prisma_migrations_variance_fields"]: AliasType<{
	applied_steps_count?:boolean | `@${string}`,
		__typename?: boolean | `@${string}`
}>;
	/** ordering argument of a cursor */
["cursor_ordering"]:cursor_ordering;
	["float8"]:unknown;
	/** Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'. */
["float8_comparison_exp"]: {
	_eq?: ResolverInputTypes["float8"] | undefined | null,
	_gt?: ResolverInputTypes["float8"] | undefined | null,
	_gte?: ResolverInputTypes["float8"] | undefined | null,
	_in?: Array<ResolverInputTypes["float8"]> | undefined | null,
	_is_null?: boolean | undefined | null,
	_lt?: ResolverInputTypes["float8"] | undefined | null,
	_lte?: ResolverInputTypes["float8"] | undefined | null,
	_neq?: ResolverInputTypes["float8"] | undefined | null,
	_nin?: Array<ResolverInputTypes["float8"]> | undefined | null
};
	/** mutation root */
["mutation_root"]: AliasType<{
delete_Business?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["Business_bool_exp"]},ResolverInputTypes["Business_mutation_response"]],
delete_BusinessProduct?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["BusinessProduct_bool_exp"]},ResolverInputTypes["BusinessProduct_mutation_response"]],
delete_BusinessProduct_by_pk?: [{	id: number},ResolverInputTypes["BusinessProduct"]],
delete_BusinessWorker?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["BusinessWorker_bool_exp"]},ResolverInputTypes["BusinessWorker_mutation_response"]],
delete_BusinessWorker_by_pk?: [{	id: number},ResolverInputTypes["BusinessWorker"]],
delete_Business_by_pk?: [{	id: number},ResolverInputTypes["Business"]],
delete_Category?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["Category_bool_exp"]},ResolverInputTypes["Category_mutation_response"]],
delete_Category_by_pk?: [{	id: number},ResolverInputTypes["Category"]],
delete_Certificate?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["Certificate_bool_exp"]},ResolverInputTypes["Certificate_mutation_response"]],
delete_CertificateCategory?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["CertificateCategory_bool_exp"]},ResolverInputTypes["CertificateCategory_mutation_response"]],
delete_CertificateCategory_by_pk?: [{	id: number},ResolverInputTypes["CertificateCategory"]],
delete_CertificateClaim?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["CertificateClaim_bool_exp"]},ResolverInputTypes["CertificateClaim_mutation_response"]],
delete_CertificateClaim_by_pk?: [{	id: number},ResolverInputTypes["CertificateClaim"]],
delete_Certificate_by_pk?: [{	id: number},ResolverInputTypes["Certificate"]],
delete_Offer?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["Offer_bool_exp"]},ResolverInputTypes["Offer_mutation_response"]],
delete_Offer_by_pk?: [{	id: number},ResolverInputTypes["Offer"]],
delete_Order?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["Order_bool_exp"]},ResolverInputTypes["Order_mutation_response"]],
delete_Order_by_pk?: [{	id: number},ResolverInputTypes["Order"]],
delete_Product?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["Product_bool_exp"]},ResolverInputTypes["Product_mutation_response"]],
delete_Product_by_pk?: [{	id: number},ResolverInputTypes["Product"]],
delete_Profile?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["Profile_bool_exp"]},ResolverInputTypes["Profile_mutation_response"]],
delete_Profile_by_pk?: [{	id: number},ResolverInputTypes["Profile"]],
delete_Transaction?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["Transaction_bool_exp"]},ResolverInputTypes["Transaction_mutation_response"]],
delete_TransactionReview?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["TransactionReview_bool_exp"]},ResolverInputTypes["TransactionReview_mutation_response"]],
delete_TransactionReview_by_pk?: [{	id: number},ResolverInputTypes["TransactionReview"]],
delete_Transaction_by_pk?: [{	id: number},ResolverInputTypes["Transaction"]],
delete__prisma_migrations?: [{	/** filter the rows which have to be deleted */
	where: ResolverInputTypes["_prisma_migrations_bool_exp"]},ResolverInputTypes["_prisma_migrations_mutation_response"]],
delete__prisma_migrations_by_pk?: [{	id: string},ResolverInputTypes["_prisma_migrations"]],
insert_Business?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["Business_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["Business_on_conflict"] | undefined | null},ResolverInputTypes["Business_mutation_response"]],
insert_BusinessProduct?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["BusinessProduct_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["BusinessProduct_on_conflict"] | undefined | null},ResolverInputTypes["BusinessProduct_mutation_response"]],
insert_BusinessProduct_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["BusinessProduct_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["BusinessProduct_on_conflict"] | undefined | null},ResolverInputTypes["BusinessProduct"]],
insert_BusinessWorker?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["BusinessWorker_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["BusinessWorker_on_conflict"] | undefined | null},ResolverInputTypes["BusinessWorker_mutation_response"]],
insert_BusinessWorker_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["BusinessWorker_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["BusinessWorker_on_conflict"] | undefined | null},ResolverInputTypes["BusinessWorker"]],
insert_Business_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["Business_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["Business_on_conflict"] | undefined | null},ResolverInputTypes["Business"]],
insert_Category?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["Category_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["Category_on_conflict"] | undefined | null},ResolverInputTypes["Category_mutation_response"]],
insert_Category_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["Category_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["Category_on_conflict"] | undefined | null},ResolverInputTypes["Category"]],
insert_Certificate?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["Certificate_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["Certificate_on_conflict"] | undefined | null},ResolverInputTypes["Certificate_mutation_response"]],
insert_CertificateCategory?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["CertificateCategory_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["CertificateCategory_on_conflict"] | undefined | null},ResolverInputTypes["CertificateCategory_mutation_response"]],
insert_CertificateCategory_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["CertificateCategory_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["CertificateCategory_on_conflict"] | undefined | null},ResolverInputTypes["CertificateCategory"]],
insert_CertificateClaim?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["CertificateClaim_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["CertificateClaim_on_conflict"] | undefined | null},ResolverInputTypes["CertificateClaim_mutation_response"]],
insert_CertificateClaim_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["CertificateClaim_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["CertificateClaim_on_conflict"] | undefined | null},ResolverInputTypes["CertificateClaim"]],
insert_Certificate_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["Certificate_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["Certificate_on_conflict"] | undefined | null},ResolverInputTypes["Certificate"]],
insert_Offer?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["Offer_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["Offer_on_conflict"] | undefined | null},ResolverInputTypes["Offer_mutation_response"]],
insert_Offer_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["Offer_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["Offer_on_conflict"] | undefined | null},ResolverInputTypes["Offer"]],
insert_Order?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["Order_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["Order_on_conflict"] | undefined | null},ResolverInputTypes["Order_mutation_response"]],
insert_Order_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["Order_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["Order_on_conflict"] | undefined | null},ResolverInputTypes["Order"]],
insert_Product?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["Product_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["Product_on_conflict"] | undefined | null},ResolverInputTypes["Product_mutation_response"]],
insert_Product_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["Product_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["Product_on_conflict"] | undefined | null},ResolverInputTypes["Product"]],
insert_Profile?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["Profile_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["Profile_on_conflict"] | undefined | null},ResolverInputTypes["Profile_mutation_response"]],
insert_Profile_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["Profile_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["Profile_on_conflict"] | undefined | null},ResolverInputTypes["Profile"]],
insert_Transaction?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["Transaction_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["Transaction_on_conflict"] | undefined | null},ResolverInputTypes["Transaction_mutation_response"]],
insert_TransactionReview?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["TransactionReview_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["TransactionReview_on_conflict"] | undefined | null},ResolverInputTypes["TransactionReview_mutation_response"]],
insert_TransactionReview_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["TransactionReview_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["TransactionReview_on_conflict"] | undefined | null},ResolverInputTypes["TransactionReview"]],
insert_Transaction_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["Transaction_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["Transaction_on_conflict"] | undefined | null},ResolverInputTypes["Transaction"]],
insert__prisma_migrations?: [{	/** the rows to be inserted */
	objects: Array<ResolverInputTypes["_prisma_migrations_insert_input"]>,	/** upsert condition */
	on_conflict?: ResolverInputTypes["_prisma_migrations_on_conflict"] | undefined | null},ResolverInputTypes["_prisma_migrations_mutation_response"]],
insert__prisma_migrations_one?: [{	/** the row to be inserted */
	object: ResolverInputTypes["_prisma_migrations_insert_input"],	/** upsert condition */
	on_conflict?: ResolverInputTypes["_prisma_migrations_on_conflict"] | undefined | null},ResolverInputTypes["_prisma_migrations"]],
update_Business?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Business_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Business_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["Business_bool_exp"]},ResolverInputTypes["Business_mutation_response"]],
update_BusinessProduct?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["BusinessProduct_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["BusinessProduct_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["BusinessProduct_bool_exp"]},ResolverInputTypes["BusinessProduct_mutation_response"]],
update_BusinessProduct_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["BusinessProduct_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["BusinessProduct_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["BusinessProduct_pk_columns_input"]},ResolverInputTypes["BusinessProduct"]],
update_BusinessProduct_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["BusinessProduct_updates"]>},ResolverInputTypes["BusinessProduct_mutation_response"]],
update_BusinessWorker?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["BusinessWorker_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["BusinessWorker_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["BusinessWorker_bool_exp"]},ResolverInputTypes["BusinessWorker_mutation_response"]],
update_BusinessWorker_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["BusinessWorker_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["BusinessWorker_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["BusinessWorker_pk_columns_input"]},ResolverInputTypes["BusinessWorker"]],
update_BusinessWorker_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["BusinessWorker_updates"]>},ResolverInputTypes["BusinessWorker_mutation_response"]],
update_Business_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Business_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Business_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["Business_pk_columns_input"]},ResolverInputTypes["Business"]],
update_Business_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["Business_updates"]>},ResolverInputTypes["Business_mutation_response"]],
update_Category?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Category_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Category_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["Category_bool_exp"]},ResolverInputTypes["Category_mutation_response"]],
update_Category_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Category_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Category_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["Category_pk_columns_input"]},ResolverInputTypes["Category"]],
update_Category_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["Category_updates"]>},ResolverInputTypes["Category_mutation_response"]],
update_Certificate?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Certificate_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Certificate_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["Certificate_bool_exp"]},ResolverInputTypes["Certificate_mutation_response"]],
update_CertificateCategory?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["CertificateCategory_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["CertificateCategory_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["CertificateCategory_bool_exp"]},ResolverInputTypes["CertificateCategory_mutation_response"]],
update_CertificateCategory_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["CertificateCategory_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["CertificateCategory_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["CertificateCategory_pk_columns_input"]},ResolverInputTypes["CertificateCategory"]],
update_CertificateCategory_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["CertificateCategory_updates"]>},ResolverInputTypes["CertificateCategory_mutation_response"]],
update_CertificateClaim?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["CertificateClaim_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["CertificateClaim_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["CertificateClaim_bool_exp"]},ResolverInputTypes["CertificateClaim_mutation_response"]],
update_CertificateClaim_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["CertificateClaim_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["CertificateClaim_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["CertificateClaim_pk_columns_input"]},ResolverInputTypes["CertificateClaim"]],
update_CertificateClaim_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["CertificateClaim_updates"]>},ResolverInputTypes["CertificateClaim_mutation_response"]],
update_Certificate_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Certificate_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Certificate_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["Certificate_pk_columns_input"]},ResolverInputTypes["Certificate"]],
update_Certificate_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["Certificate_updates"]>},ResolverInputTypes["Certificate_mutation_response"]],
update_Offer?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Offer_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Offer_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["Offer_bool_exp"]},ResolverInputTypes["Offer_mutation_response"]],
update_Offer_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Offer_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Offer_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["Offer_pk_columns_input"]},ResolverInputTypes["Offer"]],
update_Offer_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["Offer_updates"]>},ResolverInputTypes["Offer_mutation_response"]],
update_Order?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Order_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Order_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["Order_bool_exp"]},ResolverInputTypes["Order_mutation_response"]],
update_Order_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Order_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Order_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["Order_pk_columns_input"]},ResolverInputTypes["Order"]],
update_Order_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["Order_updates"]>},ResolverInputTypes["Order_mutation_response"]],
update_Product?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Product_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Product_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["Product_bool_exp"]},ResolverInputTypes["Product_mutation_response"]],
update_Product_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Product_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Product_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["Product_pk_columns_input"]},ResolverInputTypes["Product"]],
update_Product_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["Product_updates"]>},ResolverInputTypes["Product_mutation_response"]],
update_Profile?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Profile_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Profile_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["Profile_bool_exp"]},ResolverInputTypes["Profile_mutation_response"]],
update_Profile_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Profile_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Profile_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["Profile_pk_columns_input"]},ResolverInputTypes["Profile"]],
update_Profile_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["Profile_updates"]>},ResolverInputTypes["Profile_mutation_response"]],
update_Transaction?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Transaction_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Transaction_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["Transaction_bool_exp"]},ResolverInputTypes["Transaction_mutation_response"]],
update_TransactionReview?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["TransactionReview_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["TransactionReview_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["TransactionReview_bool_exp"]},ResolverInputTypes["TransactionReview_mutation_response"]],
update_TransactionReview_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["TransactionReview_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["TransactionReview_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["TransactionReview_pk_columns_input"]},ResolverInputTypes["TransactionReview"]],
update_TransactionReview_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["TransactionReview_updates"]>},ResolverInputTypes["TransactionReview_mutation_response"]],
update_Transaction_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["Transaction_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["Transaction_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["Transaction_pk_columns_input"]},ResolverInputTypes["Transaction"]],
update_Transaction_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["Transaction_updates"]>},ResolverInputTypes["Transaction_mutation_response"]],
update__prisma_migrations?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["_prisma_migrations_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["_prisma_migrations_set_input"] | undefined | null,	/** filter the rows which have to be updated */
	where: ResolverInputTypes["_prisma_migrations_bool_exp"]},ResolverInputTypes["_prisma_migrations_mutation_response"]],
update__prisma_migrations_by_pk?: [{	/** increments the numeric columns with given value of the filtered values */
	_inc?: ResolverInputTypes["_prisma_migrations_inc_input"] | undefined | null,	/** sets the columns of the filtered rows to the given values */
	_set?: ResolverInputTypes["_prisma_migrations_set_input"] | undefined | null,	pk_columns: ResolverInputTypes["_prisma_migrations_pk_columns_input"]},ResolverInputTypes["_prisma_migrations"]],
update__prisma_migrations_many?: [{	/** updates to execute, in order */
	updates: Array<ResolverInputTypes["_prisma_migrations_updates"]>},ResolverInputTypes["_prisma_migrations_mutation_response"]],
		__typename?: boolean | `@${string}`
}>;
	/** column ordering options */
["order_by"]:order_by;
	["query_root"]: AliasType<{
Business?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Business_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Business_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Business_bool_exp"] | undefined | null},ResolverInputTypes["Business"]],
BusinessProduct?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["BusinessProduct_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["BusinessProduct_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["BusinessProduct_bool_exp"] | undefined | null},ResolverInputTypes["BusinessProduct"]],
BusinessProduct_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["BusinessProduct_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["BusinessProduct_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["BusinessProduct_bool_exp"] | undefined | null},ResolverInputTypes["BusinessProduct_aggregate"]],
BusinessProduct_by_pk?: [{	id: number},ResolverInputTypes["BusinessProduct"]],
BusinessWorker?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["BusinessWorker_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["BusinessWorker_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["BusinessWorker_bool_exp"] | undefined | null},ResolverInputTypes["BusinessWorker"]],
BusinessWorker_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["BusinessWorker_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["BusinessWorker_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["BusinessWorker_bool_exp"] | undefined | null},ResolverInputTypes["BusinessWorker_aggregate"]],
BusinessWorker_by_pk?: [{	id: number},ResolverInputTypes["BusinessWorker"]],
Business_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Business_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Business_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Business_bool_exp"] | undefined | null},ResolverInputTypes["Business_aggregate"]],
Business_by_pk?: [{	id: number},ResolverInputTypes["Business"]],
Category?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Category_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Category_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Category_bool_exp"] | undefined | null},ResolverInputTypes["Category"]],
Category_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Category_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Category_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Category_bool_exp"] | undefined | null},ResolverInputTypes["Category_aggregate"]],
Category_by_pk?: [{	id: number},ResolverInputTypes["Category"]],
Certificate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Certificate_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Certificate_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Certificate_bool_exp"] | undefined | null},ResolverInputTypes["Certificate"]],
CertificateCategory?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["CertificateCategory_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["CertificateCategory_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["CertificateCategory_bool_exp"] | undefined | null},ResolverInputTypes["CertificateCategory"]],
CertificateCategory_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["CertificateCategory_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["CertificateCategory_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["CertificateCategory_bool_exp"] | undefined | null},ResolverInputTypes["CertificateCategory_aggregate"]],
CertificateCategory_by_pk?: [{	id: number},ResolverInputTypes["CertificateCategory"]],
CertificateClaim?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["CertificateClaim_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["CertificateClaim_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["CertificateClaim_bool_exp"] | undefined | null},ResolverInputTypes["CertificateClaim"]],
CertificateClaim_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["CertificateClaim_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["CertificateClaim_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["CertificateClaim_bool_exp"] | undefined | null},ResolverInputTypes["CertificateClaim_aggregate"]],
CertificateClaim_by_pk?: [{	id: number},ResolverInputTypes["CertificateClaim"]],
Certificate_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Certificate_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Certificate_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Certificate_bool_exp"] | undefined | null},ResolverInputTypes["Certificate_aggregate"]],
Certificate_by_pk?: [{	id: number},ResolverInputTypes["Certificate"]],
Offer?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Offer_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Offer_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Offer_bool_exp"] | undefined | null},ResolverInputTypes["Offer"]],
Offer_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Offer_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Offer_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Offer_bool_exp"] | undefined | null},ResolverInputTypes["Offer_aggregate"]],
Offer_by_pk?: [{	id: number},ResolverInputTypes["Offer"]],
Order?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Order_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Order_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Order_bool_exp"] | undefined | null},ResolverInputTypes["Order"]],
Order_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Order_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Order_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Order_bool_exp"] | undefined | null},ResolverInputTypes["Order_aggregate"]],
Order_by_pk?: [{	id: number},ResolverInputTypes["Order"]],
Product?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Product_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Product_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Product_bool_exp"] | undefined | null},ResolverInputTypes["Product"]],
Product_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Product_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Product_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Product_bool_exp"] | undefined | null},ResolverInputTypes["Product_aggregate"]],
Product_by_pk?: [{	id: number},ResolverInputTypes["Product"]],
Profile?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Profile_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Profile_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Profile_bool_exp"] | undefined | null},ResolverInputTypes["Profile"]],
Profile_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Profile_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Profile_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Profile_bool_exp"] | undefined | null},ResolverInputTypes["Profile_aggregate"]],
Profile_by_pk?: [{	id: number},ResolverInputTypes["Profile"]],
Transaction?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Transaction_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Transaction_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Transaction_bool_exp"] | undefined | null},ResolverInputTypes["Transaction"]],
TransactionReview?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["TransactionReview_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["TransactionReview_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["TransactionReview_bool_exp"] | undefined | null},ResolverInputTypes["TransactionReview"]],
TransactionReview_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["TransactionReview_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["TransactionReview_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["TransactionReview_bool_exp"] | undefined | null},ResolverInputTypes["TransactionReview_aggregate"]],
TransactionReview_by_pk?: [{	id: number},ResolverInputTypes["TransactionReview"]],
Transaction_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Transaction_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Transaction_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Transaction_bool_exp"] | undefined | null},ResolverInputTypes["Transaction_aggregate"]],
Transaction_by_pk?: [{	id: number},ResolverInputTypes["Transaction"]],
_prisma_migrations?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["_prisma_migrations_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["_prisma_migrations_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["_prisma_migrations_bool_exp"] | undefined | null},ResolverInputTypes["_prisma_migrations"]],
_prisma_migrations_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["_prisma_migrations_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["_prisma_migrations_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["_prisma_migrations_bool_exp"] | undefined | null},ResolverInputTypes["_prisma_migrations_aggregate"]],
_prisma_migrations_by_pk?: [{	id: string},ResolverInputTypes["_prisma_migrations"]],
		__typename?: boolean | `@${string}`
}>;
	["subscription_root"]: AliasType<{
Business?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Business_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Business_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Business_bool_exp"] | undefined | null},ResolverInputTypes["Business"]],
BusinessProduct?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["BusinessProduct_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["BusinessProduct_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["BusinessProduct_bool_exp"] | undefined | null},ResolverInputTypes["BusinessProduct"]],
BusinessProduct_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["BusinessProduct_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["BusinessProduct_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["BusinessProduct_bool_exp"] | undefined | null},ResolverInputTypes["BusinessProduct_aggregate"]],
BusinessProduct_by_pk?: [{	id: number},ResolverInputTypes["BusinessProduct"]],
BusinessProduct_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["BusinessProduct_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["BusinessProduct_bool_exp"] | undefined | null},ResolverInputTypes["BusinessProduct"]],
BusinessWorker?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["BusinessWorker_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["BusinessWorker_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["BusinessWorker_bool_exp"] | undefined | null},ResolverInputTypes["BusinessWorker"]],
BusinessWorker_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["BusinessWorker_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["BusinessWorker_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["BusinessWorker_bool_exp"] | undefined | null},ResolverInputTypes["BusinessWorker_aggregate"]],
BusinessWorker_by_pk?: [{	id: number},ResolverInputTypes["BusinessWorker"]],
BusinessWorker_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["BusinessWorker_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["BusinessWorker_bool_exp"] | undefined | null},ResolverInputTypes["BusinessWorker"]],
Business_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Business_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Business_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Business_bool_exp"] | undefined | null},ResolverInputTypes["Business_aggregate"]],
Business_by_pk?: [{	id: number},ResolverInputTypes["Business"]],
Business_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["Business_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["Business_bool_exp"] | undefined | null},ResolverInputTypes["Business"]],
Category?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Category_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Category_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Category_bool_exp"] | undefined | null},ResolverInputTypes["Category"]],
Category_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Category_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Category_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Category_bool_exp"] | undefined | null},ResolverInputTypes["Category_aggregate"]],
Category_by_pk?: [{	id: number},ResolverInputTypes["Category"]],
Category_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["Category_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["Category_bool_exp"] | undefined | null},ResolverInputTypes["Category"]],
Certificate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Certificate_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Certificate_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Certificate_bool_exp"] | undefined | null},ResolverInputTypes["Certificate"]],
CertificateCategory?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["CertificateCategory_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["CertificateCategory_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["CertificateCategory_bool_exp"] | undefined | null},ResolverInputTypes["CertificateCategory"]],
CertificateCategory_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["CertificateCategory_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["CertificateCategory_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["CertificateCategory_bool_exp"] | undefined | null},ResolverInputTypes["CertificateCategory_aggregate"]],
CertificateCategory_by_pk?: [{	id: number},ResolverInputTypes["CertificateCategory"]],
CertificateCategory_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["CertificateCategory_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["CertificateCategory_bool_exp"] | undefined | null},ResolverInputTypes["CertificateCategory"]],
CertificateClaim?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["CertificateClaim_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["CertificateClaim_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["CertificateClaim_bool_exp"] | undefined | null},ResolverInputTypes["CertificateClaim"]],
CertificateClaim_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["CertificateClaim_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["CertificateClaim_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["CertificateClaim_bool_exp"] | undefined | null},ResolverInputTypes["CertificateClaim_aggregate"]],
CertificateClaim_by_pk?: [{	id: number},ResolverInputTypes["CertificateClaim"]],
CertificateClaim_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["CertificateClaim_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["CertificateClaim_bool_exp"] | undefined | null},ResolverInputTypes["CertificateClaim"]],
Certificate_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Certificate_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Certificate_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Certificate_bool_exp"] | undefined | null},ResolverInputTypes["Certificate_aggregate"]],
Certificate_by_pk?: [{	id: number},ResolverInputTypes["Certificate"]],
Certificate_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["Certificate_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["Certificate_bool_exp"] | undefined | null},ResolverInputTypes["Certificate"]],
Offer?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Offer_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Offer_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Offer_bool_exp"] | undefined | null},ResolverInputTypes["Offer"]],
Offer_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Offer_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Offer_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Offer_bool_exp"] | undefined | null},ResolverInputTypes["Offer_aggregate"]],
Offer_by_pk?: [{	id: number},ResolverInputTypes["Offer"]],
Offer_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["Offer_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["Offer_bool_exp"] | undefined | null},ResolverInputTypes["Offer"]],
Order?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Order_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Order_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Order_bool_exp"] | undefined | null},ResolverInputTypes["Order"]],
Order_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Order_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Order_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Order_bool_exp"] | undefined | null},ResolverInputTypes["Order_aggregate"]],
Order_by_pk?: [{	id: number},ResolverInputTypes["Order"]],
Order_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["Order_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["Order_bool_exp"] | undefined | null},ResolverInputTypes["Order"]],
Product?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Product_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Product_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Product_bool_exp"] | undefined | null},ResolverInputTypes["Product"]],
Product_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Product_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Product_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Product_bool_exp"] | undefined | null},ResolverInputTypes["Product_aggregate"]],
Product_by_pk?: [{	id: number},ResolverInputTypes["Product"]],
Product_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["Product_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["Product_bool_exp"] | undefined | null},ResolverInputTypes["Product"]],
Profile?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Profile_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Profile_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Profile_bool_exp"] | undefined | null},ResolverInputTypes["Profile"]],
Profile_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Profile_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Profile_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Profile_bool_exp"] | undefined | null},ResolverInputTypes["Profile_aggregate"]],
Profile_by_pk?: [{	id: number},ResolverInputTypes["Profile"]],
Profile_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["Profile_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["Profile_bool_exp"] | undefined | null},ResolverInputTypes["Profile"]],
Transaction?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Transaction_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Transaction_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Transaction_bool_exp"] | undefined | null},ResolverInputTypes["Transaction"]],
TransactionReview?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["TransactionReview_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["TransactionReview_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["TransactionReview_bool_exp"] | undefined | null},ResolverInputTypes["TransactionReview"]],
TransactionReview_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["TransactionReview_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["TransactionReview_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["TransactionReview_bool_exp"] | undefined | null},ResolverInputTypes["TransactionReview_aggregate"]],
TransactionReview_by_pk?: [{	id: number},ResolverInputTypes["TransactionReview"]],
TransactionReview_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["TransactionReview_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["TransactionReview_bool_exp"] | undefined | null},ResolverInputTypes["TransactionReview"]],
Transaction_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["Transaction_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["Transaction_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["Transaction_bool_exp"] | undefined | null},ResolverInputTypes["Transaction_aggregate"]],
Transaction_by_pk?: [{	id: number},ResolverInputTypes["Transaction"]],
Transaction_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["Transaction_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["Transaction_bool_exp"] | undefined | null},ResolverInputTypes["Transaction"]],
_prisma_migrations?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["_prisma_migrations_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["_prisma_migrations_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["_prisma_migrations_bool_exp"] | undefined | null},ResolverInputTypes["_prisma_migrations"]],
_prisma_migrations_aggregate?: [{	/** distinct select on columns */
	distinct_on?: Array<ResolverInputTypes["_prisma_migrations_select_column"]> | undefined | null,	/** limit the number of rows returned */
	limit?: number | undefined | null,	/** skip the first n rows. Use only with order_by */
	offset?: number | undefined | null,	/** sort the rows by one or more columns */
	order_by?: Array<ResolverInputTypes["_prisma_migrations_order_by"]> | undefined | null,	/** filter the rows returned */
	where?: ResolverInputTypes["_prisma_migrations_bool_exp"] | undefined | null},ResolverInputTypes["_prisma_migrations_aggregate"]],
_prisma_migrations_by_pk?: [{	id: string},ResolverInputTypes["_prisma_migrations"]],
_prisma_migrations_stream?: [{	/** maximum number of rows returned in a single batch */
	batch_size: number,	/** cursor to stream the results returned by the query */
	cursor: Array<ResolverInputTypes["_prisma_migrations_stream_cursor_input"] | undefined | null>,	/** filter the rows returned */
	where?: ResolverInputTypes["_prisma_migrations_bool_exp"] | undefined | null},ResolverInputTypes["_prisma_migrations"]],
		__typename?: boolean | `@${string}`
}>;
	["timestamp"]:unknown;
	/** Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'. */
["timestamp_comparison_exp"]: {
	_eq?: ResolverInputTypes["timestamp"] | undefined | null,
	_gt?: ResolverInputTypes["timestamp"] | undefined | null,
	_gte?: ResolverInputTypes["timestamp"] | undefined | null,
	_in?: Array<ResolverInputTypes["timestamp"]> | undefined | null,
	_is_null?: boolean | undefined | null,
	_lt?: ResolverInputTypes["timestamp"] | undefined | null,
	_lte?: ResolverInputTypes["timestamp"] | undefined | null,
	_neq?: ResolverInputTypes["timestamp"] | undefined | null,
	_nin?: Array<ResolverInputTypes["timestamp"]> | undefined | null
};
	["timestamptz"]:unknown;
	/** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
["timestamptz_comparison_exp"]: {
	_eq?: ResolverInputTypes["timestamptz"] | undefined | null,
	_gt?: ResolverInputTypes["timestamptz"] | undefined | null,
	_gte?: ResolverInputTypes["timestamptz"] | undefined | null,
	_in?: Array<ResolverInputTypes["timestamptz"]> | undefined | null,
	_is_null?: boolean | undefined | null,
	_lt?: ResolverInputTypes["timestamptz"] | undefined | null,
	_lte?: ResolverInputTypes["timestamptz"] | undefined | null,
	_neq?: ResolverInputTypes["timestamptz"] | undefined | null,
	_nin?: Array<ResolverInputTypes["timestamptz"]> | undefined | null
}
  }

export type ModelTypes = {
    ["schema"]: {
	query?: ModelTypes["query_root"] | undefined,
	mutation?: ModelTypes["mutation_root"] | undefined,
	subscription?: ModelTypes["subscription_root"] | undefined
};
	/** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
["Boolean_comparison_exp"]: {
	_eq?: boolean | undefined,
	_gt?: boolean | undefined,
	_gte?: boolean | undefined,
	_in?: Array<boolean> | undefined,
	_is_null?: boolean | undefined,
	_lt?: boolean | undefined,
	_lte?: boolean | undefined,
	_neq?: boolean | undefined,
	_nin?: Array<boolean> | undefined
};
	/** columns and relationships of "Business" */
["Business"]: {
		/** An array relationship */
	BusinessProducts: Array<ModelTypes["BusinessProduct"]>,
	/** An aggregate relationship */
	BusinessProducts_aggregate: ModelTypes["BusinessProduct_aggregate"],
	/** An array relationship */
	BusinessWorkers: Array<ModelTypes["BusinessWorker"]>,
	/** An aggregate relationship */
	BusinessWorkers_aggregate: ModelTypes["BusinessWorker_aggregate"],
	/** An array relationship */
	CertificateClaims: Array<ModelTypes["CertificateClaim"]>,
	/** An aggregate relationship */
	CertificateClaims_aggregate: ModelTypes["CertificateClaim_aggregate"],
	/** An array relationship */
	Offers: Array<ModelTypes["Offer"]>,
	/** An aggregate relationship */
	Offers_aggregate: ModelTypes["Offer_aggregate"],
	/** An array relationship */
	Orders: Array<ModelTypes["Order"]>,
	/** An aggregate relationship */
	Orders_aggregate: ModelTypes["Order_aggregate"],
	address: string,
	created_at: ModelTypes["timestamp"],
	id: number,
	name: string,
	phone: string,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** columns and relationships of "BusinessProduct" */
["BusinessProduct"]: {
		/** An object relationship */
	Business: ModelTypes["Business"],
	/** An object relationship */
	Product: ModelTypes["Product"],
	business_id: number,
	created_at: ModelTypes["timestamp"],
	id: number,
	product_id: number,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregated selection of "BusinessProduct" */
["BusinessProduct_aggregate"]: {
		aggregate?: ModelTypes["BusinessProduct_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["BusinessProduct"]>
};
	["BusinessProduct_aggregate_bool_exp"]: {
	count?: ModelTypes["BusinessProduct_aggregate_bool_exp_count"] | undefined
};
	["BusinessProduct_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["BusinessProduct_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["BusinessProduct_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "BusinessProduct" */
["BusinessProduct_aggregate_fields"]: {
		avg?: ModelTypes["BusinessProduct_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["BusinessProduct_max_fields"] | undefined,
	min?: ModelTypes["BusinessProduct_min_fields"] | undefined,
	stddev?: ModelTypes["BusinessProduct_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["BusinessProduct_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["BusinessProduct_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["BusinessProduct_sum_fields"] | undefined,
	var_pop?: ModelTypes["BusinessProduct_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["BusinessProduct_var_samp_fields"] | undefined,
	variance?: ModelTypes["BusinessProduct_variance_fields"] | undefined
};
	/** order by aggregate values of table "BusinessProduct" */
["BusinessProduct_aggregate_order_by"]: {
	avg?: ModelTypes["BusinessProduct_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["BusinessProduct_max_order_by"] | undefined,
	min?: ModelTypes["BusinessProduct_min_order_by"] | undefined,
	stddev?: ModelTypes["BusinessProduct_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["BusinessProduct_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["BusinessProduct_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["BusinessProduct_sum_order_by"] | undefined,
	var_pop?: ModelTypes["BusinessProduct_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["BusinessProduct_var_samp_order_by"] | undefined,
	variance?: ModelTypes["BusinessProduct_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "BusinessProduct" */
["BusinessProduct_arr_rel_insert_input"]: {
	data: Array<ModelTypes["BusinessProduct_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["BusinessProduct_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["BusinessProduct_avg_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	product_id?: number | undefined
};
	/** order by avg() on columns of table "BusinessProduct" */
["BusinessProduct_avg_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "BusinessProduct". All fields are combined with a logical 'AND'. */
["BusinessProduct_bool_exp"]: {
	Business?: ModelTypes["Business_bool_exp"] | undefined,
	Product?: ModelTypes["Product_bool_exp"] | undefined,
	_and?: Array<ModelTypes["BusinessProduct_bool_exp"]> | undefined,
	_not?: ModelTypes["BusinessProduct_bool_exp"] | undefined,
	_or?: Array<ModelTypes["BusinessProduct_bool_exp"]> | undefined,
	business_id?: ModelTypes["Int_comparison_exp"] | undefined,
	created_at?: ModelTypes["timestamp_comparison_exp"] | undefined,
	id?: ModelTypes["Int_comparison_exp"] | undefined,
	product_id?: ModelTypes["Int_comparison_exp"] | undefined,
	updated_at?: ModelTypes["timestamp_comparison_exp"] | undefined
};
	["BusinessProduct_constraint"]:BusinessProduct_constraint;
	/** input type for incrementing numeric columns in table "BusinessProduct" */
["BusinessProduct_inc_input"]: {
	business_id?: number | undefined,
	id?: number | undefined,
	product_id?: number | undefined
};
	/** input type for inserting data into table "BusinessProduct" */
["BusinessProduct_insert_input"]: {
	Business?: ModelTypes["Business_obj_rel_insert_input"] | undefined,
	Product?: ModelTypes["Product_obj_rel_insert_input"] | undefined,
	business_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	product_id?: number | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["BusinessProduct_max_fields"]: {
		business_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	product_id?: number | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** order by max() on columns of table "BusinessProduct" */
["BusinessProduct_max_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["BusinessProduct_min_fields"]: {
		business_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	product_id?: number | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** order by min() on columns of table "BusinessProduct" */
["BusinessProduct_min_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "BusinessProduct" */
["BusinessProduct_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["BusinessProduct"]>
};
	/** on_conflict condition type for table "BusinessProduct" */
["BusinessProduct_on_conflict"]: {
	constraint: ModelTypes["BusinessProduct_constraint"],
	update_columns: Array<ModelTypes["BusinessProduct_update_column"]>,
	where?: ModelTypes["BusinessProduct_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "BusinessProduct". */
["BusinessProduct_order_by"]: {
	Business?: ModelTypes["Business_order_by"] | undefined,
	Product?: ModelTypes["Product_order_by"] | undefined,
	business_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: BusinessProduct */
["BusinessProduct_pk_columns_input"]: {
	id: number
};
	["BusinessProduct_select_column"]:BusinessProduct_select_column;
	/** input type for updating data in table "BusinessProduct" */
["BusinessProduct_set_input"]: {
	business_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	product_id?: number | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["BusinessProduct_stddev_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	product_id?: number | undefined
};
	/** order by stddev() on columns of table "BusinessProduct" */
["BusinessProduct_stddev_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["BusinessProduct_stddev_pop_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	product_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "BusinessProduct" */
["BusinessProduct_stddev_pop_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["BusinessProduct_stddev_samp_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	product_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "BusinessProduct" */
["BusinessProduct_stddev_samp_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "BusinessProduct" */
["BusinessProduct_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["BusinessProduct_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["BusinessProduct_stream_cursor_value_input"]: {
	business_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	product_id?: number | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["BusinessProduct_sum_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	product_id?: number | undefined
};
	/** order by sum() on columns of table "BusinessProduct" */
["BusinessProduct_sum_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined
};
	["BusinessProduct_update_column"]:BusinessProduct_update_column;
	["BusinessProduct_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["BusinessProduct_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["BusinessProduct_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["BusinessProduct_bool_exp"]
};
	/** aggregate var_pop on columns */
["BusinessProduct_var_pop_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	product_id?: number | undefined
};
	/** order by var_pop() on columns of table "BusinessProduct" */
["BusinessProduct_var_pop_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["BusinessProduct_var_samp_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	product_id?: number | undefined
};
	/** order by var_samp() on columns of table "BusinessProduct" */
["BusinessProduct_var_samp_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["BusinessProduct_variance_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	product_id?: number | undefined
};
	/** order by variance() on columns of table "BusinessProduct" */
["BusinessProduct_variance_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined
};
	/** columns and relationships of "BusinessWorker" */
["BusinessWorker"]: {
		/** An object relationship */
	Business: ModelTypes["Business"],
	/** An object relationship */
	Profile: ModelTypes["Profile"],
	business_id: number,
	created_at: ModelTypes["timestamp"],
	id: number,
	profile_id: number,
	role: string,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregated selection of "BusinessWorker" */
["BusinessWorker_aggregate"]: {
		aggregate?: ModelTypes["BusinessWorker_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["BusinessWorker"]>
};
	["BusinessWorker_aggregate_bool_exp"]: {
	count?: ModelTypes["BusinessWorker_aggregate_bool_exp_count"] | undefined
};
	["BusinessWorker_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["BusinessWorker_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["BusinessWorker_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "BusinessWorker" */
["BusinessWorker_aggregate_fields"]: {
		avg?: ModelTypes["BusinessWorker_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["BusinessWorker_max_fields"] | undefined,
	min?: ModelTypes["BusinessWorker_min_fields"] | undefined,
	stddev?: ModelTypes["BusinessWorker_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["BusinessWorker_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["BusinessWorker_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["BusinessWorker_sum_fields"] | undefined,
	var_pop?: ModelTypes["BusinessWorker_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["BusinessWorker_var_samp_fields"] | undefined,
	variance?: ModelTypes["BusinessWorker_variance_fields"] | undefined
};
	/** order by aggregate values of table "BusinessWorker" */
["BusinessWorker_aggregate_order_by"]: {
	avg?: ModelTypes["BusinessWorker_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["BusinessWorker_max_order_by"] | undefined,
	min?: ModelTypes["BusinessWorker_min_order_by"] | undefined,
	stddev?: ModelTypes["BusinessWorker_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["BusinessWorker_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["BusinessWorker_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["BusinessWorker_sum_order_by"] | undefined,
	var_pop?: ModelTypes["BusinessWorker_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["BusinessWorker_var_samp_order_by"] | undefined,
	variance?: ModelTypes["BusinessWorker_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "BusinessWorker" */
["BusinessWorker_arr_rel_insert_input"]: {
	data: Array<ModelTypes["BusinessWorker_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["BusinessWorker_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["BusinessWorker_avg_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined
};
	/** order by avg() on columns of table "BusinessWorker" */
["BusinessWorker_avg_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	profile_id?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "BusinessWorker". All fields are combined with a logical 'AND'. */
["BusinessWorker_bool_exp"]: {
	Business?: ModelTypes["Business_bool_exp"] | undefined,
	Profile?: ModelTypes["Profile_bool_exp"] | undefined,
	_and?: Array<ModelTypes["BusinessWorker_bool_exp"]> | undefined,
	_not?: ModelTypes["BusinessWorker_bool_exp"] | undefined,
	_or?: Array<ModelTypes["BusinessWorker_bool_exp"]> | undefined,
	business_id?: ModelTypes["Int_comparison_exp"] | undefined,
	created_at?: ModelTypes["timestamp_comparison_exp"] | undefined,
	id?: ModelTypes["Int_comparison_exp"] | undefined,
	profile_id?: ModelTypes["Int_comparison_exp"] | undefined,
	role?: ModelTypes["String_comparison_exp"] | undefined,
	updated_at?: ModelTypes["timestamp_comparison_exp"] | undefined
};
	["BusinessWorker_constraint"]:BusinessWorker_constraint;
	/** input type for incrementing numeric columns in table "BusinessWorker" */
["BusinessWorker_inc_input"]: {
	business_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined
};
	/** input type for inserting data into table "BusinessWorker" */
["BusinessWorker_insert_input"]: {
	Business?: ModelTypes["Business_obj_rel_insert_input"] | undefined,
	Profile?: ModelTypes["Profile_obj_rel_insert_input"] | undefined,
	business_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	role?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["BusinessWorker_max_fields"]: {
		business_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	role?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** order by max() on columns of table "BusinessWorker" */
["BusinessWorker_max_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	profile_id?: ModelTypes["order_by"] | undefined,
	role?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["BusinessWorker_min_fields"]: {
		business_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	role?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** order by min() on columns of table "BusinessWorker" */
["BusinessWorker_min_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	profile_id?: ModelTypes["order_by"] | undefined,
	role?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "BusinessWorker" */
["BusinessWorker_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["BusinessWorker"]>
};
	/** on_conflict condition type for table "BusinessWorker" */
["BusinessWorker_on_conflict"]: {
	constraint: ModelTypes["BusinessWorker_constraint"],
	update_columns: Array<ModelTypes["BusinessWorker_update_column"]>,
	where?: ModelTypes["BusinessWorker_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "BusinessWorker". */
["BusinessWorker_order_by"]: {
	Business?: ModelTypes["Business_order_by"] | undefined,
	Profile?: ModelTypes["Profile_order_by"] | undefined,
	business_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	profile_id?: ModelTypes["order_by"] | undefined,
	role?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: BusinessWorker */
["BusinessWorker_pk_columns_input"]: {
	id: number
};
	["BusinessWorker_select_column"]:BusinessWorker_select_column;
	/** input type for updating data in table "BusinessWorker" */
["BusinessWorker_set_input"]: {
	business_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	role?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["BusinessWorker_stddev_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined
};
	/** order by stddev() on columns of table "BusinessWorker" */
["BusinessWorker_stddev_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	profile_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["BusinessWorker_stddev_pop_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "BusinessWorker" */
["BusinessWorker_stddev_pop_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	profile_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["BusinessWorker_stddev_samp_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "BusinessWorker" */
["BusinessWorker_stddev_samp_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	profile_id?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "BusinessWorker" */
["BusinessWorker_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["BusinessWorker_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["BusinessWorker_stream_cursor_value_input"]: {
	business_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	role?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["BusinessWorker_sum_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined
};
	/** order by sum() on columns of table "BusinessWorker" */
["BusinessWorker_sum_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	profile_id?: ModelTypes["order_by"] | undefined
};
	["BusinessWorker_update_column"]:BusinessWorker_update_column;
	["BusinessWorker_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["BusinessWorker_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["BusinessWorker_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["BusinessWorker_bool_exp"]
};
	/** aggregate var_pop on columns */
["BusinessWorker_var_pop_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined
};
	/** order by var_pop() on columns of table "BusinessWorker" */
["BusinessWorker_var_pop_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	profile_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["BusinessWorker_var_samp_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined
};
	/** order by var_samp() on columns of table "BusinessWorker" */
["BusinessWorker_var_samp_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	profile_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["BusinessWorker_variance_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined
};
	/** order by variance() on columns of table "BusinessWorker" */
["BusinessWorker_variance_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	profile_id?: ModelTypes["order_by"] | undefined
};
	/** aggregated selection of "Business" */
["Business_aggregate"]: {
		aggregate?: ModelTypes["Business_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["Business"]>
};
	/** aggregate fields of "Business" */
["Business_aggregate_fields"]: {
		avg?: ModelTypes["Business_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["Business_max_fields"] | undefined,
	min?: ModelTypes["Business_min_fields"] | undefined,
	stddev?: ModelTypes["Business_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["Business_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["Business_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["Business_sum_fields"] | undefined,
	var_pop?: ModelTypes["Business_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["Business_var_samp_fields"] | undefined,
	variance?: ModelTypes["Business_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["Business_avg_fields"]: {
		id?: number | undefined
};
	/** Boolean expression to filter rows from the table "Business". All fields are combined with a logical 'AND'. */
["Business_bool_exp"]: {
	BusinessProducts?: ModelTypes["BusinessProduct_bool_exp"] | undefined,
	BusinessProducts_aggregate?: ModelTypes["BusinessProduct_aggregate_bool_exp"] | undefined,
	BusinessWorkers?: ModelTypes["BusinessWorker_bool_exp"] | undefined,
	BusinessWorkers_aggregate?: ModelTypes["BusinessWorker_aggregate_bool_exp"] | undefined,
	CertificateClaims?: ModelTypes["CertificateClaim_bool_exp"] | undefined,
	CertificateClaims_aggregate?: ModelTypes["CertificateClaim_aggregate_bool_exp"] | undefined,
	Offers?: ModelTypes["Offer_bool_exp"] | undefined,
	Offers_aggregate?: ModelTypes["Offer_aggregate_bool_exp"] | undefined,
	Orders?: ModelTypes["Order_bool_exp"] | undefined,
	Orders_aggregate?: ModelTypes["Order_aggregate_bool_exp"] | undefined,
	_and?: Array<ModelTypes["Business_bool_exp"]> | undefined,
	_not?: ModelTypes["Business_bool_exp"] | undefined,
	_or?: Array<ModelTypes["Business_bool_exp"]> | undefined,
	address?: ModelTypes["String_comparison_exp"] | undefined,
	created_at?: ModelTypes["timestamp_comparison_exp"] | undefined,
	id?: ModelTypes["Int_comparison_exp"] | undefined,
	name?: ModelTypes["String_comparison_exp"] | undefined,
	phone?: ModelTypes["String_comparison_exp"] | undefined,
	updated_at?: ModelTypes["timestamp_comparison_exp"] | undefined
};
	["Business_constraint"]:Business_constraint;
	/** input type for incrementing numeric columns in table "Business" */
["Business_inc_input"]: {
	id?: number | undefined
};
	/** input type for inserting data into table "Business" */
["Business_insert_input"]: {
	BusinessProducts?: ModelTypes["BusinessProduct_arr_rel_insert_input"] | undefined,
	BusinessWorkers?: ModelTypes["BusinessWorker_arr_rel_insert_input"] | undefined,
	CertificateClaims?: ModelTypes["CertificateClaim_arr_rel_insert_input"] | undefined,
	Offers?: ModelTypes["Offer_arr_rel_insert_input"] | undefined,
	Orders?: ModelTypes["Order_arr_rel_insert_input"] | undefined,
	address?: string | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	phone?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["Business_max_fields"]: {
		address?: string | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	phone?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate min on columns */
["Business_min_fields"]: {
		address?: string | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	phone?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** response of any mutation on the table "Business" */
["Business_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["Business"]>
};
	/** input type for inserting object relation for remote table "Business" */
["Business_obj_rel_insert_input"]: {
	data: ModelTypes["Business_insert_input"],
	/** upsert condition */
	on_conflict?: ModelTypes["Business_on_conflict"] | undefined
};
	/** on_conflict condition type for table "Business" */
["Business_on_conflict"]: {
	constraint: ModelTypes["Business_constraint"],
	update_columns: Array<ModelTypes["Business_update_column"]>,
	where?: ModelTypes["Business_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "Business". */
["Business_order_by"]: {
	BusinessProducts_aggregate?: ModelTypes["BusinessProduct_aggregate_order_by"] | undefined,
	BusinessWorkers_aggregate?: ModelTypes["BusinessWorker_aggregate_order_by"] | undefined,
	CertificateClaims_aggregate?: ModelTypes["CertificateClaim_aggregate_order_by"] | undefined,
	Offers_aggregate?: ModelTypes["Offer_aggregate_order_by"] | undefined,
	Orders_aggregate?: ModelTypes["Order_aggregate_order_by"] | undefined,
	address?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	phone?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: Business */
["Business_pk_columns_input"]: {
	id: number
};
	["Business_select_column"]:Business_select_column;
	/** input type for updating data in table "Business" */
["Business_set_input"]: {
	address?: string | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	phone?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["Business_stddev_fields"]: {
		id?: number | undefined
};
	/** aggregate stddev_pop on columns */
["Business_stddev_pop_fields"]: {
		id?: number | undefined
};
	/** aggregate stddev_samp on columns */
["Business_stddev_samp_fields"]: {
		id?: number | undefined
};
	/** Streaming cursor of the table "Business" */
["Business_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["Business_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["Business_stream_cursor_value_input"]: {
	address?: string | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	phone?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["Business_sum_fields"]: {
		id?: number | undefined
};
	["Business_update_column"]:Business_update_column;
	["Business_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["Business_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["Business_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["Business_bool_exp"]
};
	/** aggregate var_pop on columns */
["Business_var_pop_fields"]: {
		id?: number | undefined
};
	/** aggregate var_samp on columns */
["Business_var_samp_fields"]: {
		id?: number | undefined
};
	/** aggregate variance on columns */
["Business_variance_fields"]: {
		id?: number | undefined
};
	/** columns and relationships of "Category" */
["Category"]: {
		/** An array relationship */
	Categories: Array<ModelTypes["Category"]>,
	/** An aggregate relationship */
	Categories_aggregate: ModelTypes["Category_aggregate"],
	/** An object relationship */
	Category?: ModelTypes["Category"] | undefined,
	/** An array relationship */
	Products: Array<ModelTypes["Product"]>,
	/** An aggregate relationship */
	Products_aggregate: ModelTypes["Product_aggregate"],
	created_at: ModelTypes["timestamp"],
	id: number,
	name: string,
	parent_id?: number | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregated selection of "Category" */
["Category_aggregate"]: {
		aggregate?: ModelTypes["Category_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["Category"]>
};
	["Category_aggregate_bool_exp"]: {
	count?: ModelTypes["Category_aggregate_bool_exp_count"] | undefined
};
	["Category_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["Category_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["Category_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "Category" */
["Category_aggregate_fields"]: {
		avg?: ModelTypes["Category_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["Category_max_fields"] | undefined,
	min?: ModelTypes["Category_min_fields"] | undefined,
	stddev?: ModelTypes["Category_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["Category_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["Category_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["Category_sum_fields"] | undefined,
	var_pop?: ModelTypes["Category_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["Category_var_samp_fields"] | undefined,
	variance?: ModelTypes["Category_variance_fields"] | undefined
};
	/** order by aggregate values of table "Category" */
["Category_aggregate_order_by"]: {
	avg?: ModelTypes["Category_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["Category_max_order_by"] | undefined,
	min?: ModelTypes["Category_min_order_by"] | undefined,
	stddev?: ModelTypes["Category_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["Category_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["Category_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["Category_sum_order_by"] | undefined,
	var_pop?: ModelTypes["Category_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["Category_var_samp_order_by"] | undefined,
	variance?: ModelTypes["Category_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "Category" */
["Category_arr_rel_insert_input"]: {
	data: Array<ModelTypes["Category_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["Category_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["Category_avg_fields"]: {
		id?: number | undefined,
	parent_id?: number | undefined
};
	/** order by avg() on columns of table "Category" */
["Category_avg_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	parent_id?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "Category". All fields are combined with a logical 'AND'. */
["Category_bool_exp"]: {
	Categories?: ModelTypes["Category_bool_exp"] | undefined,
	Categories_aggregate?: ModelTypes["Category_aggregate_bool_exp"] | undefined,
	Category?: ModelTypes["Category_bool_exp"] | undefined,
	Products?: ModelTypes["Product_bool_exp"] | undefined,
	Products_aggregate?: ModelTypes["Product_aggregate_bool_exp"] | undefined,
	_and?: Array<ModelTypes["Category_bool_exp"]> | undefined,
	_not?: ModelTypes["Category_bool_exp"] | undefined,
	_or?: Array<ModelTypes["Category_bool_exp"]> | undefined,
	created_at?: ModelTypes["timestamp_comparison_exp"] | undefined,
	id?: ModelTypes["Int_comparison_exp"] | undefined,
	name?: ModelTypes["String_comparison_exp"] | undefined,
	parent_id?: ModelTypes["Int_comparison_exp"] | undefined,
	updated_at?: ModelTypes["timestamp_comparison_exp"] | undefined
};
	["Category_constraint"]:Category_constraint;
	/** input type for incrementing numeric columns in table "Category" */
["Category_inc_input"]: {
	id?: number | undefined,
	parent_id?: number | undefined
};
	/** input type for inserting data into table "Category" */
["Category_insert_input"]: {
	Categories?: ModelTypes["Category_arr_rel_insert_input"] | undefined,
	Category?: ModelTypes["Category_obj_rel_insert_input"] | undefined,
	Products?: ModelTypes["Product_arr_rel_insert_input"] | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	parent_id?: number | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["Category_max_fields"]: {
		created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	parent_id?: number | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** order by max() on columns of table "Category" */
["Category_max_order_by"]: {
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	parent_id?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["Category_min_fields"]: {
		created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	parent_id?: number | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** order by min() on columns of table "Category" */
["Category_min_order_by"]: {
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	parent_id?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "Category" */
["Category_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["Category"]>
};
	/** input type for inserting object relation for remote table "Category" */
["Category_obj_rel_insert_input"]: {
	data: ModelTypes["Category_insert_input"],
	/** upsert condition */
	on_conflict?: ModelTypes["Category_on_conflict"] | undefined
};
	/** on_conflict condition type for table "Category" */
["Category_on_conflict"]: {
	constraint: ModelTypes["Category_constraint"],
	update_columns: Array<ModelTypes["Category_update_column"]>,
	where?: ModelTypes["Category_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "Category". */
["Category_order_by"]: {
	Categories_aggregate?: ModelTypes["Category_aggregate_order_by"] | undefined,
	Category?: ModelTypes["Category_order_by"] | undefined,
	Products_aggregate?: ModelTypes["Product_aggregate_order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	parent_id?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: Category */
["Category_pk_columns_input"]: {
	id: number
};
	["Category_select_column"]:Category_select_column;
	/** input type for updating data in table "Category" */
["Category_set_input"]: {
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	parent_id?: number | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["Category_stddev_fields"]: {
		id?: number | undefined,
	parent_id?: number | undefined
};
	/** order by stddev() on columns of table "Category" */
["Category_stddev_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	parent_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["Category_stddev_pop_fields"]: {
		id?: number | undefined,
	parent_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "Category" */
["Category_stddev_pop_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	parent_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["Category_stddev_samp_fields"]: {
		id?: number | undefined,
	parent_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "Category" */
["Category_stddev_samp_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	parent_id?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "Category" */
["Category_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["Category_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["Category_stream_cursor_value_input"]: {
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	parent_id?: number | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["Category_sum_fields"]: {
		id?: number | undefined,
	parent_id?: number | undefined
};
	/** order by sum() on columns of table "Category" */
["Category_sum_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	parent_id?: ModelTypes["order_by"] | undefined
};
	["Category_update_column"]:Category_update_column;
	["Category_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["Category_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["Category_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["Category_bool_exp"]
};
	/** aggregate var_pop on columns */
["Category_var_pop_fields"]: {
		id?: number | undefined,
	parent_id?: number | undefined
};
	/** order by var_pop() on columns of table "Category" */
["Category_var_pop_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	parent_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["Category_var_samp_fields"]: {
		id?: number | undefined,
	parent_id?: number | undefined
};
	/** order by var_samp() on columns of table "Category" */
["Category_var_samp_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	parent_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["Category_variance_fields"]: {
		id?: number | undefined,
	parent_id?: number | undefined
};
	/** order by variance() on columns of table "Category" */
["Category_variance_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	parent_id?: ModelTypes["order_by"] | undefined
};
	/** columns and relationships of "Certificate" */
["Certificate"]: {
		/** An object relationship */
	CertificateCategory?: ModelTypes["CertificateCategory"] | undefined,
	/** An array relationship */
	CertificateClaims: Array<ModelTypes["CertificateClaim"]>,
	/** An aggregate relationship */
	CertificateClaims_aggregate: ModelTypes["CertificateClaim_aggregate"],
	certificateCategory_id?: number | undefined,
	created_at: ModelTypes["timestamp"],
	icon_url?: string | undefined,
	id: number,
	image_url?: string | undefined,
	name: string,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** columns and relationships of "CertificateCategory" */
["CertificateCategory"]: {
		/** An array relationship */
	Certificates: Array<ModelTypes["Certificate"]>,
	/** An aggregate relationship */
	Certificates_aggregate: ModelTypes["Certificate_aggregate"],
	created_at: ModelTypes["timestamp"],
	id: number,
	name: string,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregated selection of "CertificateCategory" */
["CertificateCategory_aggregate"]: {
		aggregate?: ModelTypes["CertificateCategory_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["CertificateCategory"]>
};
	/** aggregate fields of "CertificateCategory" */
["CertificateCategory_aggregate_fields"]: {
		avg?: ModelTypes["CertificateCategory_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["CertificateCategory_max_fields"] | undefined,
	min?: ModelTypes["CertificateCategory_min_fields"] | undefined,
	stddev?: ModelTypes["CertificateCategory_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["CertificateCategory_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["CertificateCategory_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["CertificateCategory_sum_fields"] | undefined,
	var_pop?: ModelTypes["CertificateCategory_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["CertificateCategory_var_samp_fields"] | undefined,
	variance?: ModelTypes["CertificateCategory_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["CertificateCategory_avg_fields"]: {
		id?: number | undefined
};
	/** Boolean expression to filter rows from the table "CertificateCategory". All fields are combined with a logical 'AND'. */
["CertificateCategory_bool_exp"]: {
	Certificates?: ModelTypes["Certificate_bool_exp"] | undefined,
	Certificates_aggregate?: ModelTypes["Certificate_aggregate_bool_exp"] | undefined,
	_and?: Array<ModelTypes["CertificateCategory_bool_exp"]> | undefined,
	_not?: ModelTypes["CertificateCategory_bool_exp"] | undefined,
	_or?: Array<ModelTypes["CertificateCategory_bool_exp"]> | undefined,
	created_at?: ModelTypes["timestamp_comparison_exp"] | undefined,
	id?: ModelTypes["Int_comparison_exp"] | undefined,
	name?: ModelTypes["String_comparison_exp"] | undefined,
	updated_at?: ModelTypes["timestamp_comparison_exp"] | undefined
};
	["CertificateCategory_constraint"]:CertificateCategory_constraint;
	/** input type for incrementing numeric columns in table "CertificateCategory" */
["CertificateCategory_inc_input"]: {
	id?: number | undefined
};
	/** input type for inserting data into table "CertificateCategory" */
["CertificateCategory_insert_input"]: {
	Certificates?: ModelTypes["Certificate_arr_rel_insert_input"] | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["CertificateCategory_max_fields"]: {
		created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate min on columns */
["CertificateCategory_min_fields"]: {
		created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** response of any mutation on the table "CertificateCategory" */
["CertificateCategory_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["CertificateCategory"]>
};
	/** input type for inserting object relation for remote table "CertificateCategory" */
["CertificateCategory_obj_rel_insert_input"]: {
	data: ModelTypes["CertificateCategory_insert_input"],
	/** upsert condition */
	on_conflict?: ModelTypes["CertificateCategory_on_conflict"] | undefined
};
	/** on_conflict condition type for table "CertificateCategory" */
["CertificateCategory_on_conflict"]: {
	constraint: ModelTypes["CertificateCategory_constraint"],
	update_columns: Array<ModelTypes["CertificateCategory_update_column"]>,
	where?: ModelTypes["CertificateCategory_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "CertificateCategory". */
["CertificateCategory_order_by"]: {
	Certificates_aggregate?: ModelTypes["Certificate_aggregate_order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: CertificateCategory */
["CertificateCategory_pk_columns_input"]: {
	id: number
};
	["CertificateCategory_select_column"]:CertificateCategory_select_column;
	/** input type for updating data in table "CertificateCategory" */
["CertificateCategory_set_input"]: {
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["CertificateCategory_stddev_fields"]: {
		id?: number | undefined
};
	/** aggregate stddev_pop on columns */
["CertificateCategory_stddev_pop_fields"]: {
		id?: number | undefined
};
	/** aggregate stddev_samp on columns */
["CertificateCategory_stddev_samp_fields"]: {
		id?: number | undefined
};
	/** Streaming cursor of the table "CertificateCategory" */
["CertificateCategory_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["CertificateCategory_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["CertificateCategory_stream_cursor_value_input"]: {
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["CertificateCategory_sum_fields"]: {
		id?: number | undefined
};
	["CertificateCategory_update_column"]:CertificateCategory_update_column;
	["CertificateCategory_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["CertificateCategory_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["CertificateCategory_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["CertificateCategory_bool_exp"]
};
	/** aggregate var_pop on columns */
["CertificateCategory_var_pop_fields"]: {
		id?: number | undefined
};
	/** aggregate var_samp on columns */
["CertificateCategory_var_samp_fields"]: {
		id?: number | undefined
};
	/** aggregate variance on columns */
["CertificateCategory_variance_fields"]: {
		id?: number | undefined
};
	/** columns and relationships of "CertificateClaim" */
["CertificateClaim"]: {
		/** An object relationship */
	Business: ModelTypes["Business"],
	/** An object relationship */
	Certificate: ModelTypes["Certificate"],
	business_id: number,
	certificate_id: number,
	created_at: ModelTypes["timestamp"],
	id: number,
	status: ModelTypes["CertificateClaimStatus"],
	updated_at?: ModelTypes["timestamp"] | undefined
};
	["CertificateClaimStatus"]:any;
	/** Boolean expression to compare columns of type "CertificateClaimStatus". All fields are combined with logical 'AND'. */
["CertificateClaimStatus_comparison_exp"]: {
	_eq?: ModelTypes["CertificateClaimStatus"] | undefined,
	_gt?: ModelTypes["CertificateClaimStatus"] | undefined,
	_gte?: ModelTypes["CertificateClaimStatus"] | undefined,
	_in?: Array<ModelTypes["CertificateClaimStatus"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: ModelTypes["CertificateClaimStatus"] | undefined,
	_lte?: ModelTypes["CertificateClaimStatus"] | undefined,
	_neq?: ModelTypes["CertificateClaimStatus"] | undefined,
	_nin?: Array<ModelTypes["CertificateClaimStatus"]> | undefined
};
	/** aggregated selection of "CertificateClaim" */
["CertificateClaim_aggregate"]: {
		aggregate?: ModelTypes["CertificateClaim_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["CertificateClaim"]>
};
	["CertificateClaim_aggregate_bool_exp"]: {
	count?: ModelTypes["CertificateClaim_aggregate_bool_exp_count"] | undefined
};
	["CertificateClaim_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["CertificateClaim_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["CertificateClaim_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "CertificateClaim" */
["CertificateClaim_aggregate_fields"]: {
		avg?: ModelTypes["CertificateClaim_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["CertificateClaim_max_fields"] | undefined,
	min?: ModelTypes["CertificateClaim_min_fields"] | undefined,
	stddev?: ModelTypes["CertificateClaim_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["CertificateClaim_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["CertificateClaim_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["CertificateClaim_sum_fields"] | undefined,
	var_pop?: ModelTypes["CertificateClaim_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["CertificateClaim_var_samp_fields"] | undefined,
	variance?: ModelTypes["CertificateClaim_variance_fields"] | undefined
};
	/** order by aggregate values of table "CertificateClaim" */
["CertificateClaim_aggregate_order_by"]: {
	avg?: ModelTypes["CertificateClaim_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["CertificateClaim_max_order_by"] | undefined,
	min?: ModelTypes["CertificateClaim_min_order_by"] | undefined,
	stddev?: ModelTypes["CertificateClaim_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["CertificateClaim_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["CertificateClaim_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["CertificateClaim_sum_order_by"] | undefined,
	var_pop?: ModelTypes["CertificateClaim_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["CertificateClaim_var_samp_order_by"] | undefined,
	variance?: ModelTypes["CertificateClaim_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "CertificateClaim" */
["CertificateClaim_arr_rel_insert_input"]: {
	data: Array<ModelTypes["CertificateClaim_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["CertificateClaim_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["CertificateClaim_avg_fields"]: {
		business_id?: number | undefined,
	certificate_id?: number | undefined,
	id?: number | undefined
};
	/** order by avg() on columns of table "CertificateClaim" */
["CertificateClaim_avg_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	certificate_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "CertificateClaim". All fields are combined with a logical 'AND'. */
["CertificateClaim_bool_exp"]: {
	Business?: ModelTypes["Business_bool_exp"] | undefined,
	Certificate?: ModelTypes["Certificate_bool_exp"] | undefined,
	_and?: Array<ModelTypes["CertificateClaim_bool_exp"]> | undefined,
	_not?: ModelTypes["CertificateClaim_bool_exp"] | undefined,
	_or?: Array<ModelTypes["CertificateClaim_bool_exp"]> | undefined,
	business_id?: ModelTypes["Int_comparison_exp"] | undefined,
	certificate_id?: ModelTypes["Int_comparison_exp"] | undefined,
	created_at?: ModelTypes["timestamp_comparison_exp"] | undefined,
	id?: ModelTypes["Int_comparison_exp"] | undefined,
	status?: ModelTypes["CertificateClaimStatus_comparison_exp"] | undefined,
	updated_at?: ModelTypes["timestamp_comparison_exp"] | undefined
};
	["CertificateClaim_constraint"]:CertificateClaim_constraint;
	/** input type for incrementing numeric columns in table "CertificateClaim" */
["CertificateClaim_inc_input"]: {
	business_id?: number | undefined,
	certificate_id?: number | undefined,
	id?: number | undefined
};
	/** input type for inserting data into table "CertificateClaim" */
["CertificateClaim_insert_input"]: {
	Business?: ModelTypes["Business_obj_rel_insert_input"] | undefined,
	Certificate?: ModelTypes["Certificate_obj_rel_insert_input"] | undefined,
	business_id?: number | undefined,
	certificate_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	status?: ModelTypes["CertificateClaimStatus"] | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["CertificateClaim_max_fields"]: {
		business_id?: number | undefined,
	certificate_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	status?: ModelTypes["CertificateClaimStatus"] | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** order by max() on columns of table "CertificateClaim" */
["CertificateClaim_max_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	certificate_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	status?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["CertificateClaim_min_fields"]: {
		business_id?: number | undefined,
	certificate_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	status?: ModelTypes["CertificateClaimStatus"] | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** order by min() on columns of table "CertificateClaim" */
["CertificateClaim_min_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	certificate_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	status?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "CertificateClaim" */
["CertificateClaim_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["CertificateClaim"]>
};
	/** on_conflict condition type for table "CertificateClaim" */
["CertificateClaim_on_conflict"]: {
	constraint: ModelTypes["CertificateClaim_constraint"],
	update_columns: Array<ModelTypes["CertificateClaim_update_column"]>,
	where?: ModelTypes["CertificateClaim_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "CertificateClaim". */
["CertificateClaim_order_by"]: {
	Business?: ModelTypes["Business_order_by"] | undefined,
	Certificate?: ModelTypes["Certificate_order_by"] | undefined,
	business_id?: ModelTypes["order_by"] | undefined,
	certificate_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	status?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: CertificateClaim */
["CertificateClaim_pk_columns_input"]: {
	id: number
};
	["CertificateClaim_select_column"]:CertificateClaim_select_column;
	/** input type for updating data in table "CertificateClaim" */
["CertificateClaim_set_input"]: {
	business_id?: number | undefined,
	certificate_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	status?: ModelTypes["CertificateClaimStatus"] | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["CertificateClaim_stddev_fields"]: {
		business_id?: number | undefined,
	certificate_id?: number | undefined,
	id?: number | undefined
};
	/** order by stddev() on columns of table "CertificateClaim" */
["CertificateClaim_stddev_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	certificate_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["CertificateClaim_stddev_pop_fields"]: {
		business_id?: number | undefined,
	certificate_id?: number | undefined,
	id?: number | undefined
};
	/** order by stddev_pop() on columns of table "CertificateClaim" */
["CertificateClaim_stddev_pop_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	certificate_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["CertificateClaim_stddev_samp_fields"]: {
		business_id?: number | undefined,
	certificate_id?: number | undefined,
	id?: number | undefined
};
	/** order by stddev_samp() on columns of table "CertificateClaim" */
["CertificateClaim_stddev_samp_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	certificate_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "CertificateClaim" */
["CertificateClaim_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["CertificateClaim_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["CertificateClaim_stream_cursor_value_input"]: {
	business_id?: number | undefined,
	certificate_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	status?: ModelTypes["CertificateClaimStatus"] | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["CertificateClaim_sum_fields"]: {
		business_id?: number | undefined,
	certificate_id?: number | undefined,
	id?: number | undefined
};
	/** order by sum() on columns of table "CertificateClaim" */
["CertificateClaim_sum_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	certificate_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	["CertificateClaim_update_column"]:CertificateClaim_update_column;
	["CertificateClaim_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["CertificateClaim_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["CertificateClaim_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["CertificateClaim_bool_exp"]
};
	/** aggregate var_pop on columns */
["CertificateClaim_var_pop_fields"]: {
		business_id?: number | undefined,
	certificate_id?: number | undefined,
	id?: number | undefined
};
	/** order by var_pop() on columns of table "CertificateClaim" */
["CertificateClaim_var_pop_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	certificate_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["CertificateClaim_var_samp_fields"]: {
		business_id?: number | undefined,
	certificate_id?: number | undefined,
	id?: number | undefined
};
	/** order by var_samp() on columns of table "CertificateClaim" */
["CertificateClaim_var_samp_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	certificate_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["CertificateClaim_variance_fields"]: {
		business_id?: number | undefined,
	certificate_id?: number | undefined,
	id?: number | undefined
};
	/** order by variance() on columns of table "CertificateClaim" */
["CertificateClaim_variance_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	certificate_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	/** aggregated selection of "Certificate" */
["Certificate_aggregate"]: {
		aggregate?: ModelTypes["Certificate_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["Certificate"]>
};
	["Certificate_aggregate_bool_exp"]: {
	count?: ModelTypes["Certificate_aggregate_bool_exp_count"] | undefined
};
	["Certificate_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["Certificate_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["Certificate_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "Certificate" */
["Certificate_aggregate_fields"]: {
		avg?: ModelTypes["Certificate_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["Certificate_max_fields"] | undefined,
	min?: ModelTypes["Certificate_min_fields"] | undefined,
	stddev?: ModelTypes["Certificate_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["Certificate_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["Certificate_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["Certificate_sum_fields"] | undefined,
	var_pop?: ModelTypes["Certificate_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["Certificate_var_samp_fields"] | undefined,
	variance?: ModelTypes["Certificate_variance_fields"] | undefined
};
	/** order by aggregate values of table "Certificate" */
["Certificate_aggregate_order_by"]: {
	avg?: ModelTypes["Certificate_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["Certificate_max_order_by"] | undefined,
	min?: ModelTypes["Certificate_min_order_by"] | undefined,
	stddev?: ModelTypes["Certificate_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["Certificate_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["Certificate_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["Certificate_sum_order_by"] | undefined,
	var_pop?: ModelTypes["Certificate_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["Certificate_var_samp_order_by"] | undefined,
	variance?: ModelTypes["Certificate_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "Certificate" */
["Certificate_arr_rel_insert_input"]: {
	data: Array<ModelTypes["Certificate_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["Certificate_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["Certificate_avg_fields"]: {
		certificateCategory_id?: number | undefined,
	id?: number | undefined
};
	/** order by avg() on columns of table "Certificate" */
["Certificate_avg_order_by"]: {
	certificateCategory_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "Certificate". All fields are combined with a logical 'AND'. */
["Certificate_bool_exp"]: {
	CertificateCategory?: ModelTypes["CertificateCategory_bool_exp"] | undefined,
	CertificateClaims?: ModelTypes["CertificateClaim_bool_exp"] | undefined,
	CertificateClaims_aggregate?: ModelTypes["CertificateClaim_aggregate_bool_exp"] | undefined,
	_and?: Array<ModelTypes["Certificate_bool_exp"]> | undefined,
	_not?: ModelTypes["Certificate_bool_exp"] | undefined,
	_or?: Array<ModelTypes["Certificate_bool_exp"]> | undefined,
	certificateCategory_id?: ModelTypes["Int_comparison_exp"] | undefined,
	created_at?: ModelTypes["timestamp_comparison_exp"] | undefined,
	icon_url?: ModelTypes["String_comparison_exp"] | undefined,
	id?: ModelTypes["Int_comparison_exp"] | undefined,
	image_url?: ModelTypes["String_comparison_exp"] | undefined,
	name?: ModelTypes["String_comparison_exp"] | undefined,
	updated_at?: ModelTypes["timestamp_comparison_exp"] | undefined
};
	["Certificate_constraint"]:Certificate_constraint;
	/** input type for incrementing numeric columns in table "Certificate" */
["Certificate_inc_input"]: {
	certificateCategory_id?: number | undefined,
	id?: number | undefined
};
	/** input type for inserting data into table "Certificate" */
["Certificate_insert_input"]: {
	CertificateCategory?: ModelTypes["CertificateCategory_obj_rel_insert_input"] | undefined,
	CertificateClaims?: ModelTypes["CertificateClaim_arr_rel_insert_input"] | undefined,
	certificateCategory_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	icon_url?: string | undefined,
	id?: number | undefined,
	image_url?: string | undefined,
	name?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["Certificate_max_fields"]: {
		certificateCategory_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	icon_url?: string | undefined,
	id?: number | undefined,
	image_url?: string | undefined,
	name?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** order by max() on columns of table "Certificate" */
["Certificate_max_order_by"]: {
	certificateCategory_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	icon_url?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	image_url?: ModelTypes["order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["Certificate_min_fields"]: {
		certificateCategory_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	icon_url?: string | undefined,
	id?: number | undefined,
	image_url?: string | undefined,
	name?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** order by min() on columns of table "Certificate" */
["Certificate_min_order_by"]: {
	certificateCategory_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	icon_url?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	image_url?: ModelTypes["order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "Certificate" */
["Certificate_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["Certificate"]>
};
	/** input type for inserting object relation for remote table "Certificate" */
["Certificate_obj_rel_insert_input"]: {
	data: ModelTypes["Certificate_insert_input"],
	/** upsert condition */
	on_conflict?: ModelTypes["Certificate_on_conflict"] | undefined
};
	/** on_conflict condition type for table "Certificate" */
["Certificate_on_conflict"]: {
	constraint: ModelTypes["Certificate_constraint"],
	update_columns: Array<ModelTypes["Certificate_update_column"]>,
	where?: ModelTypes["Certificate_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "Certificate". */
["Certificate_order_by"]: {
	CertificateCategory?: ModelTypes["CertificateCategory_order_by"] | undefined,
	CertificateClaims_aggregate?: ModelTypes["CertificateClaim_aggregate_order_by"] | undefined,
	certificateCategory_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	icon_url?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	image_url?: ModelTypes["order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: Certificate */
["Certificate_pk_columns_input"]: {
	id: number
};
	["Certificate_select_column"]:Certificate_select_column;
	/** input type for updating data in table "Certificate" */
["Certificate_set_input"]: {
	certificateCategory_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	icon_url?: string | undefined,
	id?: number | undefined,
	image_url?: string | undefined,
	name?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["Certificate_stddev_fields"]: {
		certificateCategory_id?: number | undefined,
	id?: number | undefined
};
	/** order by stddev() on columns of table "Certificate" */
["Certificate_stddev_order_by"]: {
	certificateCategory_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["Certificate_stddev_pop_fields"]: {
		certificateCategory_id?: number | undefined,
	id?: number | undefined
};
	/** order by stddev_pop() on columns of table "Certificate" */
["Certificate_stddev_pop_order_by"]: {
	certificateCategory_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["Certificate_stddev_samp_fields"]: {
		certificateCategory_id?: number | undefined,
	id?: number | undefined
};
	/** order by stddev_samp() on columns of table "Certificate" */
["Certificate_stddev_samp_order_by"]: {
	certificateCategory_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "Certificate" */
["Certificate_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["Certificate_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["Certificate_stream_cursor_value_input"]: {
	certificateCategory_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	icon_url?: string | undefined,
	id?: number | undefined,
	image_url?: string | undefined,
	name?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["Certificate_sum_fields"]: {
		certificateCategory_id?: number | undefined,
	id?: number | undefined
};
	/** order by sum() on columns of table "Certificate" */
["Certificate_sum_order_by"]: {
	certificateCategory_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	["Certificate_update_column"]:Certificate_update_column;
	["Certificate_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["Certificate_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["Certificate_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["Certificate_bool_exp"]
};
	/** aggregate var_pop on columns */
["Certificate_var_pop_fields"]: {
		certificateCategory_id?: number | undefined,
	id?: number | undefined
};
	/** order by var_pop() on columns of table "Certificate" */
["Certificate_var_pop_order_by"]: {
	certificateCategory_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["Certificate_var_samp_fields"]: {
		certificateCategory_id?: number | undefined,
	id?: number | undefined
};
	/** order by var_samp() on columns of table "Certificate" */
["Certificate_var_samp_order_by"]: {
	certificateCategory_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["Certificate_variance_fields"]: {
		certificateCategory_id?: number | undefined,
	id?: number | undefined
};
	/** order by variance() on columns of table "Certificate" */
["Certificate_variance_order_by"]: {
	certificateCategory_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
["Int_comparison_exp"]: {
	_eq?: number | undefined,
	_gt?: number | undefined,
	_gte?: number | undefined,
	_in?: Array<number> | undefined,
	_is_null?: boolean | undefined,
	_lt?: number | undefined,
	_lte?: number | undefined,
	_neq?: number | undefined,
	_nin?: Array<number> | undefined
};
	/** columns and relationships of "Offer" */
["Offer"]: {
		/** An object relationship */
	Business: ModelTypes["Business"],
	/** An object relationship */
	Product: ModelTypes["Product"],
	active: boolean,
	business_id: number,
	created_at: ModelTypes["timestamp"],
	end_date?: ModelTypes["timestamp"] | undefined,
	harvest_date?: ModelTypes["timestamp"] | undefined,
	id: number,
	packaging?: ModelTypes["float8"] | undefined,
	price_per_unit?: ModelTypes["float8"] | undefined,
	product_id: number,
	quantity?: ModelTypes["float8"] | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	["OfferType"]:any;
	/** Boolean expression to compare columns of type "OfferType". All fields are combined with logical 'AND'. */
["OfferType_comparison_exp"]: {
	_eq?: ModelTypes["OfferType"] | undefined,
	_gt?: ModelTypes["OfferType"] | undefined,
	_gte?: ModelTypes["OfferType"] | undefined,
	_in?: Array<ModelTypes["OfferType"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: ModelTypes["OfferType"] | undefined,
	_lte?: ModelTypes["OfferType"] | undefined,
	_neq?: ModelTypes["OfferType"] | undefined,
	_nin?: Array<ModelTypes["OfferType"]> | undefined
};
	/** aggregated selection of "Offer" */
["Offer_aggregate"]: {
		aggregate?: ModelTypes["Offer_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["Offer"]>
};
	["Offer_aggregate_bool_exp"]: {
	avg?: ModelTypes["Offer_aggregate_bool_exp_avg"] | undefined,
	bool_and?: ModelTypes["Offer_aggregate_bool_exp_bool_and"] | undefined,
	bool_or?: ModelTypes["Offer_aggregate_bool_exp_bool_or"] | undefined,
	corr?: ModelTypes["Offer_aggregate_bool_exp_corr"] | undefined,
	count?: ModelTypes["Offer_aggregate_bool_exp_count"] | undefined,
	covar_samp?: ModelTypes["Offer_aggregate_bool_exp_covar_samp"] | undefined,
	max?: ModelTypes["Offer_aggregate_bool_exp_max"] | undefined,
	min?: ModelTypes["Offer_aggregate_bool_exp_min"] | undefined,
	stddev_samp?: ModelTypes["Offer_aggregate_bool_exp_stddev_samp"] | undefined,
	sum?: ModelTypes["Offer_aggregate_bool_exp_sum"] | undefined,
	var_samp?: ModelTypes["Offer_aggregate_bool_exp_var_samp"] | undefined
};
	["Offer_aggregate_bool_exp_avg"]: {
	arguments: ModelTypes["Offer_select_column_Offer_aggregate_bool_exp_avg_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["Offer_bool_exp"] | undefined,
	predicate: ModelTypes["float8_comparison_exp"]
};
	["Offer_aggregate_bool_exp_bool_and"]: {
	arguments: ModelTypes["Offer_select_column_Offer_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["Offer_bool_exp"] | undefined,
	predicate: ModelTypes["Boolean_comparison_exp"]
};
	["Offer_aggregate_bool_exp_bool_or"]: {
	arguments: ModelTypes["Offer_select_column_Offer_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["Offer_bool_exp"] | undefined,
	predicate: ModelTypes["Boolean_comparison_exp"]
};
	["Offer_aggregate_bool_exp_corr"]: {
	arguments: ModelTypes["Offer_aggregate_bool_exp_corr_arguments"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["Offer_bool_exp"] | undefined,
	predicate: ModelTypes["float8_comparison_exp"]
};
	["Offer_aggregate_bool_exp_corr_arguments"]: {
	X: ModelTypes["Offer_select_column_Offer_aggregate_bool_exp_corr_arguments_columns"],
	Y: ModelTypes["Offer_select_column_Offer_aggregate_bool_exp_corr_arguments_columns"]
};
	["Offer_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["Offer_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["Offer_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	["Offer_aggregate_bool_exp_covar_samp"]: {
	arguments: ModelTypes["Offer_aggregate_bool_exp_covar_samp_arguments"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["Offer_bool_exp"] | undefined,
	predicate: ModelTypes["float8_comparison_exp"]
};
	["Offer_aggregate_bool_exp_covar_samp_arguments"]: {
	X: ModelTypes["Offer_select_column_Offer_aggregate_bool_exp_covar_samp_arguments_columns"],
	Y: ModelTypes["Offer_select_column_Offer_aggregate_bool_exp_covar_samp_arguments_columns"]
};
	["Offer_aggregate_bool_exp_max"]: {
	arguments: ModelTypes["Offer_select_column_Offer_aggregate_bool_exp_max_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["Offer_bool_exp"] | undefined,
	predicate: ModelTypes["float8_comparison_exp"]
};
	["Offer_aggregate_bool_exp_min"]: {
	arguments: ModelTypes["Offer_select_column_Offer_aggregate_bool_exp_min_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["Offer_bool_exp"] | undefined,
	predicate: ModelTypes["float8_comparison_exp"]
};
	["Offer_aggregate_bool_exp_stddev_samp"]: {
	arguments: ModelTypes["Offer_select_column_Offer_aggregate_bool_exp_stddev_samp_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["Offer_bool_exp"] | undefined,
	predicate: ModelTypes["float8_comparison_exp"]
};
	["Offer_aggregate_bool_exp_sum"]: {
	arguments: ModelTypes["Offer_select_column_Offer_aggregate_bool_exp_sum_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["Offer_bool_exp"] | undefined,
	predicate: ModelTypes["float8_comparison_exp"]
};
	["Offer_aggregate_bool_exp_var_samp"]: {
	arguments: ModelTypes["Offer_select_column_Offer_aggregate_bool_exp_var_samp_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["Offer_bool_exp"] | undefined,
	predicate: ModelTypes["float8_comparison_exp"]
};
	/** aggregate fields of "Offer" */
["Offer_aggregate_fields"]: {
		avg?: ModelTypes["Offer_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["Offer_max_fields"] | undefined,
	min?: ModelTypes["Offer_min_fields"] | undefined,
	stddev?: ModelTypes["Offer_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["Offer_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["Offer_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["Offer_sum_fields"] | undefined,
	var_pop?: ModelTypes["Offer_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["Offer_var_samp_fields"] | undefined,
	variance?: ModelTypes["Offer_variance_fields"] | undefined
};
	/** order by aggregate values of table "Offer" */
["Offer_aggregate_order_by"]: {
	avg?: ModelTypes["Offer_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["Offer_max_order_by"] | undefined,
	min?: ModelTypes["Offer_min_order_by"] | undefined,
	stddev?: ModelTypes["Offer_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["Offer_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["Offer_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["Offer_sum_order_by"] | undefined,
	var_pop?: ModelTypes["Offer_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["Offer_var_samp_order_by"] | undefined,
	variance?: ModelTypes["Offer_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "Offer" */
["Offer_arr_rel_insert_input"]: {
	data: Array<ModelTypes["Offer_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["Offer_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["Offer_avg_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	packaging?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity?: number | undefined
};
	/** order by avg() on columns of table "Offer" */
["Offer_avg_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	packaging?: ModelTypes["order_by"] | undefined,
	price_per_unit?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	quantity?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "Offer". All fields are combined with a logical 'AND'. */
["Offer_bool_exp"]: {
	Business?: ModelTypes["Business_bool_exp"] | undefined,
	Product?: ModelTypes["Product_bool_exp"] | undefined,
	_and?: Array<ModelTypes["Offer_bool_exp"]> | undefined,
	_not?: ModelTypes["Offer_bool_exp"] | undefined,
	_or?: Array<ModelTypes["Offer_bool_exp"]> | undefined,
	active?: ModelTypes["Boolean_comparison_exp"] | undefined,
	business_id?: ModelTypes["Int_comparison_exp"] | undefined,
	created_at?: ModelTypes["timestamp_comparison_exp"] | undefined,
	end_date?: ModelTypes["timestamp_comparison_exp"] | undefined,
	harvest_date?: ModelTypes["timestamp_comparison_exp"] | undefined,
	id?: ModelTypes["Int_comparison_exp"] | undefined,
	packaging?: ModelTypes["float8_comparison_exp"] | undefined,
	price_per_unit?: ModelTypes["float8_comparison_exp"] | undefined,
	product_id?: ModelTypes["Int_comparison_exp"] | undefined,
	quantity?: ModelTypes["float8_comparison_exp"] | undefined,
	updated_at?: ModelTypes["timestamp_comparison_exp"] | undefined
};
	["Offer_constraint"]:Offer_constraint;
	/** input type for incrementing numeric columns in table "Offer" */
["Offer_inc_input"]: {
	business_id?: number | undefined,
	id?: number | undefined,
	packaging?: ModelTypes["float8"] | undefined,
	price_per_unit?: ModelTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity?: ModelTypes["float8"] | undefined
};
	/** input type for inserting data into table "Offer" */
["Offer_insert_input"]: {
	Business?: ModelTypes["Business_obj_rel_insert_input"] | undefined,
	Product?: ModelTypes["Product_obj_rel_insert_input"] | undefined,
	active?: boolean | undefined,
	business_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	end_date?: ModelTypes["timestamp"] | undefined,
	harvest_date?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	packaging?: ModelTypes["float8"] | undefined,
	price_per_unit?: ModelTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity?: ModelTypes["float8"] | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["Offer_max_fields"]: {
		business_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	end_date?: ModelTypes["timestamp"] | undefined,
	harvest_date?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	packaging?: ModelTypes["float8"] | undefined,
	price_per_unit?: ModelTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity?: ModelTypes["float8"] | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** order by max() on columns of table "Offer" */
["Offer_max_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	end_date?: ModelTypes["order_by"] | undefined,
	harvest_date?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	packaging?: ModelTypes["order_by"] | undefined,
	price_per_unit?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	quantity?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["Offer_min_fields"]: {
		business_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	end_date?: ModelTypes["timestamp"] | undefined,
	harvest_date?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	packaging?: ModelTypes["float8"] | undefined,
	price_per_unit?: ModelTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity?: ModelTypes["float8"] | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** order by min() on columns of table "Offer" */
["Offer_min_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	end_date?: ModelTypes["order_by"] | undefined,
	harvest_date?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	packaging?: ModelTypes["order_by"] | undefined,
	price_per_unit?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	quantity?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "Offer" */
["Offer_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["Offer"]>
};
	/** on_conflict condition type for table "Offer" */
["Offer_on_conflict"]: {
	constraint: ModelTypes["Offer_constraint"],
	update_columns: Array<ModelTypes["Offer_update_column"]>,
	where?: ModelTypes["Offer_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "Offer". */
["Offer_order_by"]: {
	Business?: ModelTypes["Business_order_by"] | undefined,
	Product?: ModelTypes["Product_order_by"] | undefined,
	active?: ModelTypes["order_by"] | undefined,
	business_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	end_date?: ModelTypes["order_by"] | undefined,
	harvest_date?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	packaging?: ModelTypes["order_by"] | undefined,
	price_per_unit?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	quantity?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: Offer */
["Offer_pk_columns_input"]: {
	id: number
};
	["Offer_select_column"]:Offer_select_column;
	["Offer_select_column_Offer_aggregate_bool_exp_avg_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_avg_arguments_columns;
	["Offer_select_column_Offer_aggregate_bool_exp_bool_and_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_bool_and_arguments_columns;
	["Offer_select_column_Offer_aggregate_bool_exp_bool_or_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_bool_or_arguments_columns;
	["Offer_select_column_Offer_aggregate_bool_exp_corr_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_corr_arguments_columns;
	["Offer_select_column_Offer_aggregate_bool_exp_covar_samp_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_covar_samp_arguments_columns;
	["Offer_select_column_Offer_aggregate_bool_exp_max_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_max_arguments_columns;
	["Offer_select_column_Offer_aggregate_bool_exp_min_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_min_arguments_columns;
	["Offer_select_column_Offer_aggregate_bool_exp_stddev_samp_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_stddev_samp_arguments_columns;
	["Offer_select_column_Offer_aggregate_bool_exp_sum_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_sum_arguments_columns;
	["Offer_select_column_Offer_aggregate_bool_exp_var_samp_arguments_columns"]:Offer_select_column_Offer_aggregate_bool_exp_var_samp_arguments_columns;
	/** input type for updating data in table "Offer" */
["Offer_set_input"]: {
	active?: boolean | undefined,
	business_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	end_date?: ModelTypes["timestamp"] | undefined,
	harvest_date?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	packaging?: ModelTypes["float8"] | undefined,
	price_per_unit?: ModelTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity?: ModelTypes["float8"] | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["Offer_stddev_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	packaging?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity?: number | undefined
};
	/** order by stddev() on columns of table "Offer" */
["Offer_stddev_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	packaging?: ModelTypes["order_by"] | undefined,
	price_per_unit?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	quantity?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["Offer_stddev_pop_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	packaging?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity?: number | undefined
};
	/** order by stddev_pop() on columns of table "Offer" */
["Offer_stddev_pop_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	packaging?: ModelTypes["order_by"] | undefined,
	price_per_unit?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	quantity?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["Offer_stddev_samp_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	packaging?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity?: number | undefined
};
	/** order by stddev_samp() on columns of table "Offer" */
["Offer_stddev_samp_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	packaging?: ModelTypes["order_by"] | undefined,
	price_per_unit?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	quantity?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "Offer" */
["Offer_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["Offer_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["Offer_stream_cursor_value_input"]: {
	active?: boolean | undefined,
	business_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	end_date?: ModelTypes["timestamp"] | undefined,
	harvest_date?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	packaging?: ModelTypes["float8"] | undefined,
	price_per_unit?: ModelTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity?: ModelTypes["float8"] | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["Offer_sum_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	packaging?: ModelTypes["float8"] | undefined,
	price_per_unit?: ModelTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity?: ModelTypes["float8"] | undefined
};
	/** order by sum() on columns of table "Offer" */
["Offer_sum_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	packaging?: ModelTypes["order_by"] | undefined,
	price_per_unit?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	quantity?: ModelTypes["order_by"] | undefined
};
	["Offer_update_column"]:Offer_update_column;
	["Offer_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["Offer_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["Offer_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["Offer_bool_exp"]
};
	/** aggregate var_pop on columns */
["Offer_var_pop_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	packaging?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity?: number | undefined
};
	/** order by var_pop() on columns of table "Offer" */
["Offer_var_pop_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	packaging?: ModelTypes["order_by"] | undefined,
	price_per_unit?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	quantity?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["Offer_var_samp_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	packaging?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity?: number | undefined
};
	/** order by var_samp() on columns of table "Offer" */
["Offer_var_samp_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	packaging?: ModelTypes["order_by"] | undefined,
	price_per_unit?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	quantity?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["Offer_variance_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	packaging?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity?: number | undefined
};
	/** order by variance() on columns of table "Offer" */
["Offer_variance_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	packaging?: ModelTypes["order_by"] | undefined,
	price_per_unit?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	quantity?: ModelTypes["order_by"] | undefined
};
	/** columns and relationships of "Order" */
["Order"]: {
		/** An object relationship */
	Business: ModelTypes["Business"],
	/** An object relationship */
	Product: ModelTypes["Product"],
	/** An array relationship */
	Transactions: Array<ModelTypes["Transaction"]>,
	/** An aggregate relationship */
	Transactions_aggregate: ModelTypes["Transaction_aggregate"],
	business_id: number,
	created_at: ModelTypes["timestamp"],
	end_date?: ModelTypes["timestamp"] | undefined,
	id: number,
	offer_type: ModelTypes["OfferType"],
	price_per_unit?: ModelTypes["float8"] | undefined,
	product_id: number,
	quantity_by_units: ModelTypes["float8"],
	start_date?: ModelTypes["timestamp"] | undefined,
	/** An array relationship */
	transactionsBySellOrderId: Array<ModelTypes["Transaction"]>,
	/** An aggregate relationship */
	transactionsBySellOrderId_aggregate: ModelTypes["Transaction_aggregate"],
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregated selection of "Order" */
["Order_aggregate"]: {
		aggregate?: ModelTypes["Order_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["Order"]>
};
	["Order_aggregate_bool_exp"]: {
	avg?: ModelTypes["Order_aggregate_bool_exp_avg"] | undefined,
	corr?: ModelTypes["Order_aggregate_bool_exp_corr"] | undefined,
	count?: ModelTypes["Order_aggregate_bool_exp_count"] | undefined,
	covar_samp?: ModelTypes["Order_aggregate_bool_exp_covar_samp"] | undefined,
	max?: ModelTypes["Order_aggregate_bool_exp_max"] | undefined,
	min?: ModelTypes["Order_aggregate_bool_exp_min"] | undefined,
	stddev_samp?: ModelTypes["Order_aggregate_bool_exp_stddev_samp"] | undefined,
	sum?: ModelTypes["Order_aggregate_bool_exp_sum"] | undefined,
	var_samp?: ModelTypes["Order_aggregate_bool_exp_var_samp"] | undefined
};
	["Order_aggregate_bool_exp_avg"]: {
	arguments: ModelTypes["Order_select_column_Order_aggregate_bool_exp_avg_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["Order_bool_exp"] | undefined,
	predicate: ModelTypes["float8_comparison_exp"]
};
	["Order_aggregate_bool_exp_corr"]: {
	arguments: ModelTypes["Order_aggregate_bool_exp_corr_arguments"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["Order_bool_exp"] | undefined,
	predicate: ModelTypes["float8_comparison_exp"]
};
	["Order_aggregate_bool_exp_corr_arguments"]: {
	X: ModelTypes["Order_select_column_Order_aggregate_bool_exp_corr_arguments_columns"],
	Y: ModelTypes["Order_select_column_Order_aggregate_bool_exp_corr_arguments_columns"]
};
	["Order_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["Order_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["Order_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	["Order_aggregate_bool_exp_covar_samp"]: {
	arguments: ModelTypes["Order_aggregate_bool_exp_covar_samp_arguments"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["Order_bool_exp"] | undefined,
	predicate: ModelTypes["float8_comparison_exp"]
};
	["Order_aggregate_bool_exp_covar_samp_arguments"]: {
	X: ModelTypes["Order_select_column_Order_aggregate_bool_exp_covar_samp_arguments_columns"],
	Y: ModelTypes["Order_select_column_Order_aggregate_bool_exp_covar_samp_arguments_columns"]
};
	["Order_aggregate_bool_exp_max"]: {
	arguments: ModelTypes["Order_select_column_Order_aggregate_bool_exp_max_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["Order_bool_exp"] | undefined,
	predicate: ModelTypes["float8_comparison_exp"]
};
	["Order_aggregate_bool_exp_min"]: {
	arguments: ModelTypes["Order_select_column_Order_aggregate_bool_exp_min_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["Order_bool_exp"] | undefined,
	predicate: ModelTypes["float8_comparison_exp"]
};
	["Order_aggregate_bool_exp_stddev_samp"]: {
	arguments: ModelTypes["Order_select_column_Order_aggregate_bool_exp_stddev_samp_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["Order_bool_exp"] | undefined,
	predicate: ModelTypes["float8_comparison_exp"]
};
	["Order_aggregate_bool_exp_sum"]: {
	arguments: ModelTypes["Order_select_column_Order_aggregate_bool_exp_sum_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["Order_bool_exp"] | undefined,
	predicate: ModelTypes["float8_comparison_exp"]
};
	["Order_aggregate_bool_exp_var_samp"]: {
	arguments: ModelTypes["Order_select_column_Order_aggregate_bool_exp_var_samp_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: ModelTypes["Order_bool_exp"] | undefined,
	predicate: ModelTypes["float8_comparison_exp"]
};
	/** aggregate fields of "Order" */
["Order_aggregate_fields"]: {
		avg?: ModelTypes["Order_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["Order_max_fields"] | undefined,
	min?: ModelTypes["Order_min_fields"] | undefined,
	stddev?: ModelTypes["Order_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["Order_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["Order_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["Order_sum_fields"] | undefined,
	var_pop?: ModelTypes["Order_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["Order_var_samp_fields"] | undefined,
	variance?: ModelTypes["Order_variance_fields"] | undefined
};
	/** order by aggregate values of table "Order" */
["Order_aggregate_order_by"]: {
	avg?: ModelTypes["Order_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["Order_max_order_by"] | undefined,
	min?: ModelTypes["Order_min_order_by"] | undefined,
	stddev?: ModelTypes["Order_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["Order_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["Order_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["Order_sum_order_by"] | undefined,
	var_pop?: ModelTypes["Order_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["Order_var_samp_order_by"] | undefined,
	variance?: ModelTypes["Order_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "Order" */
["Order_arr_rel_insert_input"]: {
	data: Array<ModelTypes["Order_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["Order_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["Order_avg_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity_by_units?: number | undefined
};
	/** order by avg() on columns of table "Order" */
["Order_avg_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	price_per_unit?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	quantity_by_units?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "Order". All fields are combined with a logical 'AND'. */
["Order_bool_exp"]: {
	Business?: ModelTypes["Business_bool_exp"] | undefined,
	Product?: ModelTypes["Product_bool_exp"] | undefined,
	Transactions?: ModelTypes["Transaction_bool_exp"] | undefined,
	Transactions_aggregate?: ModelTypes["Transaction_aggregate_bool_exp"] | undefined,
	_and?: Array<ModelTypes["Order_bool_exp"]> | undefined,
	_not?: ModelTypes["Order_bool_exp"] | undefined,
	_or?: Array<ModelTypes["Order_bool_exp"]> | undefined,
	business_id?: ModelTypes["Int_comparison_exp"] | undefined,
	created_at?: ModelTypes["timestamp_comparison_exp"] | undefined,
	end_date?: ModelTypes["timestamp_comparison_exp"] | undefined,
	id?: ModelTypes["Int_comparison_exp"] | undefined,
	offer_type?: ModelTypes["OfferType_comparison_exp"] | undefined,
	price_per_unit?: ModelTypes["float8_comparison_exp"] | undefined,
	product_id?: ModelTypes["Int_comparison_exp"] | undefined,
	quantity_by_units?: ModelTypes["float8_comparison_exp"] | undefined,
	start_date?: ModelTypes["timestamp_comparison_exp"] | undefined,
	transactionsBySellOrderId?: ModelTypes["Transaction_bool_exp"] | undefined,
	transactionsBySellOrderId_aggregate?: ModelTypes["Transaction_aggregate_bool_exp"] | undefined,
	updated_at?: ModelTypes["timestamp_comparison_exp"] | undefined
};
	["Order_constraint"]:Order_constraint;
	/** input type for incrementing numeric columns in table "Order" */
["Order_inc_input"]: {
	business_id?: number | undefined,
	id?: number | undefined,
	price_per_unit?: ModelTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity_by_units?: ModelTypes["float8"] | undefined
};
	/** input type for inserting data into table "Order" */
["Order_insert_input"]: {
	Business?: ModelTypes["Business_obj_rel_insert_input"] | undefined,
	Product?: ModelTypes["Product_obj_rel_insert_input"] | undefined,
	Transactions?: ModelTypes["Transaction_arr_rel_insert_input"] | undefined,
	business_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	end_date?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	offer_type?: ModelTypes["OfferType"] | undefined,
	price_per_unit?: ModelTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity_by_units?: ModelTypes["float8"] | undefined,
	start_date?: ModelTypes["timestamp"] | undefined,
	transactionsBySellOrderId?: ModelTypes["Transaction_arr_rel_insert_input"] | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["Order_max_fields"]: {
		business_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	end_date?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	offer_type?: ModelTypes["OfferType"] | undefined,
	price_per_unit?: ModelTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity_by_units?: ModelTypes["float8"] | undefined,
	start_date?: ModelTypes["timestamp"] | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** order by max() on columns of table "Order" */
["Order_max_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	end_date?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	offer_type?: ModelTypes["order_by"] | undefined,
	price_per_unit?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	quantity_by_units?: ModelTypes["order_by"] | undefined,
	start_date?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["Order_min_fields"]: {
		business_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	end_date?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	offer_type?: ModelTypes["OfferType"] | undefined,
	price_per_unit?: ModelTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity_by_units?: ModelTypes["float8"] | undefined,
	start_date?: ModelTypes["timestamp"] | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** order by min() on columns of table "Order" */
["Order_min_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	end_date?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	offer_type?: ModelTypes["order_by"] | undefined,
	price_per_unit?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	quantity_by_units?: ModelTypes["order_by"] | undefined,
	start_date?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "Order" */
["Order_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["Order"]>
};
	/** input type for inserting object relation for remote table "Order" */
["Order_obj_rel_insert_input"]: {
	data: ModelTypes["Order_insert_input"],
	/** upsert condition */
	on_conflict?: ModelTypes["Order_on_conflict"] | undefined
};
	/** on_conflict condition type for table "Order" */
["Order_on_conflict"]: {
	constraint: ModelTypes["Order_constraint"],
	update_columns: Array<ModelTypes["Order_update_column"]>,
	where?: ModelTypes["Order_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "Order". */
["Order_order_by"]: {
	Business?: ModelTypes["Business_order_by"] | undefined,
	Product?: ModelTypes["Product_order_by"] | undefined,
	Transactions_aggregate?: ModelTypes["Transaction_aggregate_order_by"] | undefined,
	business_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	end_date?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	offer_type?: ModelTypes["order_by"] | undefined,
	price_per_unit?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	quantity_by_units?: ModelTypes["order_by"] | undefined,
	start_date?: ModelTypes["order_by"] | undefined,
	transactionsBySellOrderId_aggregate?: ModelTypes["Transaction_aggregate_order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: Order */
["Order_pk_columns_input"]: {
	id: number
};
	["Order_select_column"]:Order_select_column;
	["Order_select_column_Order_aggregate_bool_exp_avg_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_avg_arguments_columns;
	["Order_select_column_Order_aggregate_bool_exp_corr_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_corr_arguments_columns;
	["Order_select_column_Order_aggregate_bool_exp_covar_samp_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_covar_samp_arguments_columns;
	["Order_select_column_Order_aggregate_bool_exp_max_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_max_arguments_columns;
	["Order_select_column_Order_aggregate_bool_exp_min_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_min_arguments_columns;
	["Order_select_column_Order_aggregate_bool_exp_stddev_samp_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_stddev_samp_arguments_columns;
	["Order_select_column_Order_aggregate_bool_exp_sum_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_sum_arguments_columns;
	["Order_select_column_Order_aggregate_bool_exp_var_samp_arguments_columns"]:Order_select_column_Order_aggregate_bool_exp_var_samp_arguments_columns;
	/** input type for updating data in table "Order" */
["Order_set_input"]: {
	business_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	end_date?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	offer_type?: ModelTypes["OfferType"] | undefined,
	price_per_unit?: ModelTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity_by_units?: ModelTypes["float8"] | undefined,
	start_date?: ModelTypes["timestamp"] | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["Order_stddev_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity_by_units?: number | undefined
};
	/** order by stddev() on columns of table "Order" */
["Order_stddev_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	price_per_unit?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	quantity_by_units?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["Order_stddev_pop_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity_by_units?: number | undefined
};
	/** order by stddev_pop() on columns of table "Order" */
["Order_stddev_pop_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	price_per_unit?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	quantity_by_units?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["Order_stddev_samp_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity_by_units?: number | undefined
};
	/** order by stddev_samp() on columns of table "Order" */
["Order_stddev_samp_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	price_per_unit?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	quantity_by_units?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "Order" */
["Order_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["Order_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["Order_stream_cursor_value_input"]: {
	business_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	end_date?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	offer_type?: ModelTypes["OfferType"] | undefined,
	price_per_unit?: ModelTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity_by_units?: ModelTypes["float8"] | undefined,
	start_date?: ModelTypes["timestamp"] | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["Order_sum_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	price_per_unit?: ModelTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity_by_units?: ModelTypes["float8"] | undefined
};
	/** order by sum() on columns of table "Order" */
["Order_sum_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	price_per_unit?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	quantity_by_units?: ModelTypes["order_by"] | undefined
};
	["Order_update_column"]:Order_update_column;
	["Order_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["Order_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["Order_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["Order_bool_exp"]
};
	/** aggregate var_pop on columns */
["Order_var_pop_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity_by_units?: number | undefined
};
	/** order by var_pop() on columns of table "Order" */
["Order_var_pop_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	price_per_unit?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	quantity_by_units?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["Order_var_samp_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity_by_units?: number | undefined
};
	/** order by var_samp() on columns of table "Order" */
["Order_var_samp_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	price_per_unit?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	quantity_by_units?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["Order_variance_fields"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity_by_units?: number | undefined
};
	/** order by variance() on columns of table "Order" */
["Order_variance_order_by"]: {
	business_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	price_per_unit?: ModelTypes["order_by"] | undefined,
	product_id?: ModelTypes["order_by"] | undefined,
	quantity_by_units?: ModelTypes["order_by"] | undefined
};
	/** columns and relationships of "Product" */
["Product"]: {
		/** An array relationship */
	BusinessProducts: Array<ModelTypes["BusinessProduct"]>,
	/** An aggregate relationship */
	BusinessProducts_aggregate: ModelTypes["BusinessProduct_aggregate"],
	/** An object relationship */
	Category: ModelTypes["Category"],
	/** An array relationship */
	Offers: Array<ModelTypes["Offer"]>,
	/** An aggregate relationship */
	Offers_aggregate: ModelTypes["Offer_aggregate"],
	/** An array relationship */
	Orders: Array<ModelTypes["Order"]>,
	/** An aggregate relationship */
	Orders_aggregate: ModelTypes["Order_aggregate"],
	category_id: number,
	created_at: ModelTypes["timestamp"],
	id: number,
	image_url?: string | undefined,
	measurement_unit: string,
	name: string,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregated selection of "Product" */
["Product_aggregate"]: {
		aggregate?: ModelTypes["Product_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["Product"]>
};
	["Product_aggregate_bool_exp"]: {
	count?: ModelTypes["Product_aggregate_bool_exp_count"] | undefined
};
	["Product_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["Product_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["Product_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "Product" */
["Product_aggregate_fields"]: {
		avg?: ModelTypes["Product_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["Product_max_fields"] | undefined,
	min?: ModelTypes["Product_min_fields"] | undefined,
	stddev?: ModelTypes["Product_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["Product_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["Product_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["Product_sum_fields"] | undefined,
	var_pop?: ModelTypes["Product_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["Product_var_samp_fields"] | undefined,
	variance?: ModelTypes["Product_variance_fields"] | undefined
};
	/** order by aggregate values of table "Product" */
["Product_aggregate_order_by"]: {
	avg?: ModelTypes["Product_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["Product_max_order_by"] | undefined,
	min?: ModelTypes["Product_min_order_by"] | undefined,
	stddev?: ModelTypes["Product_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["Product_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["Product_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["Product_sum_order_by"] | undefined,
	var_pop?: ModelTypes["Product_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["Product_var_samp_order_by"] | undefined,
	variance?: ModelTypes["Product_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "Product" */
["Product_arr_rel_insert_input"]: {
	data: Array<ModelTypes["Product_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["Product_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["Product_avg_fields"]: {
		category_id?: number | undefined,
	id?: number | undefined
};
	/** order by avg() on columns of table "Product" */
["Product_avg_order_by"]: {
	category_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "Product". All fields are combined with a logical 'AND'. */
["Product_bool_exp"]: {
	BusinessProducts?: ModelTypes["BusinessProduct_bool_exp"] | undefined,
	BusinessProducts_aggregate?: ModelTypes["BusinessProduct_aggregate_bool_exp"] | undefined,
	Category?: ModelTypes["Category_bool_exp"] | undefined,
	Offers?: ModelTypes["Offer_bool_exp"] | undefined,
	Offers_aggregate?: ModelTypes["Offer_aggregate_bool_exp"] | undefined,
	Orders?: ModelTypes["Order_bool_exp"] | undefined,
	Orders_aggregate?: ModelTypes["Order_aggregate_bool_exp"] | undefined,
	_and?: Array<ModelTypes["Product_bool_exp"]> | undefined,
	_not?: ModelTypes["Product_bool_exp"] | undefined,
	_or?: Array<ModelTypes["Product_bool_exp"]> | undefined,
	category_id?: ModelTypes["Int_comparison_exp"] | undefined,
	created_at?: ModelTypes["timestamp_comparison_exp"] | undefined,
	id?: ModelTypes["Int_comparison_exp"] | undefined,
	image_url?: ModelTypes["String_comparison_exp"] | undefined,
	measurement_unit?: ModelTypes["String_comparison_exp"] | undefined,
	name?: ModelTypes["String_comparison_exp"] | undefined,
	updated_at?: ModelTypes["timestamp_comparison_exp"] | undefined
};
	["Product_constraint"]:Product_constraint;
	/** input type for incrementing numeric columns in table "Product" */
["Product_inc_input"]: {
	category_id?: number | undefined,
	id?: number | undefined
};
	/** input type for inserting data into table "Product" */
["Product_insert_input"]: {
	BusinessProducts?: ModelTypes["BusinessProduct_arr_rel_insert_input"] | undefined,
	Category?: ModelTypes["Category_obj_rel_insert_input"] | undefined,
	Offers?: ModelTypes["Offer_arr_rel_insert_input"] | undefined,
	Orders?: ModelTypes["Order_arr_rel_insert_input"] | undefined,
	category_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	image_url?: string | undefined,
	measurement_unit?: string | undefined,
	name?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["Product_max_fields"]: {
		category_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	image_url?: string | undefined,
	measurement_unit?: string | undefined,
	name?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** order by max() on columns of table "Product" */
["Product_max_order_by"]: {
	category_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	image_url?: ModelTypes["order_by"] | undefined,
	measurement_unit?: ModelTypes["order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["Product_min_fields"]: {
		category_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	image_url?: string | undefined,
	measurement_unit?: string | undefined,
	name?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** order by min() on columns of table "Product" */
["Product_min_order_by"]: {
	category_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	image_url?: ModelTypes["order_by"] | undefined,
	measurement_unit?: ModelTypes["order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "Product" */
["Product_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["Product"]>
};
	/** input type for inserting object relation for remote table "Product" */
["Product_obj_rel_insert_input"]: {
	data: ModelTypes["Product_insert_input"],
	/** upsert condition */
	on_conflict?: ModelTypes["Product_on_conflict"] | undefined
};
	/** on_conflict condition type for table "Product" */
["Product_on_conflict"]: {
	constraint: ModelTypes["Product_constraint"],
	update_columns: Array<ModelTypes["Product_update_column"]>,
	where?: ModelTypes["Product_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "Product". */
["Product_order_by"]: {
	BusinessProducts_aggregate?: ModelTypes["BusinessProduct_aggregate_order_by"] | undefined,
	Category?: ModelTypes["Category_order_by"] | undefined,
	Offers_aggregate?: ModelTypes["Offer_aggregate_order_by"] | undefined,
	Orders_aggregate?: ModelTypes["Order_aggregate_order_by"] | undefined,
	category_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	image_url?: ModelTypes["order_by"] | undefined,
	measurement_unit?: ModelTypes["order_by"] | undefined,
	name?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: Product */
["Product_pk_columns_input"]: {
	id: number
};
	["Product_select_column"]:Product_select_column;
	/** input type for updating data in table "Product" */
["Product_set_input"]: {
	category_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	image_url?: string | undefined,
	measurement_unit?: string | undefined,
	name?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["Product_stddev_fields"]: {
		category_id?: number | undefined,
	id?: number | undefined
};
	/** order by stddev() on columns of table "Product" */
["Product_stddev_order_by"]: {
	category_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["Product_stddev_pop_fields"]: {
		category_id?: number | undefined,
	id?: number | undefined
};
	/** order by stddev_pop() on columns of table "Product" */
["Product_stddev_pop_order_by"]: {
	category_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["Product_stddev_samp_fields"]: {
		category_id?: number | undefined,
	id?: number | undefined
};
	/** order by stddev_samp() on columns of table "Product" */
["Product_stddev_samp_order_by"]: {
	category_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "Product" */
["Product_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["Product_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["Product_stream_cursor_value_input"]: {
	category_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	image_url?: string | undefined,
	measurement_unit?: string | undefined,
	name?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["Product_sum_fields"]: {
		category_id?: number | undefined,
	id?: number | undefined
};
	/** order by sum() on columns of table "Product" */
["Product_sum_order_by"]: {
	category_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	["Product_update_column"]:Product_update_column;
	["Product_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["Product_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["Product_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["Product_bool_exp"]
};
	/** aggregate var_pop on columns */
["Product_var_pop_fields"]: {
		category_id?: number | undefined,
	id?: number | undefined
};
	/** order by var_pop() on columns of table "Product" */
["Product_var_pop_order_by"]: {
	category_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["Product_var_samp_fields"]: {
		category_id?: number | undefined,
	id?: number | undefined
};
	/** order by var_samp() on columns of table "Product" */
["Product_var_samp_order_by"]: {
	category_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["Product_variance_fields"]: {
		category_id?: number | undefined,
	id?: number | undefined
};
	/** order by variance() on columns of table "Product" */
["Product_variance_order_by"]: {
	category_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined
};
	/** columns and relationships of "Profile" */
["Profile"]: {
		/** An array relationship */
	BusinessWorkers: Array<ModelTypes["BusinessWorker"]>,
	/** An aggregate relationship */
	BusinessWorkers_aggregate: ModelTypes["BusinessWorker_aggregate"],
	created_at: ModelTypes["timestamp"],
	first_name?: string | undefined,
	id: number,
	last_name?: string | undefined,
	phone?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregated selection of "Profile" */
["Profile_aggregate"]: {
		aggregate?: ModelTypes["Profile_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["Profile"]>
};
	/** aggregate fields of "Profile" */
["Profile_aggregate_fields"]: {
		avg?: ModelTypes["Profile_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["Profile_max_fields"] | undefined,
	min?: ModelTypes["Profile_min_fields"] | undefined,
	stddev?: ModelTypes["Profile_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["Profile_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["Profile_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["Profile_sum_fields"] | undefined,
	var_pop?: ModelTypes["Profile_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["Profile_var_samp_fields"] | undefined,
	variance?: ModelTypes["Profile_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["Profile_avg_fields"]: {
		id?: number | undefined
};
	/** Boolean expression to filter rows from the table "Profile". All fields are combined with a logical 'AND'. */
["Profile_bool_exp"]: {
	BusinessWorkers?: ModelTypes["BusinessWorker_bool_exp"] | undefined,
	BusinessWorkers_aggregate?: ModelTypes["BusinessWorker_aggregate_bool_exp"] | undefined,
	_and?: Array<ModelTypes["Profile_bool_exp"]> | undefined,
	_not?: ModelTypes["Profile_bool_exp"] | undefined,
	_or?: Array<ModelTypes["Profile_bool_exp"]> | undefined,
	created_at?: ModelTypes["timestamp_comparison_exp"] | undefined,
	first_name?: ModelTypes["String_comparison_exp"] | undefined,
	id?: ModelTypes["Int_comparison_exp"] | undefined,
	last_name?: ModelTypes["String_comparison_exp"] | undefined,
	phone?: ModelTypes["String_comparison_exp"] | undefined,
	updated_at?: ModelTypes["timestamp_comparison_exp"] | undefined
};
	["Profile_constraint"]:Profile_constraint;
	/** input type for incrementing numeric columns in table "Profile" */
["Profile_inc_input"]: {
	id?: number | undefined
};
	/** input type for inserting data into table "Profile" */
["Profile_insert_input"]: {
	BusinessWorkers?: ModelTypes["BusinessWorker_arr_rel_insert_input"] | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	first_name?: string | undefined,
	id?: number | undefined,
	last_name?: string | undefined,
	phone?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["Profile_max_fields"]: {
		created_at?: ModelTypes["timestamp"] | undefined,
	first_name?: string | undefined,
	id?: number | undefined,
	last_name?: string | undefined,
	phone?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate min on columns */
["Profile_min_fields"]: {
		created_at?: ModelTypes["timestamp"] | undefined,
	first_name?: string | undefined,
	id?: number | undefined,
	last_name?: string | undefined,
	phone?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** response of any mutation on the table "Profile" */
["Profile_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["Profile"]>
};
	/** input type for inserting object relation for remote table "Profile" */
["Profile_obj_rel_insert_input"]: {
	data: ModelTypes["Profile_insert_input"],
	/** upsert condition */
	on_conflict?: ModelTypes["Profile_on_conflict"] | undefined
};
	/** on_conflict condition type for table "Profile" */
["Profile_on_conflict"]: {
	constraint: ModelTypes["Profile_constraint"],
	update_columns: Array<ModelTypes["Profile_update_column"]>,
	where?: ModelTypes["Profile_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "Profile". */
["Profile_order_by"]: {
	BusinessWorkers_aggregate?: ModelTypes["BusinessWorker_aggregate_order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	first_name?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	last_name?: ModelTypes["order_by"] | undefined,
	phone?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: Profile */
["Profile_pk_columns_input"]: {
	id: number
};
	["Profile_select_column"]:Profile_select_column;
	/** input type for updating data in table "Profile" */
["Profile_set_input"]: {
	created_at?: ModelTypes["timestamp"] | undefined,
	first_name?: string | undefined,
	id?: number | undefined,
	last_name?: string | undefined,
	phone?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["Profile_stddev_fields"]: {
		id?: number | undefined
};
	/** aggregate stddev_pop on columns */
["Profile_stddev_pop_fields"]: {
		id?: number | undefined
};
	/** aggregate stddev_samp on columns */
["Profile_stddev_samp_fields"]: {
		id?: number | undefined
};
	/** Streaming cursor of the table "Profile" */
["Profile_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["Profile_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["Profile_stream_cursor_value_input"]: {
	created_at?: ModelTypes["timestamp"] | undefined,
	first_name?: string | undefined,
	id?: number | undefined,
	last_name?: string | undefined,
	phone?: string | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["Profile_sum_fields"]: {
		id?: number | undefined
};
	["Profile_update_column"]:Profile_update_column;
	["Profile_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["Profile_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["Profile_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["Profile_bool_exp"]
};
	/** aggregate var_pop on columns */
["Profile_var_pop_fields"]: {
		id?: number | undefined
};
	/** aggregate var_samp on columns */
["Profile_var_samp_fields"]: {
		id?: number | undefined
};
	/** aggregate variance on columns */
["Profile_variance_fields"]: {
		id?: number | undefined
};
	/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
["String_comparison_exp"]: {
	_eq?: string | undefined,
	_gt?: string | undefined,
	_gte?: string | undefined,
	/** does the column match the given case-insensitive pattern */
	_ilike?: string | undefined,
	_in?: Array<string> | undefined,
	/** does the column match the given POSIX regular expression, case insensitive */
	_iregex?: string | undefined,
	_is_null?: boolean | undefined,
	/** does the column match the given pattern */
	_like?: string | undefined,
	_lt?: string | undefined,
	_lte?: string | undefined,
	_neq?: string | undefined,
	/** does the column NOT match the given case-insensitive pattern */
	_nilike?: string | undefined,
	_nin?: Array<string> | undefined,
	/** does the column NOT match the given POSIX regular expression, case insensitive */
	_niregex?: string | undefined,
	/** does the column NOT match the given pattern */
	_nlike?: string | undefined,
	/** does the column NOT match the given POSIX regular expression, case sensitive */
	_nregex?: string | undefined,
	/** does the column NOT match the given SQL regular expression */
	_nsimilar?: string | undefined,
	/** does the column match the given POSIX regular expression, case sensitive */
	_regex?: string | undefined,
	/** does the column match the given SQL regular expression */
	_similar?: string | undefined
};
	/** columns and relationships of "Transaction" */
["Transaction"]: {
		/** An object relationship */
	Order: ModelTypes["Order"],
	/** An array relationship */
	TransactionReviews: Array<ModelTypes["TransactionReview"]>,
	/** An aggregate relationship */
	TransactionReviews_aggregate: ModelTypes["TransactionReview_aggregate"],
	buy_order_id: number,
	created_at: ModelTypes["timestamp"],
	id: number,
	/** An object relationship */
	orderBySellOrderId: ModelTypes["Order"],
	profile_id: number,
	sell_order_id: number,
	status: ModelTypes["TransactionStatus"],
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** columns and relationships of "TransactionReview" */
["TransactionReview"]: {
		/** An object relationship */
	Transaction: ModelTypes["Transaction"],
	comment: string,
	created_at: ModelTypes["timestamp"],
	id: number,
	rating: number,
	transaction_id: number,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregated selection of "TransactionReview" */
["TransactionReview_aggregate"]: {
		aggregate?: ModelTypes["TransactionReview_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["TransactionReview"]>
};
	["TransactionReview_aggregate_bool_exp"]: {
	count?: ModelTypes["TransactionReview_aggregate_bool_exp_count"] | undefined
};
	["TransactionReview_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["TransactionReview_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["TransactionReview_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "TransactionReview" */
["TransactionReview_aggregate_fields"]: {
		avg?: ModelTypes["TransactionReview_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["TransactionReview_max_fields"] | undefined,
	min?: ModelTypes["TransactionReview_min_fields"] | undefined,
	stddev?: ModelTypes["TransactionReview_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["TransactionReview_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["TransactionReview_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["TransactionReview_sum_fields"] | undefined,
	var_pop?: ModelTypes["TransactionReview_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["TransactionReview_var_samp_fields"] | undefined,
	variance?: ModelTypes["TransactionReview_variance_fields"] | undefined
};
	/** order by aggregate values of table "TransactionReview" */
["TransactionReview_aggregate_order_by"]: {
	avg?: ModelTypes["TransactionReview_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["TransactionReview_max_order_by"] | undefined,
	min?: ModelTypes["TransactionReview_min_order_by"] | undefined,
	stddev?: ModelTypes["TransactionReview_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["TransactionReview_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["TransactionReview_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["TransactionReview_sum_order_by"] | undefined,
	var_pop?: ModelTypes["TransactionReview_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["TransactionReview_var_samp_order_by"] | undefined,
	variance?: ModelTypes["TransactionReview_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "TransactionReview" */
["TransactionReview_arr_rel_insert_input"]: {
	data: Array<ModelTypes["TransactionReview_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["TransactionReview_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["TransactionReview_avg_fields"]: {
		id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined
};
	/** order by avg() on columns of table "TransactionReview" */
["TransactionReview_avg_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	rating?: ModelTypes["order_by"] | undefined,
	transaction_id?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "TransactionReview". All fields are combined with a logical 'AND'. */
["TransactionReview_bool_exp"]: {
	Transaction?: ModelTypes["Transaction_bool_exp"] | undefined,
	_and?: Array<ModelTypes["TransactionReview_bool_exp"]> | undefined,
	_not?: ModelTypes["TransactionReview_bool_exp"] | undefined,
	_or?: Array<ModelTypes["TransactionReview_bool_exp"]> | undefined,
	comment?: ModelTypes["String_comparison_exp"] | undefined,
	created_at?: ModelTypes["timestamp_comparison_exp"] | undefined,
	id?: ModelTypes["Int_comparison_exp"] | undefined,
	rating?: ModelTypes["Int_comparison_exp"] | undefined,
	transaction_id?: ModelTypes["Int_comparison_exp"] | undefined,
	updated_at?: ModelTypes["timestamp_comparison_exp"] | undefined
};
	["TransactionReview_constraint"]:TransactionReview_constraint;
	/** input type for incrementing numeric columns in table "TransactionReview" */
["TransactionReview_inc_input"]: {
	id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined
};
	/** input type for inserting data into table "TransactionReview" */
["TransactionReview_insert_input"]: {
	Transaction?: ModelTypes["Transaction_obj_rel_insert_input"] | undefined,
	comment?: string | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["TransactionReview_max_fields"]: {
		comment?: string | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** order by max() on columns of table "TransactionReview" */
["TransactionReview_max_order_by"]: {
	comment?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	rating?: ModelTypes["order_by"] | undefined,
	transaction_id?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["TransactionReview_min_fields"]: {
		comment?: string | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** order by min() on columns of table "TransactionReview" */
["TransactionReview_min_order_by"]: {
	comment?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	rating?: ModelTypes["order_by"] | undefined,
	transaction_id?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "TransactionReview" */
["TransactionReview_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["TransactionReview"]>
};
	/** on_conflict condition type for table "TransactionReview" */
["TransactionReview_on_conflict"]: {
	constraint: ModelTypes["TransactionReview_constraint"],
	update_columns: Array<ModelTypes["TransactionReview_update_column"]>,
	where?: ModelTypes["TransactionReview_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "TransactionReview". */
["TransactionReview_order_by"]: {
	Transaction?: ModelTypes["Transaction_order_by"] | undefined,
	comment?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	rating?: ModelTypes["order_by"] | undefined,
	transaction_id?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: TransactionReview */
["TransactionReview_pk_columns_input"]: {
	id: number
};
	["TransactionReview_select_column"]:TransactionReview_select_column;
	/** input type for updating data in table "TransactionReview" */
["TransactionReview_set_input"]: {
	comment?: string | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["TransactionReview_stddev_fields"]: {
		id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined
};
	/** order by stddev() on columns of table "TransactionReview" */
["TransactionReview_stddev_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	rating?: ModelTypes["order_by"] | undefined,
	transaction_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["TransactionReview_stddev_pop_fields"]: {
		id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "TransactionReview" */
["TransactionReview_stddev_pop_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	rating?: ModelTypes["order_by"] | undefined,
	transaction_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["TransactionReview_stddev_samp_fields"]: {
		id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "TransactionReview" */
["TransactionReview_stddev_samp_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	rating?: ModelTypes["order_by"] | undefined,
	transaction_id?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "TransactionReview" */
["TransactionReview_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["TransactionReview_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["TransactionReview_stream_cursor_value_input"]: {
	comment?: string | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["TransactionReview_sum_fields"]: {
		id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined
};
	/** order by sum() on columns of table "TransactionReview" */
["TransactionReview_sum_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	rating?: ModelTypes["order_by"] | undefined,
	transaction_id?: ModelTypes["order_by"] | undefined
};
	["TransactionReview_update_column"]:TransactionReview_update_column;
	["TransactionReview_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["TransactionReview_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["TransactionReview_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["TransactionReview_bool_exp"]
};
	/** aggregate var_pop on columns */
["TransactionReview_var_pop_fields"]: {
		id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined
};
	/** order by var_pop() on columns of table "TransactionReview" */
["TransactionReview_var_pop_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	rating?: ModelTypes["order_by"] | undefined,
	transaction_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["TransactionReview_var_samp_fields"]: {
		id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined
};
	/** order by var_samp() on columns of table "TransactionReview" */
["TransactionReview_var_samp_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	rating?: ModelTypes["order_by"] | undefined,
	transaction_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["TransactionReview_variance_fields"]: {
		id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined
};
	/** order by variance() on columns of table "TransactionReview" */
["TransactionReview_variance_order_by"]: {
	id?: ModelTypes["order_by"] | undefined,
	rating?: ModelTypes["order_by"] | undefined,
	transaction_id?: ModelTypes["order_by"] | undefined
};
	["TransactionStatus"]:any;
	/** Boolean expression to compare columns of type "TransactionStatus". All fields are combined with logical 'AND'. */
["TransactionStatus_comparison_exp"]: {
	_eq?: ModelTypes["TransactionStatus"] | undefined,
	_gt?: ModelTypes["TransactionStatus"] | undefined,
	_gte?: ModelTypes["TransactionStatus"] | undefined,
	_in?: Array<ModelTypes["TransactionStatus"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: ModelTypes["TransactionStatus"] | undefined,
	_lte?: ModelTypes["TransactionStatus"] | undefined,
	_neq?: ModelTypes["TransactionStatus"] | undefined,
	_nin?: Array<ModelTypes["TransactionStatus"]> | undefined
};
	/** aggregated selection of "Transaction" */
["Transaction_aggregate"]: {
		aggregate?: ModelTypes["Transaction_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["Transaction"]>
};
	["Transaction_aggregate_bool_exp"]: {
	count?: ModelTypes["Transaction_aggregate_bool_exp_count"] | undefined
};
	["Transaction_aggregate_bool_exp_count"]: {
	arguments?: Array<ModelTypes["Transaction_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: ModelTypes["Transaction_bool_exp"] | undefined,
	predicate: ModelTypes["Int_comparison_exp"]
};
	/** aggregate fields of "Transaction" */
["Transaction_aggregate_fields"]: {
		avg?: ModelTypes["Transaction_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["Transaction_max_fields"] | undefined,
	min?: ModelTypes["Transaction_min_fields"] | undefined,
	stddev?: ModelTypes["Transaction_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["Transaction_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["Transaction_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["Transaction_sum_fields"] | undefined,
	var_pop?: ModelTypes["Transaction_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["Transaction_var_samp_fields"] | undefined,
	variance?: ModelTypes["Transaction_variance_fields"] | undefined
};
	/** order by aggregate values of table "Transaction" */
["Transaction_aggregate_order_by"]: {
	avg?: ModelTypes["Transaction_avg_order_by"] | undefined,
	count?: ModelTypes["order_by"] | undefined,
	max?: ModelTypes["Transaction_max_order_by"] | undefined,
	min?: ModelTypes["Transaction_min_order_by"] | undefined,
	stddev?: ModelTypes["Transaction_stddev_order_by"] | undefined,
	stddev_pop?: ModelTypes["Transaction_stddev_pop_order_by"] | undefined,
	stddev_samp?: ModelTypes["Transaction_stddev_samp_order_by"] | undefined,
	sum?: ModelTypes["Transaction_sum_order_by"] | undefined,
	var_pop?: ModelTypes["Transaction_var_pop_order_by"] | undefined,
	var_samp?: ModelTypes["Transaction_var_samp_order_by"] | undefined,
	variance?: ModelTypes["Transaction_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "Transaction" */
["Transaction_arr_rel_insert_input"]: {
	data: Array<ModelTypes["Transaction_insert_input"]>,
	/** upsert condition */
	on_conflict?: ModelTypes["Transaction_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["Transaction_avg_fields"]: {
		buy_order_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined
};
	/** order by avg() on columns of table "Transaction" */
["Transaction_avg_order_by"]: {
	buy_order_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	profile_id?: ModelTypes["order_by"] | undefined,
	sell_order_id?: ModelTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "Transaction". All fields are combined with a logical 'AND'. */
["Transaction_bool_exp"]: {
	Order?: ModelTypes["Order_bool_exp"] | undefined,
	TransactionReviews?: ModelTypes["TransactionReview_bool_exp"] | undefined,
	TransactionReviews_aggregate?: ModelTypes["TransactionReview_aggregate_bool_exp"] | undefined,
	_and?: Array<ModelTypes["Transaction_bool_exp"]> | undefined,
	_not?: ModelTypes["Transaction_bool_exp"] | undefined,
	_or?: Array<ModelTypes["Transaction_bool_exp"]> | undefined,
	buy_order_id?: ModelTypes["Int_comparison_exp"] | undefined,
	created_at?: ModelTypes["timestamp_comparison_exp"] | undefined,
	id?: ModelTypes["Int_comparison_exp"] | undefined,
	orderBySellOrderId?: ModelTypes["Order_bool_exp"] | undefined,
	profile_id?: ModelTypes["Int_comparison_exp"] | undefined,
	sell_order_id?: ModelTypes["Int_comparison_exp"] | undefined,
	status?: ModelTypes["TransactionStatus_comparison_exp"] | undefined,
	updated_at?: ModelTypes["timestamp_comparison_exp"] | undefined
};
	["Transaction_constraint"]:Transaction_constraint;
	/** input type for incrementing numeric columns in table "Transaction" */
["Transaction_inc_input"]: {
	buy_order_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined
};
	/** input type for inserting data into table "Transaction" */
["Transaction_insert_input"]: {
	Order?: ModelTypes["Order_obj_rel_insert_input"] | undefined,
	TransactionReviews?: ModelTypes["TransactionReview_arr_rel_insert_input"] | undefined,
	buy_order_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	orderBySellOrderId?: ModelTypes["Order_obj_rel_insert_input"] | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined,
	status?: ModelTypes["TransactionStatus"] | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["Transaction_max_fields"]: {
		buy_order_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined,
	status?: ModelTypes["TransactionStatus"] | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** order by max() on columns of table "Transaction" */
["Transaction_max_order_by"]: {
	buy_order_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	profile_id?: ModelTypes["order_by"] | undefined,
	sell_order_id?: ModelTypes["order_by"] | undefined,
	status?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["Transaction_min_fields"]: {
		buy_order_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined,
	status?: ModelTypes["TransactionStatus"] | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** order by min() on columns of table "Transaction" */
["Transaction_min_order_by"]: {
	buy_order_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	profile_id?: ModelTypes["order_by"] | undefined,
	sell_order_id?: ModelTypes["order_by"] | undefined,
	status?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** response of any mutation on the table "Transaction" */
["Transaction_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["Transaction"]>
};
	/** input type for inserting object relation for remote table "Transaction" */
["Transaction_obj_rel_insert_input"]: {
	data: ModelTypes["Transaction_insert_input"],
	/** upsert condition */
	on_conflict?: ModelTypes["Transaction_on_conflict"] | undefined
};
	/** on_conflict condition type for table "Transaction" */
["Transaction_on_conflict"]: {
	constraint: ModelTypes["Transaction_constraint"],
	update_columns: Array<ModelTypes["Transaction_update_column"]>,
	where?: ModelTypes["Transaction_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "Transaction". */
["Transaction_order_by"]: {
	Order?: ModelTypes["Order_order_by"] | undefined,
	TransactionReviews_aggregate?: ModelTypes["TransactionReview_aggregate_order_by"] | undefined,
	buy_order_id?: ModelTypes["order_by"] | undefined,
	created_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	orderBySellOrderId?: ModelTypes["Order_order_by"] | undefined,
	profile_id?: ModelTypes["order_by"] | undefined,
	sell_order_id?: ModelTypes["order_by"] | undefined,
	status?: ModelTypes["order_by"] | undefined,
	updated_at?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: Transaction */
["Transaction_pk_columns_input"]: {
	id: number
};
	["Transaction_select_column"]:Transaction_select_column;
	/** input type for updating data in table "Transaction" */
["Transaction_set_input"]: {
	buy_order_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined,
	status?: ModelTypes["TransactionStatus"] | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["Transaction_stddev_fields"]: {
		buy_order_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined
};
	/** order by stddev() on columns of table "Transaction" */
["Transaction_stddev_order_by"]: {
	buy_order_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	profile_id?: ModelTypes["order_by"] | undefined,
	sell_order_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["Transaction_stddev_pop_fields"]: {
		buy_order_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "Transaction" */
["Transaction_stddev_pop_order_by"]: {
	buy_order_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	profile_id?: ModelTypes["order_by"] | undefined,
	sell_order_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["Transaction_stddev_samp_fields"]: {
		buy_order_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "Transaction" */
["Transaction_stddev_samp_order_by"]: {
	buy_order_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	profile_id?: ModelTypes["order_by"] | undefined,
	sell_order_id?: ModelTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "Transaction" */
["Transaction_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["Transaction_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["Transaction_stream_cursor_value_input"]: {
	buy_order_id?: number | undefined,
	created_at?: ModelTypes["timestamp"] | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined,
	status?: ModelTypes["TransactionStatus"] | undefined,
	updated_at?: ModelTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["Transaction_sum_fields"]: {
		buy_order_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined
};
	/** order by sum() on columns of table "Transaction" */
["Transaction_sum_order_by"]: {
	buy_order_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	profile_id?: ModelTypes["order_by"] | undefined,
	sell_order_id?: ModelTypes["order_by"] | undefined
};
	["Transaction_update_column"]:Transaction_update_column;
	["Transaction_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["Transaction_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["Transaction_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["Transaction_bool_exp"]
};
	/** aggregate var_pop on columns */
["Transaction_var_pop_fields"]: {
		buy_order_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined
};
	/** order by var_pop() on columns of table "Transaction" */
["Transaction_var_pop_order_by"]: {
	buy_order_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	profile_id?: ModelTypes["order_by"] | undefined,
	sell_order_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["Transaction_var_samp_fields"]: {
		buy_order_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined
};
	/** order by var_samp() on columns of table "Transaction" */
["Transaction_var_samp_order_by"]: {
	buy_order_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	profile_id?: ModelTypes["order_by"] | undefined,
	sell_order_id?: ModelTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["Transaction_variance_fields"]: {
		buy_order_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined
};
	/** order by variance() on columns of table "Transaction" */
["Transaction_variance_order_by"]: {
	buy_order_id?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	profile_id?: ModelTypes["order_by"] | undefined,
	sell_order_id?: ModelTypes["order_by"] | undefined
};
	/** columns and relationships of "_prisma_migrations" */
["_prisma_migrations"]: {
		applied_steps_count: number,
	checksum: string,
	finished_at?: ModelTypes["timestamptz"] | undefined,
	id: string,
	logs?: string | undefined,
	migration_name: string,
	rolled_back_at?: ModelTypes["timestamptz"] | undefined,
	started_at: ModelTypes["timestamptz"]
};
	/** aggregated selection of "_prisma_migrations" */
["_prisma_migrations_aggregate"]: {
		aggregate?: ModelTypes["_prisma_migrations_aggregate_fields"] | undefined,
	nodes: Array<ModelTypes["_prisma_migrations"]>
};
	/** aggregate fields of "_prisma_migrations" */
["_prisma_migrations_aggregate_fields"]: {
		avg?: ModelTypes["_prisma_migrations_avg_fields"] | undefined,
	count: number,
	max?: ModelTypes["_prisma_migrations_max_fields"] | undefined,
	min?: ModelTypes["_prisma_migrations_min_fields"] | undefined,
	stddev?: ModelTypes["_prisma_migrations_stddev_fields"] | undefined,
	stddev_pop?: ModelTypes["_prisma_migrations_stddev_pop_fields"] | undefined,
	stddev_samp?: ModelTypes["_prisma_migrations_stddev_samp_fields"] | undefined,
	sum?: ModelTypes["_prisma_migrations_sum_fields"] | undefined,
	var_pop?: ModelTypes["_prisma_migrations_var_pop_fields"] | undefined,
	var_samp?: ModelTypes["_prisma_migrations_var_samp_fields"] | undefined,
	variance?: ModelTypes["_prisma_migrations_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["_prisma_migrations_avg_fields"]: {
		applied_steps_count?: number | undefined
};
	/** Boolean expression to filter rows from the table "_prisma_migrations". All fields are combined with a logical 'AND'. */
["_prisma_migrations_bool_exp"]: {
	_and?: Array<ModelTypes["_prisma_migrations_bool_exp"]> | undefined,
	_not?: ModelTypes["_prisma_migrations_bool_exp"] | undefined,
	_or?: Array<ModelTypes["_prisma_migrations_bool_exp"]> | undefined,
	applied_steps_count?: ModelTypes["Int_comparison_exp"] | undefined,
	checksum?: ModelTypes["String_comparison_exp"] | undefined,
	finished_at?: ModelTypes["timestamptz_comparison_exp"] | undefined,
	id?: ModelTypes["String_comparison_exp"] | undefined,
	logs?: ModelTypes["String_comparison_exp"] | undefined,
	migration_name?: ModelTypes["String_comparison_exp"] | undefined,
	rolled_back_at?: ModelTypes["timestamptz_comparison_exp"] | undefined,
	started_at?: ModelTypes["timestamptz_comparison_exp"] | undefined
};
	["_prisma_migrations_constraint"]:_prisma_migrations_constraint;
	/** input type for incrementing numeric columns in table "_prisma_migrations" */
["_prisma_migrations_inc_input"]: {
	applied_steps_count?: number | undefined
};
	/** input type for inserting data into table "_prisma_migrations" */
["_prisma_migrations_insert_input"]: {
	applied_steps_count?: number | undefined,
	checksum?: string | undefined,
	finished_at?: ModelTypes["timestamptz"] | undefined,
	id?: string | undefined,
	logs?: string | undefined,
	migration_name?: string | undefined,
	rolled_back_at?: ModelTypes["timestamptz"] | undefined,
	started_at?: ModelTypes["timestamptz"] | undefined
};
	/** aggregate max on columns */
["_prisma_migrations_max_fields"]: {
		applied_steps_count?: number | undefined,
	checksum?: string | undefined,
	finished_at?: ModelTypes["timestamptz"] | undefined,
	id?: string | undefined,
	logs?: string | undefined,
	migration_name?: string | undefined,
	rolled_back_at?: ModelTypes["timestamptz"] | undefined,
	started_at?: ModelTypes["timestamptz"] | undefined
};
	/** aggregate min on columns */
["_prisma_migrations_min_fields"]: {
		applied_steps_count?: number | undefined,
	checksum?: string | undefined,
	finished_at?: ModelTypes["timestamptz"] | undefined,
	id?: string | undefined,
	logs?: string | undefined,
	migration_name?: string | undefined,
	rolled_back_at?: ModelTypes["timestamptz"] | undefined,
	started_at?: ModelTypes["timestamptz"] | undefined
};
	/** response of any mutation on the table "_prisma_migrations" */
["_prisma_migrations_mutation_response"]: {
		/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<ModelTypes["_prisma_migrations"]>
};
	/** on_conflict condition type for table "_prisma_migrations" */
["_prisma_migrations_on_conflict"]: {
	constraint: ModelTypes["_prisma_migrations_constraint"],
	update_columns: Array<ModelTypes["_prisma_migrations_update_column"]>,
	where?: ModelTypes["_prisma_migrations_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "_prisma_migrations". */
["_prisma_migrations_order_by"]: {
	applied_steps_count?: ModelTypes["order_by"] | undefined,
	checksum?: ModelTypes["order_by"] | undefined,
	finished_at?: ModelTypes["order_by"] | undefined,
	id?: ModelTypes["order_by"] | undefined,
	logs?: ModelTypes["order_by"] | undefined,
	migration_name?: ModelTypes["order_by"] | undefined,
	rolled_back_at?: ModelTypes["order_by"] | undefined,
	started_at?: ModelTypes["order_by"] | undefined
};
	/** primary key columns input for table: _prisma_migrations */
["_prisma_migrations_pk_columns_input"]: {
	id: string
};
	["_prisma_migrations_select_column"]:_prisma_migrations_select_column;
	/** input type for updating data in table "_prisma_migrations" */
["_prisma_migrations_set_input"]: {
	applied_steps_count?: number | undefined,
	checksum?: string | undefined,
	finished_at?: ModelTypes["timestamptz"] | undefined,
	id?: string | undefined,
	logs?: string | undefined,
	migration_name?: string | undefined,
	rolled_back_at?: ModelTypes["timestamptz"] | undefined,
	started_at?: ModelTypes["timestamptz"] | undefined
};
	/** aggregate stddev on columns */
["_prisma_migrations_stddev_fields"]: {
		applied_steps_count?: number | undefined
};
	/** aggregate stddev_pop on columns */
["_prisma_migrations_stddev_pop_fields"]: {
		applied_steps_count?: number | undefined
};
	/** aggregate stddev_samp on columns */
["_prisma_migrations_stddev_samp_fields"]: {
		applied_steps_count?: number | undefined
};
	/** Streaming cursor of the table "_prisma_migrations" */
["_prisma_migrations_stream_cursor_input"]: {
	/** Stream column input with initial value */
	initial_value: ModelTypes["_prisma_migrations_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: ModelTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["_prisma_migrations_stream_cursor_value_input"]: {
	applied_steps_count?: number | undefined,
	checksum?: string | undefined,
	finished_at?: ModelTypes["timestamptz"] | undefined,
	id?: string | undefined,
	logs?: string | undefined,
	migration_name?: string | undefined,
	rolled_back_at?: ModelTypes["timestamptz"] | undefined,
	started_at?: ModelTypes["timestamptz"] | undefined
};
	/** aggregate sum on columns */
["_prisma_migrations_sum_fields"]: {
		applied_steps_count?: number | undefined
};
	["_prisma_migrations_update_column"]:_prisma_migrations_update_column;
	["_prisma_migrations_updates"]: {
	/** increments the numeric columns with given value of the filtered values */
	_inc?: ModelTypes["_prisma_migrations_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: ModelTypes["_prisma_migrations_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: ModelTypes["_prisma_migrations_bool_exp"]
};
	/** aggregate var_pop on columns */
["_prisma_migrations_var_pop_fields"]: {
		applied_steps_count?: number | undefined
};
	/** aggregate var_samp on columns */
["_prisma_migrations_var_samp_fields"]: {
		applied_steps_count?: number | undefined
};
	/** aggregate variance on columns */
["_prisma_migrations_variance_fields"]: {
		applied_steps_count?: number | undefined
};
	["cursor_ordering"]:cursor_ordering;
	["float8"]:any;
	/** Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'. */
["float8_comparison_exp"]: {
	_eq?: ModelTypes["float8"] | undefined,
	_gt?: ModelTypes["float8"] | undefined,
	_gte?: ModelTypes["float8"] | undefined,
	_in?: Array<ModelTypes["float8"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: ModelTypes["float8"] | undefined,
	_lte?: ModelTypes["float8"] | undefined,
	_neq?: ModelTypes["float8"] | undefined,
	_nin?: Array<ModelTypes["float8"]> | undefined
};
	/** mutation root */
["mutation_root"]: {
		/** delete data from the table: "Business" */
	delete_Business?: ModelTypes["Business_mutation_response"] | undefined,
	/** delete data from the table: "BusinessProduct" */
	delete_BusinessProduct?: ModelTypes["BusinessProduct_mutation_response"] | undefined,
	/** delete single row from the table: "BusinessProduct" */
	delete_BusinessProduct_by_pk?: ModelTypes["BusinessProduct"] | undefined,
	/** delete data from the table: "BusinessWorker" */
	delete_BusinessWorker?: ModelTypes["BusinessWorker_mutation_response"] | undefined,
	/** delete single row from the table: "BusinessWorker" */
	delete_BusinessWorker_by_pk?: ModelTypes["BusinessWorker"] | undefined,
	/** delete single row from the table: "Business" */
	delete_Business_by_pk?: ModelTypes["Business"] | undefined,
	/** delete data from the table: "Category" */
	delete_Category?: ModelTypes["Category_mutation_response"] | undefined,
	/** delete single row from the table: "Category" */
	delete_Category_by_pk?: ModelTypes["Category"] | undefined,
	/** delete data from the table: "Certificate" */
	delete_Certificate?: ModelTypes["Certificate_mutation_response"] | undefined,
	/** delete data from the table: "CertificateCategory" */
	delete_CertificateCategory?: ModelTypes["CertificateCategory_mutation_response"] | undefined,
	/** delete single row from the table: "CertificateCategory" */
	delete_CertificateCategory_by_pk?: ModelTypes["CertificateCategory"] | undefined,
	/** delete data from the table: "CertificateClaim" */
	delete_CertificateClaim?: ModelTypes["CertificateClaim_mutation_response"] | undefined,
	/** delete single row from the table: "CertificateClaim" */
	delete_CertificateClaim_by_pk?: ModelTypes["CertificateClaim"] | undefined,
	/** delete single row from the table: "Certificate" */
	delete_Certificate_by_pk?: ModelTypes["Certificate"] | undefined,
	/** delete data from the table: "Offer" */
	delete_Offer?: ModelTypes["Offer_mutation_response"] | undefined,
	/** delete single row from the table: "Offer" */
	delete_Offer_by_pk?: ModelTypes["Offer"] | undefined,
	/** delete data from the table: "Order" */
	delete_Order?: ModelTypes["Order_mutation_response"] | undefined,
	/** delete single row from the table: "Order" */
	delete_Order_by_pk?: ModelTypes["Order"] | undefined,
	/** delete data from the table: "Product" */
	delete_Product?: ModelTypes["Product_mutation_response"] | undefined,
	/** delete single row from the table: "Product" */
	delete_Product_by_pk?: ModelTypes["Product"] | undefined,
	/** delete data from the table: "Profile" */
	delete_Profile?: ModelTypes["Profile_mutation_response"] | undefined,
	/** delete single row from the table: "Profile" */
	delete_Profile_by_pk?: ModelTypes["Profile"] | undefined,
	/** delete data from the table: "Transaction" */
	delete_Transaction?: ModelTypes["Transaction_mutation_response"] | undefined,
	/** delete data from the table: "TransactionReview" */
	delete_TransactionReview?: ModelTypes["TransactionReview_mutation_response"] | undefined,
	/** delete single row from the table: "TransactionReview" */
	delete_TransactionReview_by_pk?: ModelTypes["TransactionReview"] | undefined,
	/** delete single row from the table: "Transaction" */
	delete_Transaction_by_pk?: ModelTypes["Transaction"] | undefined,
	/** delete data from the table: "_prisma_migrations" */
	delete__prisma_migrations?: ModelTypes["_prisma_migrations_mutation_response"] | undefined,
	/** delete single row from the table: "_prisma_migrations" */
	delete__prisma_migrations_by_pk?: ModelTypes["_prisma_migrations"] | undefined,
	/** insert data into the table: "Business" */
	insert_Business?: ModelTypes["Business_mutation_response"] | undefined,
	/** insert data into the table: "BusinessProduct" */
	insert_BusinessProduct?: ModelTypes["BusinessProduct_mutation_response"] | undefined,
	/** insert a single row into the table: "BusinessProduct" */
	insert_BusinessProduct_one?: ModelTypes["BusinessProduct"] | undefined,
	/** insert data into the table: "BusinessWorker" */
	insert_BusinessWorker?: ModelTypes["BusinessWorker_mutation_response"] | undefined,
	/** insert a single row into the table: "BusinessWorker" */
	insert_BusinessWorker_one?: ModelTypes["BusinessWorker"] | undefined,
	/** insert a single row into the table: "Business" */
	insert_Business_one?: ModelTypes["Business"] | undefined,
	/** insert data into the table: "Category" */
	insert_Category?: ModelTypes["Category_mutation_response"] | undefined,
	/** insert a single row into the table: "Category" */
	insert_Category_one?: ModelTypes["Category"] | undefined,
	/** insert data into the table: "Certificate" */
	insert_Certificate?: ModelTypes["Certificate_mutation_response"] | undefined,
	/** insert data into the table: "CertificateCategory" */
	insert_CertificateCategory?: ModelTypes["CertificateCategory_mutation_response"] | undefined,
	/** insert a single row into the table: "CertificateCategory" */
	insert_CertificateCategory_one?: ModelTypes["CertificateCategory"] | undefined,
	/** insert data into the table: "CertificateClaim" */
	insert_CertificateClaim?: ModelTypes["CertificateClaim_mutation_response"] | undefined,
	/** insert a single row into the table: "CertificateClaim" */
	insert_CertificateClaim_one?: ModelTypes["CertificateClaim"] | undefined,
	/** insert a single row into the table: "Certificate" */
	insert_Certificate_one?: ModelTypes["Certificate"] | undefined,
	/** insert data into the table: "Offer" */
	insert_Offer?: ModelTypes["Offer_mutation_response"] | undefined,
	/** insert a single row into the table: "Offer" */
	insert_Offer_one?: ModelTypes["Offer"] | undefined,
	/** insert data into the table: "Order" */
	insert_Order?: ModelTypes["Order_mutation_response"] | undefined,
	/** insert a single row into the table: "Order" */
	insert_Order_one?: ModelTypes["Order"] | undefined,
	/** insert data into the table: "Product" */
	insert_Product?: ModelTypes["Product_mutation_response"] | undefined,
	/** insert a single row into the table: "Product" */
	insert_Product_one?: ModelTypes["Product"] | undefined,
	/** insert data into the table: "Profile" */
	insert_Profile?: ModelTypes["Profile_mutation_response"] | undefined,
	/** insert a single row into the table: "Profile" */
	insert_Profile_one?: ModelTypes["Profile"] | undefined,
	/** insert data into the table: "Transaction" */
	insert_Transaction?: ModelTypes["Transaction_mutation_response"] | undefined,
	/** insert data into the table: "TransactionReview" */
	insert_TransactionReview?: ModelTypes["TransactionReview_mutation_response"] | undefined,
	/** insert a single row into the table: "TransactionReview" */
	insert_TransactionReview_one?: ModelTypes["TransactionReview"] | undefined,
	/** insert a single row into the table: "Transaction" */
	insert_Transaction_one?: ModelTypes["Transaction"] | undefined,
	/** insert data into the table: "_prisma_migrations" */
	insert__prisma_migrations?: ModelTypes["_prisma_migrations_mutation_response"] | undefined,
	/** insert a single row into the table: "_prisma_migrations" */
	insert__prisma_migrations_one?: ModelTypes["_prisma_migrations"] | undefined,
	/** update data of the table: "Business" */
	update_Business?: ModelTypes["Business_mutation_response"] | undefined,
	/** update data of the table: "BusinessProduct" */
	update_BusinessProduct?: ModelTypes["BusinessProduct_mutation_response"] | undefined,
	/** update single row of the table: "BusinessProduct" */
	update_BusinessProduct_by_pk?: ModelTypes["BusinessProduct"] | undefined,
	/** update multiples rows of table: "BusinessProduct" */
	update_BusinessProduct_many?: Array<ModelTypes["BusinessProduct_mutation_response"] | undefined> | undefined,
	/** update data of the table: "BusinessWorker" */
	update_BusinessWorker?: ModelTypes["BusinessWorker_mutation_response"] | undefined,
	/** update single row of the table: "BusinessWorker" */
	update_BusinessWorker_by_pk?: ModelTypes["BusinessWorker"] | undefined,
	/** update multiples rows of table: "BusinessWorker" */
	update_BusinessWorker_many?: Array<ModelTypes["BusinessWorker_mutation_response"] | undefined> | undefined,
	/** update single row of the table: "Business" */
	update_Business_by_pk?: ModelTypes["Business"] | undefined,
	/** update multiples rows of table: "Business" */
	update_Business_many?: Array<ModelTypes["Business_mutation_response"] | undefined> | undefined,
	/** update data of the table: "Category" */
	update_Category?: ModelTypes["Category_mutation_response"] | undefined,
	/** update single row of the table: "Category" */
	update_Category_by_pk?: ModelTypes["Category"] | undefined,
	/** update multiples rows of table: "Category" */
	update_Category_many?: Array<ModelTypes["Category_mutation_response"] | undefined> | undefined,
	/** update data of the table: "Certificate" */
	update_Certificate?: ModelTypes["Certificate_mutation_response"] | undefined,
	/** update data of the table: "CertificateCategory" */
	update_CertificateCategory?: ModelTypes["CertificateCategory_mutation_response"] | undefined,
	/** update single row of the table: "CertificateCategory" */
	update_CertificateCategory_by_pk?: ModelTypes["CertificateCategory"] | undefined,
	/** update multiples rows of table: "CertificateCategory" */
	update_CertificateCategory_many?: Array<ModelTypes["CertificateCategory_mutation_response"] | undefined> | undefined,
	/** update data of the table: "CertificateClaim" */
	update_CertificateClaim?: ModelTypes["CertificateClaim_mutation_response"] | undefined,
	/** update single row of the table: "CertificateClaim" */
	update_CertificateClaim_by_pk?: ModelTypes["CertificateClaim"] | undefined,
	/** update multiples rows of table: "CertificateClaim" */
	update_CertificateClaim_many?: Array<ModelTypes["CertificateClaim_mutation_response"] | undefined> | undefined,
	/** update single row of the table: "Certificate" */
	update_Certificate_by_pk?: ModelTypes["Certificate"] | undefined,
	/** update multiples rows of table: "Certificate" */
	update_Certificate_many?: Array<ModelTypes["Certificate_mutation_response"] | undefined> | undefined,
	/** update data of the table: "Offer" */
	update_Offer?: ModelTypes["Offer_mutation_response"] | undefined,
	/** update single row of the table: "Offer" */
	update_Offer_by_pk?: ModelTypes["Offer"] | undefined,
	/** update multiples rows of table: "Offer" */
	update_Offer_many?: Array<ModelTypes["Offer_mutation_response"] | undefined> | undefined,
	/** update data of the table: "Order" */
	update_Order?: ModelTypes["Order_mutation_response"] | undefined,
	/** update single row of the table: "Order" */
	update_Order_by_pk?: ModelTypes["Order"] | undefined,
	/** update multiples rows of table: "Order" */
	update_Order_many?: Array<ModelTypes["Order_mutation_response"] | undefined> | undefined,
	/** update data of the table: "Product" */
	update_Product?: ModelTypes["Product_mutation_response"] | undefined,
	/** update single row of the table: "Product" */
	update_Product_by_pk?: ModelTypes["Product"] | undefined,
	/** update multiples rows of table: "Product" */
	update_Product_many?: Array<ModelTypes["Product_mutation_response"] | undefined> | undefined,
	/** update data of the table: "Profile" */
	update_Profile?: ModelTypes["Profile_mutation_response"] | undefined,
	/** update single row of the table: "Profile" */
	update_Profile_by_pk?: ModelTypes["Profile"] | undefined,
	/** update multiples rows of table: "Profile" */
	update_Profile_many?: Array<ModelTypes["Profile_mutation_response"] | undefined> | undefined,
	/** update data of the table: "Transaction" */
	update_Transaction?: ModelTypes["Transaction_mutation_response"] | undefined,
	/** update data of the table: "TransactionReview" */
	update_TransactionReview?: ModelTypes["TransactionReview_mutation_response"] | undefined,
	/** update single row of the table: "TransactionReview" */
	update_TransactionReview_by_pk?: ModelTypes["TransactionReview"] | undefined,
	/** update multiples rows of table: "TransactionReview" */
	update_TransactionReview_many?: Array<ModelTypes["TransactionReview_mutation_response"] | undefined> | undefined,
	/** update single row of the table: "Transaction" */
	update_Transaction_by_pk?: ModelTypes["Transaction"] | undefined,
	/** update multiples rows of table: "Transaction" */
	update_Transaction_many?: Array<ModelTypes["Transaction_mutation_response"] | undefined> | undefined,
	/** update data of the table: "_prisma_migrations" */
	update__prisma_migrations?: ModelTypes["_prisma_migrations_mutation_response"] | undefined,
	/** update single row of the table: "_prisma_migrations" */
	update__prisma_migrations_by_pk?: ModelTypes["_prisma_migrations"] | undefined,
	/** update multiples rows of table: "_prisma_migrations" */
	update__prisma_migrations_many?: Array<ModelTypes["_prisma_migrations_mutation_response"] | undefined> | undefined
};
	["order_by"]:order_by;
	["query_root"]: {
		/** fetch data from the table: "Business" */
	Business: Array<ModelTypes["Business"]>,
	/** fetch data from the table: "BusinessProduct" */
	BusinessProduct: Array<ModelTypes["BusinessProduct"]>,
	/** fetch aggregated fields from the table: "BusinessProduct" */
	BusinessProduct_aggregate: ModelTypes["BusinessProduct_aggregate"],
	/** fetch data from the table: "BusinessProduct" using primary key columns */
	BusinessProduct_by_pk?: ModelTypes["BusinessProduct"] | undefined,
	/** fetch data from the table: "BusinessWorker" */
	BusinessWorker: Array<ModelTypes["BusinessWorker"]>,
	/** fetch aggregated fields from the table: "BusinessWorker" */
	BusinessWorker_aggregate: ModelTypes["BusinessWorker_aggregate"],
	/** fetch data from the table: "BusinessWorker" using primary key columns */
	BusinessWorker_by_pk?: ModelTypes["BusinessWorker"] | undefined,
	/** fetch aggregated fields from the table: "Business" */
	Business_aggregate: ModelTypes["Business_aggregate"],
	/** fetch data from the table: "Business" using primary key columns */
	Business_by_pk?: ModelTypes["Business"] | undefined,
	/** fetch data from the table: "Category" */
	Category: Array<ModelTypes["Category"]>,
	/** fetch aggregated fields from the table: "Category" */
	Category_aggregate: ModelTypes["Category_aggregate"],
	/** fetch data from the table: "Category" using primary key columns */
	Category_by_pk?: ModelTypes["Category"] | undefined,
	/** fetch data from the table: "Certificate" */
	Certificate: Array<ModelTypes["Certificate"]>,
	/** fetch data from the table: "CertificateCategory" */
	CertificateCategory: Array<ModelTypes["CertificateCategory"]>,
	/** fetch aggregated fields from the table: "CertificateCategory" */
	CertificateCategory_aggregate: ModelTypes["CertificateCategory_aggregate"],
	/** fetch data from the table: "CertificateCategory" using primary key columns */
	CertificateCategory_by_pk?: ModelTypes["CertificateCategory"] | undefined,
	/** fetch data from the table: "CertificateClaim" */
	CertificateClaim: Array<ModelTypes["CertificateClaim"]>,
	/** fetch aggregated fields from the table: "CertificateClaim" */
	CertificateClaim_aggregate: ModelTypes["CertificateClaim_aggregate"],
	/** fetch data from the table: "CertificateClaim" using primary key columns */
	CertificateClaim_by_pk?: ModelTypes["CertificateClaim"] | undefined,
	/** fetch aggregated fields from the table: "Certificate" */
	Certificate_aggregate: ModelTypes["Certificate_aggregate"],
	/** fetch data from the table: "Certificate" using primary key columns */
	Certificate_by_pk?: ModelTypes["Certificate"] | undefined,
	/** fetch data from the table: "Offer" */
	Offer: Array<ModelTypes["Offer"]>,
	/** fetch aggregated fields from the table: "Offer" */
	Offer_aggregate: ModelTypes["Offer_aggregate"],
	/** fetch data from the table: "Offer" using primary key columns */
	Offer_by_pk?: ModelTypes["Offer"] | undefined,
	/** fetch data from the table: "Order" */
	Order: Array<ModelTypes["Order"]>,
	/** fetch aggregated fields from the table: "Order" */
	Order_aggregate: ModelTypes["Order_aggregate"],
	/** fetch data from the table: "Order" using primary key columns */
	Order_by_pk?: ModelTypes["Order"] | undefined,
	/** fetch data from the table: "Product" */
	Product: Array<ModelTypes["Product"]>,
	/** fetch aggregated fields from the table: "Product" */
	Product_aggregate: ModelTypes["Product_aggregate"],
	/** fetch data from the table: "Product" using primary key columns */
	Product_by_pk?: ModelTypes["Product"] | undefined,
	/** fetch data from the table: "Profile" */
	Profile: Array<ModelTypes["Profile"]>,
	/** fetch aggregated fields from the table: "Profile" */
	Profile_aggregate: ModelTypes["Profile_aggregate"],
	/** fetch data from the table: "Profile" using primary key columns */
	Profile_by_pk?: ModelTypes["Profile"] | undefined,
	/** fetch data from the table: "Transaction" */
	Transaction: Array<ModelTypes["Transaction"]>,
	/** fetch data from the table: "TransactionReview" */
	TransactionReview: Array<ModelTypes["TransactionReview"]>,
	/** fetch aggregated fields from the table: "TransactionReview" */
	TransactionReview_aggregate: ModelTypes["TransactionReview_aggregate"],
	/** fetch data from the table: "TransactionReview" using primary key columns */
	TransactionReview_by_pk?: ModelTypes["TransactionReview"] | undefined,
	/** fetch aggregated fields from the table: "Transaction" */
	Transaction_aggregate: ModelTypes["Transaction_aggregate"],
	/** fetch data from the table: "Transaction" using primary key columns */
	Transaction_by_pk?: ModelTypes["Transaction"] | undefined,
	/** fetch data from the table: "_prisma_migrations" */
	_prisma_migrations: Array<ModelTypes["_prisma_migrations"]>,
	/** fetch aggregated fields from the table: "_prisma_migrations" */
	_prisma_migrations_aggregate: ModelTypes["_prisma_migrations_aggregate"],
	/** fetch data from the table: "_prisma_migrations" using primary key columns */
	_prisma_migrations_by_pk?: ModelTypes["_prisma_migrations"] | undefined
};
	["subscription_root"]: {
		/** fetch data from the table: "Business" */
	Business: Array<ModelTypes["Business"]>,
	/** fetch data from the table: "BusinessProduct" */
	BusinessProduct: Array<ModelTypes["BusinessProduct"]>,
	/** fetch aggregated fields from the table: "BusinessProduct" */
	BusinessProduct_aggregate: ModelTypes["BusinessProduct_aggregate"],
	/** fetch data from the table: "BusinessProduct" using primary key columns */
	BusinessProduct_by_pk?: ModelTypes["BusinessProduct"] | undefined,
	/** fetch data from the table in a streaming manner: "BusinessProduct" */
	BusinessProduct_stream: Array<ModelTypes["BusinessProduct"]>,
	/** fetch data from the table: "BusinessWorker" */
	BusinessWorker: Array<ModelTypes["BusinessWorker"]>,
	/** fetch aggregated fields from the table: "BusinessWorker" */
	BusinessWorker_aggregate: ModelTypes["BusinessWorker_aggregate"],
	/** fetch data from the table: "BusinessWorker" using primary key columns */
	BusinessWorker_by_pk?: ModelTypes["BusinessWorker"] | undefined,
	/** fetch data from the table in a streaming manner: "BusinessWorker" */
	BusinessWorker_stream: Array<ModelTypes["BusinessWorker"]>,
	/** fetch aggregated fields from the table: "Business" */
	Business_aggregate: ModelTypes["Business_aggregate"],
	/** fetch data from the table: "Business" using primary key columns */
	Business_by_pk?: ModelTypes["Business"] | undefined,
	/** fetch data from the table in a streaming manner: "Business" */
	Business_stream: Array<ModelTypes["Business"]>,
	/** fetch data from the table: "Category" */
	Category: Array<ModelTypes["Category"]>,
	/** fetch aggregated fields from the table: "Category" */
	Category_aggregate: ModelTypes["Category_aggregate"],
	/** fetch data from the table: "Category" using primary key columns */
	Category_by_pk?: ModelTypes["Category"] | undefined,
	/** fetch data from the table in a streaming manner: "Category" */
	Category_stream: Array<ModelTypes["Category"]>,
	/** fetch data from the table: "Certificate" */
	Certificate: Array<ModelTypes["Certificate"]>,
	/** fetch data from the table: "CertificateCategory" */
	CertificateCategory: Array<ModelTypes["CertificateCategory"]>,
	/** fetch aggregated fields from the table: "CertificateCategory" */
	CertificateCategory_aggregate: ModelTypes["CertificateCategory_aggregate"],
	/** fetch data from the table: "CertificateCategory" using primary key columns */
	CertificateCategory_by_pk?: ModelTypes["CertificateCategory"] | undefined,
	/** fetch data from the table in a streaming manner: "CertificateCategory" */
	CertificateCategory_stream: Array<ModelTypes["CertificateCategory"]>,
	/** fetch data from the table: "CertificateClaim" */
	CertificateClaim: Array<ModelTypes["CertificateClaim"]>,
	/** fetch aggregated fields from the table: "CertificateClaim" */
	CertificateClaim_aggregate: ModelTypes["CertificateClaim_aggregate"],
	/** fetch data from the table: "CertificateClaim" using primary key columns */
	CertificateClaim_by_pk?: ModelTypes["CertificateClaim"] | undefined,
	/** fetch data from the table in a streaming manner: "CertificateClaim" */
	CertificateClaim_stream: Array<ModelTypes["CertificateClaim"]>,
	/** fetch aggregated fields from the table: "Certificate" */
	Certificate_aggregate: ModelTypes["Certificate_aggregate"],
	/** fetch data from the table: "Certificate" using primary key columns */
	Certificate_by_pk?: ModelTypes["Certificate"] | undefined,
	/** fetch data from the table in a streaming manner: "Certificate" */
	Certificate_stream: Array<ModelTypes["Certificate"]>,
	/** fetch data from the table: "Offer" */
	Offer: Array<ModelTypes["Offer"]>,
	/** fetch aggregated fields from the table: "Offer" */
	Offer_aggregate: ModelTypes["Offer_aggregate"],
	/** fetch data from the table: "Offer" using primary key columns */
	Offer_by_pk?: ModelTypes["Offer"] | undefined,
	/** fetch data from the table in a streaming manner: "Offer" */
	Offer_stream: Array<ModelTypes["Offer"]>,
	/** fetch data from the table: "Order" */
	Order: Array<ModelTypes["Order"]>,
	/** fetch aggregated fields from the table: "Order" */
	Order_aggregate: ModelTypes["Order_aggregate"],
	/** fetch data from the table: "Order" using primary key columns */
	Order_by_pk?: ModelTypes["Order"] | undefined,
	/** fetch data from the table in a streaming manner: "Order" */
	Order_stream: Array<ModelTypes["Order"]>,
	/** fetch data from the table: "Product" */
	Product: Array<ModelTypes["Product"]>,
	/** fetch aggregated fields from the table: "Product" */
	Product_aggregate: ModelTypes["Product_aggregate"],
	/** fetch data from the table: "Product" using primary key columns */
	Product_by_pk?: ModelTypes["Product"] | undefined,
	/** fetch data from the table in a streaming manner: "Product" */
	Product_stream: Array<ModelTypes["Product"]>,
	/** fetch data from the table: "Profile" */
	Profile: Array<ModelTypes["Profile"]>,
	/** fetch aggregated fields from the table: "Profile" */
	Profile_aggregate: ModelTypes["Profile_aggregate"],
	/** fetch data from the table: "Profile" using primary key columns */
	Profile_by_pk?: ModelTypes["Profile"] | undefined,
	/** fetch data from the table in a streaming manner: "Profile" */
	Profile_stream: Array<ModelTypes["Profile"]>,
	/** fetch data from the table: "Transaction" */
	Transaction: Array<ModelTypes["Transaction"]>,
	/** fetch data from the table: "TransactionReview" */
	TransactionReview: Array<ModelTypes["TransactionReview"]>,
	/** fetch aggregated fields from the table: "TransactionReview" */
	TransactionReview_aggregate: ModelTypes["TransactionReview_aggregate"],
	/** fetch data from the table: "TransactionReview" using primary key columns */
	TransactionReview_by_pk?: ModelTypes["TransactionReview"] | undefined,
	/** fetch data from the table in a streaming manner: "TransactionReview" */
	TransactionReview_stream: Array<ModelTypes["TransactionReview"]>,
	/** fetch aggregated fields from the table: "Transaction" */
	Transaction_aggregate: ModelTypes["Transaction_aggregate"],
	/** fetch data from the table: "Transaction" using primary key columns */
	Transaction_by_pk?: ModelTypes["Transaction"] | undefined,
	/** fetch data from the table in a streaming manner: "Transaction" */
	Transaction_stream: Array<ModelTypes["Transaction"]>,
	/** fetch data from the table: "_prisma_migrations" */
	_prisma_migrations: Array<ModelTypes["_prisma_migrations"]>,
	/** fetch aggregated fields from the table: "_prisma_migrations" */
	_prisma_migrations_aggregate: ModelTypes["_prisma_migrations_aggregate"],
	/** fetch data from the table: "_prisma_migrations" using primary key columns */
	_prisma_migrations_by_pk?: ModelTypes["_prisma_migrations"] | undefined,
	/** fetch data from the table in a streaming manner: "_prisma_migrations" */
	_prisma_migrations_stream: Array<ModelTypes["_prisma_migrations"]>
};
	["timestamp"]:any;
	/** Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'. */
["timestamp_comparison_exp"]: {
	_eq?: ModelTypes["timestamp"] | undefined,
	_gt?: ModelTypes["timestamp"] | undefined,
	_gte?: ModelTypes["timestamp"] | undefined,
	_in?: Array<ModelTypes["timestamp"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: ModelTypes["timestamp"] | undefined,
	_lte?: ModelTypes["timestamp"] | undefined,
	_neq?: ModelTypes["timestamp"] | undefined,
	_nin?: Array<ModelTypes["timestamp"]> | undefined
};
	["timestamptz"]:any;
	/** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
["timestamptz_comparison_exp"]: {
	_eq?: ModelTypes["timestamptz"] | undefined,
	_gt?: ModelTypes["timestamptz"] | undefined,
	_gte?: ModelTypes["timestamptz"] | undefined,
	_in?: Array<ModelTypes["timestamptz"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: ModelTypes["timestamptz"] | undefined,
	_lte?: ModelTypes["timestamptz"] | undefined,
	_neq?: ModelTypes["timestamptz"] | undefined,
	_nin?: Array<ModelTypes["timestamptz"]> | undefined
}
    }

export type GraphQLTypes = {
    /** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
["Boolean_comparison_exp"]: {
		_eq?: boolean | undefined,
	_gt?: boolean | undefined,
	_gte?: boolean | undefined,
	_in?: Array<boolean> | undefined,
	_is_null?: boolean | undefined,
	_lt?: boolean | undefined,
	_lte?: boolean | undefined,
	_neq?: boolean | undefined,
	_nin?: Array<boolean> | undefined
};
	/** columns and relationships of "Business" */
["Business"]: {
	__typename: "Business",
	/** An array relationship */
	BusinessProducts: Array<GraphQLTypes["BusinessProduct"]>,
	/** An aggregate relationship */
	BusinessProducts_aggregate: GraphQLTypes["BusinessProduct_aggregate"],
	/** An array relationship */
	BusinessWorkers: Array<GraphQLTypes["BusinessWorker"]>,
	/** An aggregate relationship */
	BusinessWorkers_aggregate: GraphQLTypes["BusinessWorker_aggregate"],
	/** An array relationship */
	CertificateClaims: Array<GraphQLTypes["CertificateClaim"]>,
	/** An aggregate relationship */
	CertificateClaims_aggregate: GraphQLTypes["CertificateClaim_aggregate"],
	/** An array relationship */
	Offers: Array<GraphQLTypes["Offer"]>,
	/** An aggregate relationship */
	Offers_aggregate: GraphQLTypes["Offer_aggregate"],
	/** An array relationship */
	Orders: Array<GraphQLTypes["Order"]>,
	/** An aggregate relationship */
	Orders_aggregate: GraphQLTypes["Order_aggregate"],
	address: string,
	created_at: GraphQLTypes["timestamp"],
	id: number,
	name: string,
	phone: string,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** columns and relationships of "BusinessProduct" */
["BusinessProduct"]: {
	__typename: "BusinessProduct",
	/** An object relationship */
	Business: GraphQLTypes["Business"],
	/** An object relationship */
	Product: GraphQLTypes["Product"],
	business_id: number,
	created_at: GraphQLTypes["timestamp"],
	id: number,
	product_id: number,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregated selection of "BusinessProduct" */
["BusinessProduct_aggregate"]: {
	__typename: "BusinessProduct_aggregate",
	aggregate?: GraphQLTypes["BusinessProduct_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["BusinessProduct"]>
};
	["BusinessProduct_aggregate_bool_exp"]: {
		count?: GraphQLTypes["BusinessProduct_aggregate_bool_exp_count"] | undefined
};
	["BusinessProduct_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["BusinessProduct_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["BusinessProduct_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "BusinessProduct" */
["BusinessProduct_aggregate_fields"]: {
	__typename: "BusinessProduct_aggregate_fields",
	avg?: GraphQLTypes["BusinessProduct_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["BusinessProduct_max_fields"] | undefined,
	min?: GraphQLTypes["BusinessProduct_min_fields"] | undefined,
	stddev?: GraphQLTypes["BusinessProduct_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["BusinessProduct_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["BusinessProduct_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["BusinessProduct_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["BusinessProduct_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["BusinessProduct_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["BusinessProduct_variance_fields"] | undefined
};
	/** order by aggregate values of table "BusinessProduct" */
["BusinessProduct_aggregate_order_by"]: {
		avg?: GraphQLTypes["BusinessProduct_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["BusinessProduct_max_order_by"] | undefined,
	min?: GraphQLTypes["BusinessProduct_min_order_by"] | undefined,
	stddev?: GraphQLTypes["BusinessProduct_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["BusinessProduct_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["BusinessProduct_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["BusinessProduct_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["BusinessProduct_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["BusinessProduct_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["BusinessProduct_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "BusinessProduct" */
["BusinessProduct_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["BusinessProduct_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["BusinessProduct_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["BusinessProduct_avg_fields"]: {
	__typename: "BusinessProduct_avg_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	product_id?: number | undefined
};
	/** order by avg() on columns of table "BusinessProduct" */
["BusinessProduct_avg_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "BusinessProduct". All fields are combined with a logical 'AND'. */
["BusinessProduct_bool_exp"]: {
		Business?: GraphQLTypes["Business_bool_exp"] | undefined,
	Product?: GraphQLTypes["Product_bool_exp"] | undefined,
	_and?: Array<GraphQLTypes["BusinessProduct_bool_exp"]> | undefined,
	_not?: GraphQLTypes["BusinessProduct_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["BusinessProduct_bool_exp"]> | undefined,
	business_id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	created_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined,
	id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	product_id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	updated_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "BusinessProduct" */
["BusinessProduct_constraint"]: BusinessProduct_constraint;
	/** input type for incrementing numeric columns in table "BusinessProduct" */
["BusinessProduct_inc_input"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	product_id?: number | undefined
};
	/** input type for inserting data into table "BusinessProduct" */
["BusinessProduct_insert_input"]: {
		Business?: GraphQLTypes["Business_obj_rel_insert_input"] | undefined,
	Product?: GraphQLTypes["Product_obj_rel_insert_input"] | undefined,
	business_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	product_id?: number | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["BusinessProduct_max_fields"]: {
	__typename: "BusinessProduct_max_fields",
	business_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	product_id?: number | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** order by max() on columns of table "BusinessProduct" */
["BusinessProduct_max_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["BusinessProduct_min_fields"]: {
	__typename: "BusinessProduct_min_fields",
	business_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	product_id?: number | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** order by min() on columns of table "BusinessProduct" */
["BusinessProduct_min_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "BusinessProduct" */
["BusinessProduct_mutation_response"]: {
	__typename: "BusinessProduct_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["BusinessProduct"]>
};
	/** on_conflict condition type for table "BusinessProduct" */
["BusinessProduct_on_conflict"]: {
		constraint: GraphQLTypes["BusinessProduct_constraint"],
	update_columns: Array<GraphQLTypes["BusinessProduct_update_column"]>,
	where?: GraphQLTypes["BusinessProduct_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "BusinessProduct". */
["BusinessProduct_order_by"]: {
		Business?: GraphQLTypes["Business_order_by"] | undefined,
	Product?: GraphQLTypes["Product_order_by"] | undefined,
	business_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: BusinessProduct */
["BusinessProduct_pk_columns_input"]: {
		id: number
};
	/** select columns of table "BusinessProduct" */
["BusinessProduct_select_column"]: BusinessProduct_select_column;
	/** input type for updating data in table "BusinessProduct" */
["BusinessProduct_set_input"]: {
		business_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	product_id?: number | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["BusinessProduct_stddev_fields"]: {
	__typename: "BusinessProduct_stddev_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	product_id?: number | undefined
};
	/** order by stddev() on columns of table "BusinessProduct" */
["BusinessProduct_stddev_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["BusinessProduct_stddev_pop_fields"]: {
	__typename: "BusinessProduct_stddev_pop_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	product_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "BusinessProduct" */
["BusinessProduct_stddev_pop_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["BusinessProduct_stddev_samp_fields"]: {
	__typename: "BusinessProduct_stddev_samp_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	product_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "BusinessProduct" */
["BusinessProduct_stddev_samp_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "BusinessProduct" */
["BusinessProduct_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["BusinessProduct_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["BusinessProduct_stream_cursor_value_input"]: {
		business_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	product_id?: number | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["BusinessProduct_sum_fields"]: {
	__typename: "BusinessProduct_sum_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	product_id?: number | undefined
};
	/** order by sum() on columns of table "BusinessProduct" */
["BusinessProduct_sum_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "BusinessProduct" */
["BusinessProduct_update_column"]: BusinessProduct_update_column;
	["BusinessProduct_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["BusinessProduct_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["BusinessProduct_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["BusinessProduct_bool_exp"]
};
	/** aggregate var_pop on columns */
["BusinessProduct_var_pop_fields"]: {
	__typename: "BusinessProduct_var_pop_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	product_id?: number | undefined
};
	/** order by var_pop() on columns of table "BusinessProduct" */
["BusinessProduct_var_pop_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["BusinessProduct_var_samp_fields"]: {
	__typename: "BusinessProduct_var_samp_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	product_id?: number | undefined
};
	/** order by var_samp() on columns of table "BusinessProduct" */
["BusinessProduct_var_samp_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["BusinessProduct_variance_fields"]: {
	__typename: "BusinessProduct_variance_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	product_id?: number | undefined
};
	/** order by variance() on columns of table "BusinessProduct" */
["BusinessProduct_variance_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined
};
	/** columns and relationships of "BusinessWorker" */
["BusinessWorker"]: {
	__typename: "BusinessWorker",
	/** An object relationship */
	Business: GraphQLTypes["Business"],
	/** An object relationship */
	Profile: GraphQLTypes["Profile"],
	business_id: number,
	created_at: GraphQLTypes["timestamp"],
	id: number,
	profile_id: number,
	role: string,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregated selection of "BusinessWorker" */
["BusinessWorker_aggregate"]: {
	__typename: "BusinessWorker_aggregate",
	aggregate?: GraphQLTypes["BusinessWorker_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["BusinessWorker"]>
};
	["BusinessWorker_aggregate_bool_exp"]: {
		count?: GraphQLTypes["BusinessWorker_aggregate_bool_exp_count"] | undefined
};
	["BusinessWorker_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["BusinessWorker_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["BusinessWorker_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "BusinessWorker" */
["BusinessWorker_aggregate_fields"]: {
	__typename: "BusinessWorker_aggregate_fields",
	avg?: GraphQLTypes["BusinessWorker_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["BusinessWorker_max_fields"] | undefined,
	min?: GraphQLTypes["BusinessWorker_min_fields"] | undefined,
	stddev?: GraphQLTypes["BusinessWorker_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["BusinessWorker_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["BusinessWorker_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["BusinessWorker_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["BusinessWorker_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["BusinessWorker_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["BusinessWorker_variance_fields"] | undefined
};
	/** order by aggregate values of table "BusinessWorker" */
["BusinessWorker_aggregate_order_by"]: {
		avg?: GraphQLTypes["BusinessWorker_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["BusinessWorker_max_order_by"] | undefined,
	min?: GraphQLTypes["BusinessWorker_min_order_by"] | undefined,
	stddev?: GraphQLTypes["BusinessWorker_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["BusinessWorker_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["BusinessWorker_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["BusinessWorker_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["BusinessWorker_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["BusinessWorker_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["BusinessWorker_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "BusinessWorker" */
["BusinessWorker_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["BusinessWorker_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["BusinessWorker_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["BusinessWorker_avg_fields"]: {
	__typename: "BusinessWorker_avg_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined
};
	/** order by avg() on columns of table "BusinessWorker" */
["BusinessWorker_avg_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	profile_id?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "BusinessWorker". All fields are combined with a logical 'AND'. */
["BusinessWorker_bool_exp"]: {
		Business?: GraphQLTypes["Business_bool_exp"] | undefined,
	Profile?: GraphQLTypes["Profile_bool_exp"] | undefined,
	_and?: Array<GraphQLTypes["BusinessWorker_bool_exp"]> | undefined,
	_not?: GraphQLTypes["BusinessWorker_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["BusinessWorker_bool_exp"]> | undefined,
	business_id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	created_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined,
	id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	profile_id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	role?: GraphQLTypes["String_comparison_exp"] | undefined,
	updated_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "BusinessWorker" */
["BusinessWorker_constraint"]: BusinessWorker_constraint;
	/** input type for incrementing numeric columns in table "BusinessWorker" */
["BusinessWorker_inc_input"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined
};
	/** input type for inserting data into table "BusinessWorker" */
["BusinessWorker_insert_input"]: {
		Business?: GraphQLTypes["Business_obj_rel_insert_input"] | undefined,
	Profile?: GraphQLTypes["Profile_obj_rel_insert_input"] | undefined,
	business_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	role?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["BusinessWorker_max_fields"]: {
	__typename: "BusinessWorker_max_fields",
	business_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	role?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** order by max() on columns of table "BusinessWorker" */
["BusinessWorker_max_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	profile_id?: GraphQLTypes["order_by"] | undefined,
	role?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["BusinessWorker_min_fields"]: {
	__typename: "BusinessWorker_min_fields",
	business_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	role?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** order by min() on columns of table "BusinessWorker" */
["BusinessWorker_min_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	profile_id?: GraphQLTypes["order_by"] | undefined,
	role?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "BusinessWorker" */
["BusinessWorker_mutation_response"]: {
	__typename: "BusinessWorker_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["BusinessWorker"]>
};
	/** on_conflict condition type for table "BusinessWorker" */
["BusinessWorker_on_conflict"]: {
		constraint: GraphQLTypes["BusinessWorker_constraint"],
	update_columns: Array<GraphQLTypes["BusinessWorker_update_column"]>,
	where?: GraphQLTypes["BusinessWorker_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "BusinessWorker". */
["BusinessWorker_order_by"]: {
		Business?: GraphQLTypes["Business_order_by"] | undefined,
	Profile?: GraphQLTypes["Profile_order_by"] | undefined,
	business_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	profile_id?: GraphQLTypes["order_by"] | undefined,
	role?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: BusinessWorker */
["BusinessWorker_pk_columns_input"]: {
		id: number
};
	/** select columns of table "BusinessWorker" */
["BusinessWorker_select_column"]: BusinessWorker_select_column;
	/** input type for updating data in table "BusinessWorker" */
["BusinessWorker_set_input"]: {
		business_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	role?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["BusinessWorker_stddev_fields"]: {
	__typename: "BusinessWorker_stddev_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined
};
	/** order by stddev() on columns of table "BusinessWorker" */
["BusinessWorker_stddev_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	profile_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["BusinessWorker_stddev_pop_fields"]: {
	__typename: "BusinessWorker_stddev_pop_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "BusinessWorker" */
["BusinessWorker_stddev_pop_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	profile_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["BusinessWorker_stddev_samp_fields"]: {
	__typename: "BusinessWorker_stddev_samp_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "BusinessWorker" */
["BusinessWorker_stddev_samp_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	profile_id?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "BusinessWorker" */
["BusinessWorker_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["BusinessWorker_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["BusinessWorker_stream_cursor_value_input"]: {
		business_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	role?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["BusinessWorker_sum_fields"]: {
	__typename: "BusinessWorker_sum_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined
};
	/** order by sum() on columns of table "BusinessWorker" */
["BusinessWorker_sum_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	profile_id?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "BusinessWorker" */
["BusinessWorker_update_column"]: BusinessWorker_update_column;
	["BusinessWorker_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["BusinessWorker_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["BusinessWorker_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["BusinessWorker_bool_exp"]
};
	/** aggregate var_pop on columns */
["BusinessWorker_var_pop_fields"]: {
	__typename: "BusinessWorker_var_pop_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined
};
	/** order by var_pop() on columns of table "BusinessWorker" */
["BusinessWorker_var_pop_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	profile_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["BusinessWorker_var_samp_fields"]: {
	__typename: "BusinessWorker_var_samp_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined
};
	/** order by var_samp() on columns of table "BusinessWorker" */
["BusinessWorker_var_samp_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	profile_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["BusinessWorker_variance_fields"]: {
	__typename: "BusinessWorker_variance_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined
};
	/** order by variance() on columns of table "BusinessWorker" */
["BusinessWorker_variance_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	profile_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregated selection of "Business" */
["Business_aggregate"]: {
	__typename: "Business_aggregate",
	aggregate?: GraphQLTypes["Business_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["Business"]>
};
	/** aggregate fields of "Business" */
["Business_aggregate_fields"]: {
	__typename: "Business_aggregate_fields",
	avg?: GraphQLTypes["Business_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["Business_max_fields"] | undefined,
	min?: GraphQLTypes["Business_min_fields"] | undefined,
	stddev?: GraphQLTypes["Business_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["Business_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["Business_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["Business_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["Business_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["Business_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["Business_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["Business_avg_fields"]: {
	__typename: "Business_avg_fields",
	id?: number | undefined
};
	/** Boolean expression to filter rows from the table "Business". All fields are combined with a logical 'AND'. */
["Business_bool_exp"]: {
		BusinessProducts?: GraphQLTypes["BusinessProduct_bool_exp"] | undefined,
	BusinessProducts_aggregate?: GraphQLTypes["BusinessProduct_aggregate_bool_exp"] | undefined,
	BusinessWorkers?: GraphQLTypes["BusinessWorker_bool_exp"] | undefined,
	BusinessWorkers_aggregate?: GraphQLTypes["BusinessWorker_aggregate_bool_exp"] | undefined,
	CertificateClaims?: GraphQLTypes["CertificateClaim_bool_exp"] | undefined,
	CertificateClaims_aggregate?: GraphQLTypes["CertificateClaim_aggregate_bool_exp"] | undefined,
	Offers?: GraphQLTypes["Offer_bool_exp"] | undefined,
	Offers_aggregate?: GraphQLTypes["Offer_aggregate_bool_exp"] | undefined,
	Orders?: GraphQLTypes["Order_bool_exp"] | undefined,
	Orders_aggregate?: GraphQLTypes["Order_aggregate_bool_exp"] | undefined,
	_and?: Array<GraphQLTypes["Business_bool_exp"]> | undefined,
	_not?: GraphQLTypes["Business_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["Business_bool_exp"]> | undefined,
	address?: GraphQLTypes["String_comparison_exp"] | undefined,
	created_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined,
	id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	name?: GraphQLTypes["String_comparison_exp"] | undefined,
	phone?: GraphQLTypes["String_comparison_exp"] | undefined,
	updated_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "Business" */
["Business_constraint"]: Business_constraint;
	/** input type for incrementing numeric columns in table "Business" */
["Business_inc_input"]: {
		id?: number | undefined
};
	/** input type for inserting data into table "Business" */
["Business_insert_input"]: {
		BusinessProducts?: GraphQLTypes["BusinessProduct_arr_rel_insert_input"] | undefined,
	BusinessWorkers?: GraphQLTypes["BusinessWorker_arr_rel_insert_input"] | undefined,
	CertificateClaims?: GraphQLTypes["CertificateClaim_arr_rel_insert_input"] | undefined,
	Offers?: GraphQLTypes["Offer_arr_rel_insert_input"] | undefined,
	Orders?: GraphQLTypes["Order_arr_rel_insert_input"] | undefined,
	address?: string | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	phone?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["Business_max_fields"]: {
	__typename: "Business_max_fields",
	address?: string | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	phone?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate min on columns */
["Business_min_fields"]: {
	__typename: "Business_min_fields",
	address?: string | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	phone?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** response of any mutation on the table "Business" */
["Business_mutation_response"]: {
	__typename: "Business_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["Business"]>
};
	/** input type for inserting object relation for remote table "Business" */
["Business_obj_rel_insert_input"]: {
		data: GraphQLTypes["Business_insert_input"],
	/** upsert condition */
	on_conflict?: GraphQLTypes["Business_on_conflict"] | undefined
};
	/** on_conflict condition type for table "Business" */
["Business_on_conflict"]: {
		constraint: GraphQLTypes["Business_constraint"],
	update_columns: Array<GraphQLTypes["Business_update_column"]>,
	where?: GraphQLTypes["Business_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "Business". */
["Business_order_by"]: {
		BusinessProducts_aggregate?: GraphQLTypes["BusinessProduct_aggregate_order_by"] | undefined,
	BusinessWorkers_aggregate?: GraphQLTypes["BusinessWorker_aggregate_order_by"] | undefined,
	CertificateClaims_aggregate?: GraphQLTypes["CertificateClaim_aggregate_order_by"] | undefined,
	Offers_aggregate?: GraphQLTypes["Offer_aggregate_order_by"] | undefined,
	Orders_aggregate?: GraphQLTypes["Order_aggregate_order_by"] | undefined,
	address?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	phone?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: Business */
["Business_pk_columns_input"]: {
		id: number
};
	/** select columns of table "Business" */
["Business_select_column"]: Business_select_column;
	/** input type for updating data in table "Business" */
["Business_set_input"]: {
		address?: string | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	phone?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["Business_stddev_fields"]: {
	__typename: "Business_stddev_fields",
	id?: number | undefined
};
	/** aggregate stddev_pop on columns */
["Business_stddev_pop_fields"]: {
	__typename: "Business_stddev_pop_fields",
	id?: number | undefined
};
	/** aggregate stddev_samp on columns */
["Business_stddev_samp_fields"]: {
	__typename: "Business_stddev_samp_fields",
	id?: number | undefined
};
	/** Streaming cursor of the table "Business" */
["Business_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["Business_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["Business_stream_cursor_value_input"]: {
		address?: string | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	phone?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["Business_sum_fields"]: {
	__typename: "Business_sum_fields",
	id?: number | undefined
};
	/** update columns of table "Business" */
["Business_update_column"]: Business_update_column;
	["Business_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["Business_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["Business_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["Business_bool_exp"]
};
	/** aggregate var_pop on columns */
["Business_var_pop_fields"]: {
	__typename: "Business_var_pop_fields",
	id?: number | undefined
};
	/** aggregate var_samp on columns */
["Business_var_samp_fields"]: {
	__typename: "Business_var_samp_fields",
	id?: number | undefined
};
	/** aggregate variance on columns */
["Business_variance_fields"]: {
	__typename: "Business_variance_fields",
	id?: number | undefined
};
	/** columns and relationships of "Category" */
["Category"]: {
	__typename: "Category",
	/** An array relationship */
	Categories: Array<GraphQLTypes["Category"]>,
	/** An aggregate relationship */
	Categories_aggregate: GraphQLTypes["Category_aggregate"],
	/** An object relationship */
	Category?: GraphQLTypes["Category"] | undefined,
	/** An array relationship */
	Products: Array<GraphQLTypes["Product"]>,
	/** An aggregate relationship */
	Products_aggregate: GraphQLTypes["Product_aggregate"],
	created_at: GraphQLTypes["timestamp"],
	id: number,
	name: string,
	parent_id?: number | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregated selection of "Category" */
["Category_aggregate"]: {
	__typename: "Category_aggregate",
	aggregate?: GraphQLTypes["Category_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["Category"]>
};
	["Category_aggregate_bool_exp"]: {
		count?: GraphQLTypes["Category_aggregate_bool_exp_count"] | undefined
};
	["Category_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["Category_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Category_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "Category" */
["Category_aggregate_fields"]: {
	__typename: "Category_aggregate_fields",
	avg?: GraphQLTypes["Category_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["Category_max_fields"] | undefined,
	min?: GraphQLTypes["Category_min_fields"] | undefined,
	stddev?: GraphQLTypes["Category_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["Category_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["Category_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["Category_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["Category_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["Category_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["Category_variance_fields"] | undefined
};
	/** order by aggregate values of table "Category" */
["Category_aggregate_order_by"]: {
		avg?: GraphQLTypes["Category_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["Category_max_order_by"] | undefined,
	min?: GraphQLTypes["Category_min_order_by"] | undefined,
	stddev?: GraphQLTypes["Category_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["Category_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["Category_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["Category_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["Category_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["Category_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["Category_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "Category" */
["Category_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["Category_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["Category_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["Category_avg_fields"]: {
	__typename: "Category_avg_fields",
	id?: number | undefined,
	parent_id?: number | undefined
};
	/** order by avg() on columns of table "Category" */
["Category_avg_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	parent_id?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "Category". All fields are combined with a logical 'AND'. */
["Category_bool_exp"]: {
		Categories?: GraphQLTypes["Category_bool_exp"] | undefined,
	Categories_aggregate?: GraphQLTypes["Category_aggregate_bool_exp"] | undefined,
	Category?: GraphQLTypes["Category_bool_exp"] | undefined,
	Products?: GraphQLTypes["Product_bool_exp"] | undefined,
	Products_aggregate?: GraphQLTypes["Product_aggregate_bool_exp"] | undefined,
	_and?: Array<GraphQLTypes["Category_bool_exp"]> | undefined,
	_not?: GraphQLTypes["Category_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["Category_bool_exp"]> | undefined,
	created_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined,
	id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	name?: GraphQLTypes["String_comparison_exp"] | undefined,
	parent_id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	updated_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "Category" */
["Category_constraint"]: Category_constraint;
	/** input type for incrementing numeric columns in table "Category" */
["Category_inc_input"]: {
		id?: number | undefined,
	parent_id?: number | undefined
};
	/** input type for inserting data into table "Category" */
["Category_insert_input"]: {
		Categories?: GraphQLTypes["Category_arr_rel_insert_input"] | undefined,
	Category?: GraphQLTypes["Category_obj_rel_insert_input"] | undefined,
	Products?: GraphQLTypes["Product_arr_rel_insert_input"] | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	parent_id?: number | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["Category_max_fields"]: {
	__typename: "Category_max_fields",
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	parent_id?: number | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** order by max() on columns of table "Category" */
["Category_max_order_by"]: {
		created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	parent_id?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["Category_min_fields"]: {
	__typename: "Category_min_fields",
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	parent_id?: number | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** order by min() on columns of table "Category" */
["Category_min_order_by"]: {
		created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	parent_id?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "Category" */
["Category_mutation_response"]: {
	__typename: "Category_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["Category"]>
};
	/** input type for inserting object relation for remote table "Category" */
["Category_obj_rel_insert_input"]: {
		data: GraphQLTypes["Category_insert_input"],
	/** upsert condition */
	on_conflict?: GraphQLTypes["Category_on_conflict"] | undefined
};
	/** on_conflict condition type for table "Category" */
["Category_on_conflict"]: {
		constraint: GraphQLTypes["Category_constraint"],
	update_columns: Array<GraphQLTypes["Category_update_column"]>,
	where?: GraphQLTypes["Category_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "Category". */
["Category_order_by"]: {
		Categories_aggregate?: GraphQLTypes["Category_aggregate_order_by"] | undefined,
	Category?: GraphQLTypes["Category_order_by"] | undefined,
	Products_aggregate?: GraphQLTypes["Product_aggregate_order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	parent_id?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: Category */
["Category_pk_columns_input"]: {
		id: number
};
	/** select columns of table "Category" */
["Category_select_column"]: Category_select_column;
	/** input type for updating data in table "Category" */
["Category_set_input"]: {
		created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	parent_id?: number | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["Category_stddev_fields"]: {
	__typename: "Category_stddev_fields",
	id?: number | undefined,
	parent_id?: number | undefined
};
	/** order by stddev() on columns of table "Category" */
["Category_stddev_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	parent_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["Category_stddev_pop_fields"]: {
	__typename: "Category_stddev_pop_fields",
	id?: number | undefined,
	parent_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "Category" */
["Category_stddev_pop_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	parent_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["Category_stddev_samp_fields"]: {
	__typename: "Category_stddev_samp_fields",
	id?: number | undefined,
	parent_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "Category" */
["Category_stddev_samp_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	parent_id?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "Category" */
["Category_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["Category_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["Category_stream_cursor_value_input"]: {
		created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	parent_id?: number | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["Category_sum_fields"]: {
	__typename: "Category_sum_fields",
	id?: number | undefined,
	parent_id?: number | undefined
};
	/** order by sum() on columns of table "Category" */
["Category_sum_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	parent_id?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "Category" */
["Category_update_column"]: Category_update_column;
	["Category_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["Category_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["Category_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["Category_bool_exp"]
};
	/** aggregate var_pop on columns */
["Category_var_pop_fields"]: {
	__typename: "Category_var_pop_fields",
	id?: number | undefined,
	parent_id?: number | undefined
};
	/** order by var_pop() on columns of table "Category" */
["Category_var_pop_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	parent_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["Category_var_samp_fields"]: {
	__typename: "Category_var_samp_fields",
	id?: number | undefined,
	parent_id?: number | undefined
};
	/** order by var_samp() on columns of table "Category" */
["Category_var_samp_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	parent_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["Category_variance_fields"]: {
	__typename: "Category_variance_fields",
	id?: number | undefined,
	parent_id?: number | undefined
};
	/** order by variance() on columns of table "Category" */
["Category_variance_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	parent_id?: GraphQLTypes["order_by"] | undefined
};
	/** columns and relationships of "Certificate" */
["Certificate"]: {
	__typename: "Certificate",
	/** An object relationship */
	CertificateCategory?: GraphQLTypes["CertificateCategory"] | undefined,
	/** An array relationship */
	CertificateClaims: Array<GraphQLTypes["CertificateClaim"]>,
	/** An aggregate relationship */
	CertificateClaims_aggregate: GraphQLTypes["CertificateClaim_aggregate"],
	certificateCategory_id?: number | undefined,
	created_at: GraphQLTypes["timestamp"],
	icon_url?: string | undefined,
	id: number,
	image_url?: string | undefined,
	name: string,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** columns and relationships of "CertificateCategory" */
["CertificateCategory"]: {
	__typename: "CertificateCategory",
	/** An array relationship */
	Certificates: Array<GraphQLTypes["Certificate"]>,
	/** An aggregate relationship */
	Certificates_aggregate: GraphQLTypes["Certificate_aggregate"],
	created_at: GraphQLTypes["timestamp"],
	id: number,
	name: string,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregated selection of "CertificateCategory" */
["CertificateCategory_aggregate"]: {
	__typename: "CertificateCategory_aggregate",
	aggregate?: GraphQLTypes["CertificateCategory_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["CertificateCategory"]>
};
	/** aggregate fields of "CertificateCategory" */
["CertificateCategory_aggregate_fields"]: {
	__typename: "CertificateCategory_aggregate_fields",
	avg?: GraphQLTypes["CertificateCategory_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["CertificateCategory_max_fields"] | undefined,
	min?: GraphQLTypes["CertificateCategory_min_fields"] | undefined,
	stddev?: GraphQLTypes["CertificateCategory_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["CertificateCategory_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["CertificateCategory_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["CertificateCategory_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["CertificateCategory_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["CertificateCategory_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["CertificateCategory_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["CertificateCategory_avg_fields"]: {
	__typename: "CertificateCategory_avg_fields",
	id?: number | undefined
};
	/** Boolean expression to filter rows from the table "CertificateCategory". All fields are combined with a logical 'AND'. */
["CertificateCategory_bool_exp"]: {
		Certificates?: GraphQLTypes["Certificate_bool_exp"] | undefined,
	Certificates_aggregate?: GraphQLTypes["Certificate_aggregate_bool_exp"] | undefined,
	_and?: Array<GraphQLTypes["CertificateCategory_bool_exp"]> | undefined,
	_not?: GraphQLTypes["CertificateCategory_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["CertificateCategory_bool_exp"]> | undefined,
	created_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined,
	id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	name?: GraphQLTypes["String_comparison_exp"] | undefined,
	updated_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "CertificateCategory" */
["CertificateCategory_constraint"]: CertificateCategory_constraint;
	/** input type for incrementing numeric columns in table "CertificateCategory" */
["CertificateCategory_inc_input"]: {
		id?: number | undefined
};
	/** input type for inserting data into table "CertificateCategory" */
["CertificateCategory_insert_input"]: {
		Certificates?: GraphQLTypes["Certificate_arr_rel_insert_input"] | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["CertificateCategory_max_fields"]: {
	__typename: "CertificateCategory_max_fields",
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate min on columns */
["CertificateCategory_min_fields"]: {
	__typename: "CertificateCategory_min_fields",
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** response of any mutation on the table "CertificateCategory" */
["CertificateCategory_mutation_response"]: {
	__typename: "CertificateCategory_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["CertificateCategory"]>
};
	/** input type for inserting object relation for remote table "CertificateCategory" */
["CertificateCategory_obj_rel_insert_input"]: {
		data: GraphQLTypes["CertificateCategory_insert_input"],
	/** upsert condition */
	on_conflict?: GraphQLTypes["CertificateCategory_on_conflict"] | undefined
};
	/** on_conflict condition type for table "CertificateCategory" */
["CertificateCategory_on_conflict"]: {
		constraint: GraphQLTypes["CertificateCategory_constraint"],
	update_columns: Array<GraphQLTypes["CertificateCategory_update_column"]>,
	where?: GraphQLTypes["CertificateCategory_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "CertificateCategory". */
["CertificateCategory_order_by"]: {
		Certificates_aggregate?: GraphQLTypes["Certificate_aggregate_order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: CertificateCategory */
["CertificateCategory_pk_columns_input"]: {
		id: number
};
	/** select columns of table "CertificateCategory" */
["CertificateCategory_select_column"]: CertificateCategory_select_column;
	/** input type for updating data in table "CertificateCategory" */
["CertificateCategory_set_input"]: {
		created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["CertificateCategory_stddev_fields"]: {
	__typename: "CertificateCategory_stddev_fields",
	id?: number | undefined
};
	/** aggregate stddev_pop on columns */
["CertificateCategory_stddev_pop_fields"]: {
	__typename: "CertificateCategory_stddev_pop_fields",
	id?: number | undefined
};
	/** aggregate stddev_samp on columns */
["CertificateCategory_stddev_samp_fields"]: {
	__typename: "CertificateCategory_stddev_samp_fields",
	id?: number | undefined
};
	/** Streaming cursor of the table "CertificateCategory" */
["CertificateCategory_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["CertificateCategory_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["CertificateCategory_stream_cursor_value_input"]: {
		created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	name?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["CertificateCategory_sum_fields"]: {
	__typename: "CertificateCategory_sum_fields",
	id?: number | undefined
};
	/** update columns of table "CertificateCategory" */
["CertificateCategory_update_column"]: CertificateCategory_update_column;
	["CertificateCategory_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["CertificateCategory_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["CertificateCategory_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["CertificateCategory_bool_exp"]
};
	/** aggregate var_pop on columns */
["CertificateCategory_var_pop_fields"]: {
	__typename: "CertificateCategory_var_pop_fields",
	id?: number | undefined
};
	/** aggregate var_samp on columns */
["CertificateCategory_var_samp_fields"]: {
	__typename: "CertificateCategory_var_samp_fields",
	id?: number | undefined
};
	/** aggregate variance on columns */
["CertificateCategory_variance_fields"]: {
	__typename: "CertificateCategory_variance_fields",
	id?: number | undefined
};
	/** columns and relationships of "CertificateClaim" */
["CertificateClaim"]: {
	__typename: "CertificateClaim",
	/** An object relationship */
	Business: GraphQLTypes["Business"],
	/** An object relationship */
	Certificate: GraphQLTypes["Certificate"],
	business_id: number,
	certificate_id: number,
	created_at: GraphQLTypes["timestamp"],
	id: number,
	status: GraphQLTypes["CertificateClaimStatus"],
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	["CertificateClaimStatus"]: "scalar" & { name: "CertificateClaimStatus" };
	/** Boolean expression to compare columns of type "CertificateClaimStatus". All fields are combined with logical 'AND'. */
["CertificateClaimStatus_comparison_exp"]: {
		_eq?: GraphQLTypes["CertificateClaimStatus"] | undefined,
	_gt?: GraphQLTypes["CertificateClaimStatus"] | undefined,
	_gte?: GraphQLTypes["CertificateClaimStatus"] | undefined,
	_in?: Array<GraphQLTypes["CertificateClaimStatus"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: GraphQLTypes["CertificateClaimStatus"] | undefined,
	_lte?: GraphQLTypes["CertificateClaimStatus"] | undefined,
	_neq?: GraphQLTypes["CertificateClaimStatus"] | undefined,
	_nin?: Array<GraphQLTypes["CertificateClaimStatus"]> | undefined
};
	/** aggregated selection of "CertificateClaim" */
["CertificateClaim_aggregate"]: {
	__typename: "CertificateClaim_aggregate",
	aggregate?: GraphQLTypes["CertificateClaim_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["CertificateClaim"]>
};
	["CertificateClaim_aggregate_bool_exp"]: {
		count?: GraphQLTypes["CertificateClaim_aggregate_bool_exp_count"] | undefined
};
	["CertificateClaim_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["CertificateClaim_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["CertificateClaim_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "CertificateClaim" */
["CertificateClaim_aggregate_fields"]: {
	__typename: "CertificateClaim_aggregate_fields",
	avg?: GraphQLTypes["CertificateClaim_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["CertificateClaim_max_fields"] | undefined,
	min?: GraphQLTypes["CertificateClaim_min_fields"] | undefined,
	stddev?: GraphQLTypes["CertificateClaim_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["CertificateClaim_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["CertificateClaim_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["CertificateClaim_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["CertificateClaim_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["CertificateClaim_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["CertificateClaim_variance_fields"] | undefined
};
	/** order by aggregate values of table "CertificateClaim" */
["CertificateClaim_aggregate_order_by"]: {
		avg?: GraphQLTypes["CertificateClaim_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["CertificateClaim_max_order_by"] | undefined,
	min?: GraphQLTypes["CertificateClaim_min_order_by"] | undefined,
	stddev?: GraphQLTypes["CertificateClaim_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["CertificateClaim_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["CertificateClaim_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["CertificateClaim_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["CertificateClaim_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["CertificateClaim_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["CertificateClaim_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "CertificateClaim" */
["CertificateClaim_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["CertificateClaim_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["CertificateClaim_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["CertificateClaim_avg_fields"]: {
	__typename: "CertificateClaim_avg_fields",
	business_id?: number | undefined,
	certificate_id?: number | undefined,
	id?: number | undefined
};
	/** order by avg() on columns of table "CertificateClaim" */
["CertificateClaim_avg_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	certificate_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "CertificateClaim". All fields are combined with a logical 'AND'. */
["CertificateClaim_bool_exp"]: {
		Business?: GraphQLTypes["Business_bool_exp"] | undefined,
	Certificate?: GraphQLTypes["Certificate_bool_exp"] | undefined,
	_and?: Array<GraphQLTypes["CertificateClaim_bool_exp"]> | undefined,
	_not?: GraphQLTypes["CertificateClaim_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["CertificateClaim_bool_exp"]> | undefined,
	business_id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	certificate_id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	created_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined,
	id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	status?: GraphQLTypes["CertificateClaimStatus_comparison_exp"] | undefined,
	updated_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "CertificateClaim" */
["CertificateClaim_constraint"]: CertificateClaim_constraint;
	/** input type for incrementing numeric columns in table "CertificateClaim" */
["CertificateClaim_inc_input"]: {
		business_id?: number | undefined,
	certificate_id?: number | undefined,
	id?: number | undefined
};
	/** input type for inserting data into table "CertificateClaim" */
["CertificateClaim_insert_input"]: {
		Business?: GraphQLTypes["Business_obj_rel_insert_input"] | undefined,
	Certificate?: GraphQLTypes["Certificate_obj_rel_insert_input"] | undefined,
	business_id?: number | undefined,
	certificate_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	status?: GraphQLTypes["CertificateClaimStatus"] | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["CertificateClaim_max_fields"]: {
	__typename: "CertificateClaim_max_fields",
	business_id?: number | undefined,
	certificate_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	status?: GraphQLTypes["CertificateClaimStatus"] | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** order by max() on columns of table "CertificateClaim" */
["CertificateClaim_max_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	certificate_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	status?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["CertificateClaim_min_fields"]: {
	__typename: "CertificateClaim_min_fields",
	business_id?: number | undefined,
	certificate_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	status?: GraphQLTypes["CertificateClaimStatus"] | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** order by min() on columns of table "CertificateClaim" */
["CertificateClaim_min_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	certificate_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	status?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "CertificateClaim" */
["CertificateClaim_mutation_response"]: {
	__typename: "CertificateClaim_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["CertificateClaim"]>
};
	/** on_conflict condition type for table "CertificateClaim" */
["CertificateClaim_on_conflict"]: {
		constraint: GraphQLTypes["CertificateClaim_constraint"],
	update_columns: Array<GraphQLTypes["CertificateClaim_update_column"]>,
	where?: GraphQLTypes["CertificateClaim_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "CertificateClaim". */
["CertificateClaim_order_by"]: {
		Business?: GraphQLTypes["Business_order_by"] | undefined,
	Certificate?: GraphQLTypes["Certificate_order_by"] | undefined,
	business_id?: GraphQLTypes["order_by"] | undefined,
	certificate_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	status?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: CertificateClaim */
["CertificateClaim_pk_columns_input"]: {
		id: number
};
	/** select columns of table "CertificateClaim" */
["CertificateClaim_select_column"]: CertificateClaim_select_column;
	/** input type for updating data in table "CertificateClaim" */
["CertificateClaim_set_input"]: {
		business_id?: number | undefined,
	certificate_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	status?: GraphQLTypes["CertificateClaimStatus"] | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["CertificateClaim_stddev_fields"]: {
	__typename: "CertificateClaim_stddev_fields",
	business_id?: number | undefined,
	certificate_id?: number | undefined,
	id?: number | undefined
};
	/** order by stddev() on columns of table "CertificateClaim" */
["CertificateClaim_stddev_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	certificate_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["CertificateClaim_stddev_pop_fields"]: {
	__typename: "CertificateClaim_stddev_pop_fields",
	business_id?: number | undefined,
	certificate_id?: number | undefined,
	id?: number | undefined
};
	/** order by stddev_pop() on columns of table "CertificateClaim" */
["CertificateClaim_stddev_pop_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	certificate_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["CertificateClaim_stddev_samp_fields"]: {
	__typename: "CertificateClaim_stddev_samp_fields",
	business_id?: number | undefined,
	certificate_id?: number | undefined,
	id?: number | undefined
};
	/** order by stddev_samp() on columns of table "CertificateClaim" */
["CertificateClaim_stddev_samp_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	certificate_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "CertificateClaim" */
["CertificateClaim_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["CertificateClaim_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["CertificateClaim_stream_cursor_value_input"]: {
		business_id?: number | undefined,
	certificate_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	status?: GraphQLTypes["CertificateClaimStatus"] | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["CertificateClaim_sum_fields"]: {
	__typename: "CertificateClaim_sum_fields",
	business_id?: number | undefined,
	certificate_id?: number | undefined,
	id?: number | undefined
};
	/** order by sum() on columns of table "CertificateClaim" */
["CertificateClaim_sum_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	certificate_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "CertificateClaim" */
["CertificateClaim_update_column"]: CertificateClaim_update_column;
	["CertificateClaim_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["CertificateClaim_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["CertificateClaim_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["CertificateClaim_bool_exp"]
};
	/** aggregate var_pop on columns */
["CertificateClaim_var_pop_fields"]: {
	__typename: "CertificateClaim_var_pop_fields",
	business_id?: number | undefined,
	certificate_id?: number | undefined,
	id?: number | undefined
};
	/** order by var_pop() on columns of table "CertificateClaim" */
["CertificateClaim_var_pop_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	certificate_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["CertificateClaim_var_samp_fields"]: {
	__typename: "CertificateClaim_var_samp_fields",
	business_id?: number | undefined,
	certificate_id?: number | undefined,
	id?: number | undefined
};
	/** order by var_samp() on columns of table "CertificateClaim" */
["CertificateClaim_var_samp_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	certificate_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["CertificateClaim_variance_fields"]: {
	__typename: "CertificateClaim_variance_fields",
	business_id?: number | undefined,
	certificate_id?: number | undefined,
	id?: number | undefined
};
	/** order by variance() on columns of table "CertificateClaim" */
["CertificateClaim_variance_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	certificate_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregated selection of "Certificate" */
["Certificate_aggregate"]: {
	__typename: "Certificate_aggregate",
	aggregate?: GraphQLTypes["Certificate_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["Certificate"]>
};
	["Certificate_aggregate_bool_exp"]: {
		count?: GraphQLTypes["Certificate_aggregate_bool_exp_count"] | undefined
};
	["Certificate_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["Certificate_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Certificate_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "Certificate" */
["Certificate_aggregate_fields"]: {
	__typename: "Certificate_aggregate_fields",
	avg?: GraphQLTypes["Certificate_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["Certificate_max_fields"] | undefined,
	min?: GraphQLTypes["Certificate_min_fields"] | undefined,
	stddev?: GraphQLTypes["Certificate_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["Certificate_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["Certificate_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["Certificate_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["Certificate_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["Certificate_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["Certificate_variance_fields"] | undefined
};
	/** order by aggregate values of table "Certificate" */
["Certificate_aggregate_order_by"]: {
		avg?: GraphQLTypes["Certificate_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["Certificate_max_order_by"] | undefined,
	min?: GraphQLTypes["Certificate_min_order_by"] | undefined,
	stddev?: GraphQLTypes["Certificate_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["Certificate_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["Certificate_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["Certificate_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["Certificate_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["Certificate_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["Certificate_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "Certificate" */
["Certificate_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["Certificate_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["Certificate_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["Certificate_avg_fields"]: {
	__typename: "Certificate_avg_fields",
	certificateCategory_id?: number | undefined,
	id?: number | undefined
};
	/** order by avg() on columns of table "Certificate" */
["Certificate_avg_order_by"]: {
		certificateCategory_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "Certificate". All fields are combined with a logical 'AND'. */
["Certificate_bool_exp"]: {
		CertificateCategory?: GraphQLTypes["CertificateCategory_bool_exp"] | undefined,
	CertificateClaims?: GraphQLTypes["CertificateClaim_bool_exp"] | undefined,
	CertificateClaims_aggregate?: GraphQLTypes["CertificateClaim_aggregate_bool_exp"] | undefined,
	_and?: Array<GraphQLTypes["Certificate_bool_exp"]> | undefined,
	_not?: GraphQLTypes["Certificate_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["Certificate_bool_exp"]> | undefined,
	certificateCategory_id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	created_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined,
	icon_url?: GraphQLTypes["String_comparison_exp"] | undefined,
	id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	image_url?: GraphQLTypes["String_comparison_exp"] | undefined,
	name?: GraphQLTypes["String_comparison_exp"] | undefined,
	updated_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "Certificate" */
["Certificate_constraint"]: Certificate_constraint;
	/** input type for incrementing numeric columns in table "Certificate" */
["Certificate_inc_input"]: {
		certificateCategory_id?: number | undefined,
	id?: number | undefined
};
	/** input type for inserting data into table "Certificate" */
["Certificate_insert_input"]: {
		CertificateCategory?: GraphQLTypes["CertificateCategory_obj_rel_insert_input"] | undefined,
	CertificateClaims?: GraphQLTypes["CertificateClaim_arr_rel_insert_input"] | undefined,
	certificateCategory_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	icon_url?: string | undefined,
	id?: number | undefined,
	image_url?: string | undefined,
	name?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["Certificate_max_fields"]: {
	__typename: "Certificate_max_fields",
	certificateCategory_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	icon_url?: string | undefined,
	id?: number | undefined,
	image_url?: string | undefined,
	name?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** order by max() on columns of table "Certificate" */
["Certificate_max_order_by"]: {
		certificateCategory_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	icon_url?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	image_url?: GraphQLTypes["order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["Certificate_min_fields"]: {
	__typename: "Certificate_min_fields",
	certificateCategory_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	icon_url?: string | undefined,
	id?: number | undefined,
	image_url?: string | undefined,
	name?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** order by min() on columns of table "Certificate" */
["Certificate_min_order_by"]: {
		certificateCategory_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	icon_url?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	image_url?: GraphQLTypes["order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "Certificate" */
["Certificate_mutation_response"]: {
	__typename: "Certificate_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["Certificate"]>
};
	/** input type for inserting object relation for remote table "Certificate" */
["Certificate_obj_rel_insert_input"]: {
		data: GraphQLTypes["Certificate_insert_input"],
	/** upsert condition */
	on_conflict?: GraphQLTypes["Certificate_on_conflict"] | undefined
};
	/** on_conflict condition type for table "Certificate" */
["Certificate_on_conflict"]: {
		constraint: GraphQLTypes["Certificate_constraint"],
	update_columns: Array<GraphQLTypes["Certificate_update_column"]>,
	where?: GraphQLTypes["Certificate_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "Certificate". */
["Certificate_order_by"]: {
		CertificateCategory?: GraphQLTypes["CertificateCategory_order_by"] | undefined,
	CertificateClaims_aggregate?: GraphQLTypes["CertificateClaim_aggregate_order_by"] | undefined,
	certificateCategory_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	icon_url?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	image_url?: GraphQLTypes["order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: Certificate */
["Certificate_pk_columns_input"]: {
		id: number
};
	/** select columns of table "Certificate" */
["Certificate_select_column"]: Certificate_select_column;
	/** input type for updating data in table "Certificate" */
["Certificate_set_input"]: {
		certificateCategory_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	icon_url?: string | undefined,
	id?: number | undefined,
	image_url?: string | undefined,
	name?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["Certificate_stddev_fields"]: {
	__typename: "Certificate_stddev_fields",
	certificateCategory_id?: number | undefined,
	id?: number | undefined
};
	/** order by stddev() on columns of table "Certificate" */
["Certificate_stddev_order_by"]: {
		certificateCategory_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["Certificate_stddev_pop_fields"]: {
	__typename: "Certificate_stddev_pop_fields",
	certificateCategory_id?: number | undefined,
	id?: number | undefined
};
	/** order by stddev_pop() on columns of table "Certificate" */
["Certificate_stddev_pop_order_by"]: {
		certificateCategory_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["Certificate_stddev_samp_fields"]: {
	__typename: "Certificate_stddev_samp_fields",
	certificateCategory_id?: number | undefined,
	id?: number | undefined
};
	/** order by stddev_samp() on columns of table "Certificate" */
["Certificate_stddev_samp_order_by"]: {
		certificateCategory_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "Certificate" */
["Certificate_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["Certificate_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["Certificate_stream_cursor_value_input"]: {
		certificateCategory_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	icon_url?: string | undefined,
	id?: number | undefined,
	image_url?: string | undefined,
	name?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["Certificate_sum_fields"]: {
	__typename: "Certificate_sum_fields",
	certificateCategory_id?: number | undefined,
	id?: number | undefined
};
	/** order by sum() on columns of table "Certificate" */
["Certificate_sum_order_by"]: {
		certificateCategory_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "Certificate" */
["Certificate_update_column"]: Certificate_update_column;
	["Certificate_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["Certificate_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["Certificate_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["Certificate_bool_exp"]
};
	/** aggregate var_pop on columns */
["Certificate_var_pop_fields"]: {
	__typename: "Certificate_var_pop_fields",
	certificateCategory_id?: number | undefined,
	id?: number | undefined
};
	/** order by var_pop() on columns of table "Certificate" */
["Certificate_var_pop_order_by"]: {
		certificateCategory_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["Certificate_var_samp_fields"]: {
	__typename: "Certificate_var_samp_fields",
	certificateCategory_id?: number | undefined,
	id?: number | undefined
};
	/** order by var_samp() on columns of table "Certificate" */
["Certificate_var_samp_order_by"]: {
		certificateCategory_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["Certificate_variance_fields"]: {
	__typename: "Certificate_variance_fields",
	certificateCategory_id?: number | undefined,
	id?: number | undefined
};
	/** order by variance() on columns of table "Certificate" */
["Certificate_variance_order_by"]: {
		certificateCategory_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
["Int_comparison_exp"]: {
		_eq?: number | undefined,
	_gt?: number | undefined,
	_gte?: number | undefined,
	_in?: Array<number> | undefined,
	_is_null?: boolean | undefined,
	_lt?: number | undefined,
	_lte?: number | undefined,
	_neq?: number | undefined,
	_nin?: Array<number> | undefined
};
	/** columns and relationships of "Offer" */
["Offer"]: {
	__typename: "Offer",
	/** An object relationship */
	Business: GraphQLTypes["Business"],
	/** An object relationship */
	Product: GraphQLTypes["Product"],
	active: boolean,
	business_id: number,
	created_at: GraphQLTypes["timestamp"],
	end_date?: GraphQLTypes["timestamp"] | undefined,
	harvest_date?: GraphQLTypes["timestamp"] | undefined,
	id: number,
	packaging?: GraphQLTypes["float8"] | undefined,
	price_per_unit?: GraphQLTypes["float8"] | undefined,
	product_id: number,
	quantity?: GraphQLTypes["float8"] | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	["OfferType"]: "scalar" & { name: "OfferType" };
	/** Boolean expression to compare columns of type "OfferType". All fields are combined with logical 'AND'. */
["OfferType_comparison_exp"]: {
		_eq?: GraphQLTypes["OfferType"] | undefined,
	_gt?: GraphQLTypes["OfferType"] | undefined,
	_gte?: GraphQLTypes["OfferType"] | undefined,
	_in?: Array<GraphQLTypes["OfferType"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: GraphQLTypes["OfferType"] | undefined,
	_lte?: GraphQLTypes["OfferType"] | undefined,
	_neq?: GraphQLTypes["OfferType"] | undefined,
	_nin?: Array<GraphQLTypes["OfferType"]> | undefined
};
	/** aggregated selection of "Offer" */
["Offer_aggregate"]: {
	__typename: "Offer_aggregate",
	aggregate?: GraphQLTypes["Offer_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["Offer"]>
};
	["Offer_aggregate_bool_exp"]: {
		avg?: GraphQLTypes["Offer_aggregate_bool_exp_avg"] | undefined,
	bool_and?: GraphQLTypes["Offer_aggregate_bool_exp_bool_and"] | undefined,
	bool_or?: GraphQLTypes["Offer_aggregate_bool_exp_bool_or"] | undefined,
	corr?: GraphQLTypes["Offer_aggregate_bool_exp_corr"] | undefined,
	count?: GraphQLTypes["Offer_aggregate_bool_exp_count"] | undefined,
	covar_samp?: GraphQLTypes["Offer_aggregate_bool_exp_covar_samp"] | undefined,
	max?: GraphQLTypes["Offer_aggregate_bool_exp_max"] | undefined,
	min?: GraphQLTypes["Offer_aggregate_bool_exp_min"] | undefined,
	stddev_samp?: GraphQLTypes["Offer_aggregate_bool_exp_stddev_samp"] | undefined,
	sum?: GraphQLTypes["Offer_aggregate_bool_exp_sum"] | undefined,
	var_samp?: GraphQLTypes["Offer_aggregate_bool_exp_var_samp"] | undefined
};
	["Offer_aggregate_bool_exp_avg"]: {
		arguments: GraphQLTypes["Offer_select_column_Offer_aggregate_bool_exp_avg_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Offer_bool_exp"] | undefined,
	predicate: GraphQLTypes["float8_comparison_exp"]
};
	["Offer_aggregate_bool_exp_bool_and"]: {
		arguments: GraphQLTypes["Offer_select_column_Offer_aggregate_bool_exp_bool_and_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Offer_bool_exp"] | undefined,
	predicate: GraphQLTypes["Boolean_comparison_exp"]
};
	["Offer_aggregate_bool_exp_bool_or"]: {
		arguments: GraphQLTypes["Offer_select_column_Offer_aggregate_bool_exp_bool_or_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Offer_bool_exp"] | undefined,
	predicate: GraphQLTypes["Boolean_comparison_exp"]
};
	["Offer_aggregate_bool_exp_corr"]: {
		arguments: GraphQLTypes["Offer_aggregate_bool_exp_corr_arguments"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Offer_bool_exp"] | undefined,
	predicate: GraphQLTypes["float8_comparison_exp"]
};
	["Offer_aggregate_bool_exp_corr_arguments"]: {
		X: GraphQLTypes["Offer_select_column_Offer_aggregate_bool_exp_corr_arguments_columns"],
	Y: GraphQLTypes["Offer_select_column_Offer_aggregate_bool_exp_corr_arguments_columns"]
};
	["Offer_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["Offer_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Offer_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	["Offer_aggregate_bool_exp_covar_samp"]: {
		arguments: GraphQLTypes["Offer_aggregate_bool_exp_covar_samp_arguments"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Offer_bool_exp"] | undefined,
	predicate: GraphQLTypes["float8_comparison_exp"]
};
	["Offer_aggregate_bool_exp_covar_samp_arguments"]: {
		X: GraphQLTypes["Offer_select_column_Offer_aggregate_bool_exp_covar_samp_arguments_columns"],
	Y: GraphQLTypes["Offer_select_column_Offer_aggregate_bool_exp_covar_samp_arguments_columns"]
};
	["Offer_aggregate_bool_exp_max"]: {
		arguments: GraphQLTypes["Offer_select_column_Offer_aggregate_bool_exp_max_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Offer_bool_exp"] | undefined,
	predicate: GraphQLTypes["float8_comparison_exp"]
};
	["Offer_aggregate_bool_exp_min"]: {
		arguments: GraphQLTypes["Offer_select_column_Offer_aggregate_bool_exp_min_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Offer_bool_exp"] | undefined,
	predicate: GraphQLTypes["float8_comparison_exp"]
};
	["Offer_aggregate_bool_exp_stddev_samp"]: {
		arguments: GraphQLTypes["Offer_select_column_Offer_aggregate_bool_exp_stddev_samp_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Offer_bool_exp"] | undefined,
	predicate: GraphQLTypes["float8_comparison_exp"]
};
	["Offer_aggregate_bool_exp_sum"]: {
		arguments: GraphQLTypes["Offer_select_column_Offer_aggregate_bool_exp_sum_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Offer_bool_exp"] | undefined,
	predicate: GraphQLTypes["float8_comparison_exp"]
};
	["Offer_aggregate_bool_exp_var_samp"]: {
		arguments: GraphQLTypes["Offer_select_column_Offer_aggregate_bool_exp_var_samp_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Offer_bool_exp"] | undefined,
	predicate: GraphQLTypes["float8_comparison_exp"]
};
	/** aggregate fields of "Offer" */
["Offer_aggregate_fields"]: {
	__typename: "Offer_aggregate_fields",
	avg?: GraphQLTypes["Offer_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["Offer_max_fields"] | undefined,
	min?: GraphQLTypes["Offer_min_fields"] | undefined,
	stddev?: GraphQLTypes["Offer_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["Offer_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["Offer_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["Offer_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["Offer_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["Offer_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["Offer_variance_fields"] | undefined
};
	/** order by aggregate values of table "Offer" */
["Offer_aggregate_order_by"]: {
		avg?: GraphQLTypes["Offer_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["Offer_max_order_by"] | undefined,
	min?: GraphQLTypes["Offer_min_order_by"] | undefined,
	stddev?: GraphQLTypes["Offer_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["Offer_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["Offer_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["Offer_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["Offer_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["Offer_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["Offer_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "Offer" */
["Offer_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["Offer_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["Offer_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["Offer_avg_fields"]: {
	__typename: "Offer_avg_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	packaging?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity?: number | undefined
};
	/** order by avg() on columns of table "Offer" */
["Offer_avg_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	packaging?: GraphQLTypes["order_by"] | undefined,
	price_per_unit?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	quantity?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "Offer". All fields are combined with a logical 'AND'. */
["Offer_bool_exp"]: {
		Business?: GraphQLTypes["Business_bool_exp"] | undefined,
	Product?: GraphQLTypes["Product_bool_exp"] | undefined,
	_and?: Array<GraphQLTypes["Offer_bool_exp"]> | undefined,
	_not?: GraphQLTypes["Offer_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["Offer_bool_exp"]> | undefined,
	active?: GraphQLTypes["Boolean_comparison_exp"] | undefined,
	business_id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	created_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined,
	end_date?: GraphQLTypes["timestamp_comparison_exp"] | undefined,
	harvest_date?: GraphQLTypes["timestamp_comparison_exp"] | undefined,
	id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	packaging?: GraphQLTypes["float8_comparison_exp"] | undefined,
	price_per_unit?: GraphQLTypes["float8_comparison_exp"] | undefined,
	product_id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	quantity?: GraphQLTypes["float8_comparison_exp"] | undefined,
	updated_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "Offer" */
["Offer_constraint"]: Offer_constraint;
	/** input type for incrementing numeric columns in table "Offer" */
["Offer_inc_input"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	packaging?: GraphQLTypes["float8"] | undefined,
	price_per_unit?: GraphQLTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity?: GraphQLTypes["float8"] | undefined
};
	/** input type for inserting data into table "Offer" */
["Offer_insert_input"]: {
		Business?: GraphQLTypes["Business_obj_rel_insert_input"] | undefined,
	Product?: GraphQLTypes["Product_obj_rel_insert_input"] | undefined,
	active?: boolean | undefined,
	business_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	end_date?: GraphQLTypes["timestamp"] | undefined,
	harvest_date?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	packaging?: GraphQLTypes["float8"] | undefined,
	price_per_unit?: GraphQLTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity?: GraphQLTypes["float8"] | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["Offer_max_fields"]: {
	__typename: "Offer_max_fields",
	business_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	end_date?: GraphQLTypes["timestamp"] | undefined,
	harvest_date?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	packaging?: GraphQLTypes["float8"] | undefined,
	price_per_unit?: GraphQLTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity?: GraphQLTypes["float8"] | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** order by max() on columns of table "Offer" */
["Offer_max_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	end_date?: GraphQLTypes["order_by"] | undefined,
	harvest_date?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	packaging?: GraphQLTypes["order_by"] | undefined,
	price_per_unit?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	quantity?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["Offer_min_fields"]: {
	__typename: "Offer_min_fields",
	business_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	end_date?: GraphQLTypes["timestamp"] | undefined,
	harvest_date?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	packaging?: GraphQLTypes["float8"] | undefined,
	price_per_unit?: GraphQLTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity?: GraphQLTypes["float8"] | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** order by min() on columns of table "Offer" */
["Offer_min_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	end_date?: GraphQLTypes["order_by"] | undefined,
	harvest_date?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	packaging?: GraphQLTypes["order_by"] | undefined,
	price_per_unit?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	quantity?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "Offer" */
["Offer_mutation_response"]: {
	__typename: "Offer_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["Offer"]>
};
	/** on_conflict condition type for table "Offer" */
["Offer_on_conflict"]: {
		constraint: GraphQLTypes["Offer_constraint"],
	update_columns: Array<GraphQLTypes["Offer_update_column"]>,
	where?: GraphQLTypes["Offer_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "Offer". */
["Offer_order_by"]: {
		Business?: GraphQLTypes["Business_order_by"] | undefined,
	Product?: GraphQLTypes["Product_order_by"] | undefined,
	active?: GraphQLTypes["order_by"] | undefined,
	business_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	end_date?: GraphQLTypes["order_by"] | undefined,
	harvest_date?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	packaging?: GraphQLTypes["order_by"] | undefined,
	price_per_unit?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	quantity?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: Offer */
["Offer_pk_columns_input"]: {
		id: number
};
	/** select columns of table "Offer" */
["Offer_select_column"]: Offer_select_column;
	/** select "Offer_aggregate_bool_exp_avg_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_avg_arguments_columns"]: Offer_select_column_Offer_aggregate_bool_exp_avg_arguments_columns;
	/** select "Offer_aggregate_bool_exp_bool_and_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_bool_and_arguments_columns"]: Offer_select_column_Offer_aggregate_bool_exp_bool_and_arguments_columns;
	/** select "Offer_aggregate_bool_exp_bool_or_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_bool_or_arguments_columns"]: Offer_select_column_Offer_aggregate_bool_exp_bool_or_arguments_columns;
	/** select "Offer_aggregate_bool_exp_corr_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_corr_arguments_columns"]: Offer_select_column_Offer_aggregate_bool_exp_corr_arguments_columns;
	/** select "Offer_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_covar_samp_arguments_columns"]: Offer_select_column_Offer_aggregate_bool_exp_covar_samp_arguments_columns;
	/** select "Offer_aggregate_bool_exp_max_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_max_arguments_columns"]: Offer_select_column_Offer_aggregate_bool_exp_max_arguments_columns;
	/** select "Offer_aggregate_bool_exp_min_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_min_arguments_columns"]: Offer_select_column_Offer_aggregate_bool_exp_min_arguments_columns;
	/** select "Offer_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_stddev_samp_arguments_columns"]: Offer_select_column_Offer_aggregate_bool_exp_stddev_samp_arguments_columns;
	/** select "Offer_aggregate_bool_exp_sum_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_sum_arguments_columns"]: Offer_select_column_Offer_aggregate_bool_exp_sum_arguments_columns;
	/** select "Offer_aggregate_bool_exp_var_samp_arguments_columns" columns of table "Offer" */
["Offer_select_column_Offer_aggregate_bool_exp_var_samp_arguments_columns"]: Offer_select_column_Offer_aggregate_bool_exp_var_samp_arguments_columns;
	/** input type for updating data in table "Offer" */
["Offer_set_input"]: {
		active?: boolean | undefined,
	business_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	end_date?: GraphQLTypes["timestamp"] | undefined,
	harvest_date?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	packaging?: GraphQLTypes["float8"] | undefined,
	price_per_unit?: GraphQLTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity?: GraphQLTypes["float8"] | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["Offer_stddev_fields"]: {
	__typename: "Offer_stddev_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	packaging?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity?: number | undefined
};
	/** order by stddev() on columns of table "Offer" */
["Offer_stddev_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	packaging?: GraphQLTypes["order_by"] | undefined,
	price_per_unit?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	quantity?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["Offer_stddev_pop_fields"]: {
	__typename: "Offer_stddev_pop_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	packaging?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity?: number | undefined
};
	/** order by stddev_pop() on columns of table "Offer" */
["Offer_stddev_pop_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	packaging?: GraphQLTypes["order_by"] | undefined,
	price_per_unit?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	quantity?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["Offer_stddev_samp_fields"]: {
	__typename: "Offer_stddev_samp_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	packaging?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity?: number | undefined
};
	/** order by stddev_samp() on columns of table "Offer" */
["Offer_stddev_samp_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	packaging?: GraphQLTypes["order_by"] | undefined,
	price_per_unit?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	quantity?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "Offer" */
["Offer_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["Offer_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["Offer_stream_cursor_value_input"]: {
		active?: boolean | undefined,
	business_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	end_date?: GraphQLTypes["timestamp"] | undefined,
	harvest_date?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	packaging?: GraphQLTypes["float8"] | undefined,
	price_per_unit?: GraphQLTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity?: GraphQLTypes["float8"] | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["Offer_sum_fields"]: {
	__typename: "Offer_sum_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	packaging?: GraphQLTypes["float8"] | undefined,
	price_per_unit?: GraphQLTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity?: GraphQLTypes["float8"] | undefined
};
	/** order by sum() on columns of table "Offer" */
["Offer_sum_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	packaging?: GraphQLTypes["order_by"] | undefined,
	price_per_unit?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	quantity?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "Offer" */
["Offer_update_column"]: Offer_update_column;
	["Offer_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["Offer_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["Offer_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["Offer_bool_exp"]
};
	/** aggregate var_pop on columns */
["Offer_var_pop_fields"]: {
	__typename: "Offer_var_pop_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	packaging?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity?: number | undefined
};
	/** order by var_pop() on columns of table "Offer" */
["Offer_var_pop_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	packaging?: GraphQLTypes["order_by"] | undefined,
	price_per_unit?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	quantity?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["Offer_var_samp_fields"]: {
	__typename: "Offer_var_samp_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	packaging?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity?: number | undefined
};
	/** order by var_samp() on columns of table "Offer" */
["Offer_var_samp_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	packaging?: GraphQLTypes["order_by"] | undefined,
	price_per_unit?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	quantity?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["Offer_variance_fields"]: {
	__typename: "Offer_variance_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	packaging?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity?: number | undefined
};
	/** order by variance() on columns of table "Offer" */
["Offer_variance_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	packaging?: GraphQLTypes["order_by"] | undefined,
	price_per_unit?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	quantity?: GraphQLTypes["order_by"] | undefined
};
	/** columns and relationships of "Order" */
["Order"]: {
	__typename: "Order",
	/** An object relationship */
	Business: GraphQLTypes["Business"],
	/** An object relationship */
	Product: GraphQLTypes["Product"],
	/** An array relationship */
	Transactions: Array<GraphQLTypes["Transaction"]>,
	/** An aggregate relationship */
	Transactions_aggregate: GraphQLTypes["Transaction_aggregate"],
	business_id: number,
	created_at: GraphQLTypes["timestamp"],
	end_date?: GraphQLTypes["timestamp"] | undefined,
	id: number,
	offer_type: GraphQLTypes["OfferType"],
	price_per_unit?: GraphQLTypes["float8"] | undefined,
	product_id: number,
	quantity_by_units: GraphQLTypes["float8"],
	start_date?: GraphQLTypes["timestamp"] | undefined,
	/** An array relationship */
	transactionsBySellOrderId: Array<GraphQLTypes["Transaction"]>,
	/** An aggregate relationship */
	transactionsBySellOrderId_aggregate: GraphQLTypes["Transaction_aggregate"],
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregated selection of "Order" */
["Order_aggregate"]: {
	__typename: "Order_aggregate",
	aggregate?: GraphQLTypes["Order_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["Order"]>
};
	["Order_aggregate_bool_exp"]: {
		avg?: GraphQLTypes["Order_aggregate_bool_exp_avg"] | undefined,
	corr?: GraphQLTypes["Order_aggregate_bool_exp_corr"] | undefined,
	count?: GraphQLTypes["Order_aggregate_bool_exp_count"] | undefined,
	covar_samp?: GraphQLTypes["Order_aggregate_bool_exp_covar_samp"] | undefined,
	max?: GraphQLTypes["Order_aggregate_bool_exp_max"] | undefined,
	min?: GraphQLTypes["Order_aggregate_bool_exp_min"] | undefined,
	stddev_samp?: GraphQLTypes["Order_aggregate_bool_exp_stddev_samp"] | undefined,
	sum?: GraphQLTypes["Order_aggregate_bool_exp_sum"] | undefined,
	var_samp?: GraphQLTypes["Order_aggregate_bool_exp_var_samp"] | undefined
};
	["Order_aggregate_bool_exp_avg"]: {
		arguments: GraphQLTypes["Order_select_column_Order_aggregate_bool_exp_avg_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Order_bool_exp"] | undefined,
	predicate: GraphQLTypes["float8_comparison_exp"]
};
	["Order_aggregate_bool_exp_corr"]: {
		arguments: GraphQLTypes["Order_aggregate_bool_exp_corr_arguments"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Order_bool_exp"] | undefined,
	predicate: GraphQLTypes["float8_comparison_exp"]
};
	["Order_aggregate_bool_exp_corr_arguments"]: {
		X: GraphQLTypes["Order_select_column_Order_aggregate_bool_exp_corr_arguments_columns"],
	Y: GraphQLTypes["Order_select_column_Order_aggregate_bool_exp_corr_arguments_columns"]
};
	["Order_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["Order_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Order_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	["Order_aggregate_bool_exp_covar_samp"]: {
		arguments: GraphQLTypes["Order_aggregate_bool_exp_covar_samp_arguments"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Order_bool_exp"] | undefined,
	predicate: GraphQLTypes["float8_comparison_exp"]
};
	["Order_aggregate_bool_exp_covar_samp_arguments"]: {
		X: GraphQLTypes["Order_select_column_Order_aggregate_bool_exp_covar_samp_arguments_columns"],
	Y: GraphQLTypes["Order_select_column_Order_aggregate_bool_exp_covar_samp_arguments_columns"]
};
	["Order_aggregate_bool_exp_max"]: {
		arguments: GraphQLTypes["Order_select_column_Order_aggregate_bool_exp_max_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Order_bool_exp"] | undefined,
	predicate: GraphQLTypes["float8_comparison_exp"]
};
	["Order_aggregate_bool_exp_min"]: {
		arguments: GraphQLTypes["Order_select_column_Order_aggregate_bool_exp_min_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Order_bool_exp"] | undefined,
	predicate: GraphQLTypes["float8_comparison_exp"]
};
	["Order_aggregate_bool_exp_stddev_samp"]: {
		arguments: GraphQLTypes["Order_select_column_Order_aggregate_bool_exp_stddev_samp_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Order_bool_exp"] | undefined,
	predicate: GraphQLTypes["float8_comparison_exp"]
};
	["Order_aggregate_bool_exp_sum"]: {
		arguments: GraphQLTypes["Order_select_column_Order_aggregate_bool_exp_sum_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Order_bool_exp"] | undefined,
	predicate: GraphQLTypes["float8_comparison_exp"]
};
	["Order_aggregate_bool_exp_var_samp"]: {
		arguments: GraphQLTypes["Order_select_column_Order_aggregate_bool_exp_var_samp_arguments_columns"],
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Order_bool_exp"] | undefined,
	predicate: GraphQLTypes["float8_comparison_exp"]
};
	/** aggregate fields of "Order" */
["Order_aggregate_fields"]: {
	__typename: "Order_aggregate_fields",
	avg?: GraphQLTypes["Order_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["Order_max_fields"] | undefined,
	min?: GraphQLTypes["Order_min_fields"] | undefined,
	stddev?: GraphQLTypes["Order_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["Order_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["Order_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["Order_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["Order_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["Order_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["Order_variance_fields"] | undefined
};
	/** order by aggregate values of table "Order" */
["Order_aggregate_order_by"]: {
		avg?: GraphQLTypes["Order_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["Order_max_order_by"] | undefined,
	min?: GraphQLTypes["Order_min_order_by"] | undefined,
	stddev?: GraphQLTypes["Order_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["Order_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["Order_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["Order_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["Order_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["Order_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["Order_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "Order" */
["Order_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["Order_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["Order_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["Order_avg_fields"]: {
	__typename: "Order_avg_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity_by_units?: number | undefined
};
	/** order by avg() on columns of table "Order" */
["Order_avg_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	price_per_unit?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	quantity_by_units?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "Order". All fields are combined with a logical 'AND'. */
["Order_bool_exp"]: {
		Business?: GraphQLTypes["Business_bool_exp"] | undefined,
	Product?: GraphQLTypes["Product_bool_exp"] | undefined,
	Transactions?: GraphQLTypes["Transaction_bool_exp"] | undefined,
	Transactions_aggregate?: GraphQLTypes["Transaction_aggregate_bool_exp"] | undefined,
	_and?: Array<GraphQLTypes["Order_bool_exp"]> | undefined,
	_not?: GraphQLTypes["Order_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["Order_bool_exp"]> | undefined,
	business_id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	created_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined,
	end_date?: GraphQLTypes["timestamp_comparison_exp"] | undefined,
	id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	offer_type?: GraphQLTypes["OfferType_comparison_exp"] | undefined,
	price_per_unit?: GraphQLTypes["float8_comparison_exp"] | undefined,
	product_id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	quantity_by_units?: GraphQLTypes["float8_comparison_exp"] | undefined,
	start_date?: GraphQLTypes["timestamp_comparison_exp"] | undefined,
	transactionsBySellOrderId?: GraphQLTypes["Transaction_bool_exp"] | undefined,
	transactionsBySellOrderId_aggregate?: GraphQLTypes["Transaction_aggregate_bool_exp"] | undefined,
	updated_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "Order" */
["Order_constraint"]: Order_constraint;
	/** input type for incrementing numeric columns in table "Order" */
["Order_inc_input"]: {
		business_id?: number | undefined,
	id?: number | undefined,
	price_per_unit?: GraphQLTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity_by_units?: GraphQLTypes["float8"] | undefined
};
	/** input type for inserting data into table "Order" */
["Order_insert_input"]: {
		Business?: GraphQLTypes["Business_obj_rel_insert_input"] | undefined,
	Product?: GraphQLTypes["Product_obj_rel_insert_input"] | undefined,
	Transactions?: GraphQLTypes["Transaction_arr_rel_insert_input"] | undefined,
	business_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	end_date?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	offer_type?: GraphQLTypes["OfferType"] | undefined,
	price_per_unit?: GraphQLTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity_by_units?: GraphQLTypes["float8"] | undefined,
	start_date?: GraphQLTypes["timestamp"] | undefined,
	transactionsBySellOrderId?: GraphQLTypes["Transaction_arr_rel_insert_input"] | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["Order_max_fields"]: {
	__typename: "Order_max_fields",
	business_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	end_date?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	offer_type?: GraphQLTypes["OfferType"] | undefined,
	price_per_unit?: GraphQLTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity_by_units?: GraphQLTypes["float8"] | undefined,
	start_date?: GraphQLTypes["timestamp"] | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** order by max() on columns of table "Order" */
["Order_max_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	end_date?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	offer_type?: GraphQLTypes["order_by"] | undefined,
	price_per_unit?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	quantity_by_units?: GraphQLTypes["order_by"] | undefined,
	start_date?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["Order_min_fields"]: {
	__typename: "Order_min_fields",
	business_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	end_date?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	offer_type?: GraphQLTypes["OfferType"] | undefined,
	price_per_unit?: GraphQLTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity_by_units?: GraphQLTypes["float8"] | undefined,
	start_date?: GraphQLTypes["timestamp"] | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** order by min() on columns of table "Order" */
["Order_min_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	end_date?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	offer_type?: GraphQLTypes["order_by"] | undefined,
	price_per_unit?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	quantity_by_units?: GraphQLTypes["order_by"] | undefined,
	start_date?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "Order" */
["Order_mutation_response"]: {
	__typename: "Order_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["Order"]>
};
	/** input type for inserting object relation for remote table "Order" */
["Order_obj_rel_insert_input"]: {
		data: GraphQLTypes["Order_insert_input"],
	/** upsert condition */
	on_conflict?: GraphQLTypes["Order_on_conflict"] | undefined
};
	/** on_conflict condition type for table "Order" */
["Order_on_conflict"]: {
		constraint: GraphQLTypes["Order_constraint"],
	update_columns: Array<GraphQLTypes["Order_update_column"]>,
	where?: GraphQLTypes["Order_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "Order". */
["Order_order_by"]: {
		Business?: GraphQLTypes["Business_order_by"] | undefined,
	Product?: GraphQLTypes["Product_order_by"] | undefined,
	Transactions_aggregate?: GraphQLTypes["Transaction_aggregate_order_by"] | undefined,
	business_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	end_date?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	offer_type?: GraphQLTypes["order_by"] | undefined,
	price_per_unit?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	quantity_by_units?: GraphQLTypes["order_by"] | undefined,
	start_date?: GraphQLTypes["order_by"] | undefined,
	transactionsBySellOrderId_aggregate?: GraphQLTypes["Transaction_aggregate_order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: Order */
["Order_pk_columns_input"]: {
		id: number
};
	/** select columns of table "Order" */
["Order_select_column"]: Order_select_column;
	/** select "Order_aggregate_bool_exp_avg_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_avg_arguments_columns"]: Order_select_column_Order_aggregate_bool_exp_avg_arguments_columns;
	/** select "Order_aggregate_bool_exp_corr_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_corr_arguments_columns"]: Order_select_column_Order_aggregate_bool_exp_corr_arguments_columns;
	/** select "Order_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_covar_samp_arguments_columns"]: Order_select_column_Order_aggregate_bool_exp_covar_samp_arguments_columns;
	/** select "Order_aggregate_bool_exp_max_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_max_arguments_columns"]: Order_select_column_Order_aggregate_bool_exp_max_arguments_columns;
	/** select "Order_aggregate_bool_exp_min_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_min_arguments_columns"]: Order_select_column_Order_aggregate_bool_exp_min_arguments_columns;
	/** select "Order_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_stddev_samp_arguments_columns"]: Order_select_column_Order_aggregate_bool_exp_stddev_samp_arguments_columns;
	/** select "Order_aggregate_bool_exp_sum_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_sum_arguments_columns"]: Order_select_column_Order_aggregate_bool_exp_sum_arguments_columns;
	/** select "Order_aggregate_bool_exp_var_samp_arguments_columns" columns of table "Order" */
["Order_select_column_Order_aggregate_bool_exp_var_samp_arguments_columns"]: Order_select_column_Order_aggregate_bool_exp_var_samp_arguments_columns;
	/** input type for updating data in table "Order" */
["Order_set_input"]: {
		business_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	end_date?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	offer_type?: GraphQLTypes["OfferType"] | undefined,
	price_per_unit?: GraphQLTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity_by_units?: GraphQLTypes["float8"] | undefined,
	start_date?: GraphQLTypes["timestamp"] | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["Order_stddev_fields"]: {
	__typename: "Order_stddev_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity_by_units?: number | undefined
};
	/** order by stddev() on columns of table "Order" */
["Order_stddev_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	price_per_unit?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	quantity_by_units?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["Order_stddev_pop_fields"]: {
	__typename: "Order_stddev_pop_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity_by_units?: number | undefined
};
	/** order by stddev_pop() on columns of table "Order" */
["Order_stddev_pop_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	price_per_unit?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	quantity_by_units?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["Order_stddev_samp_fields"]: {
	__typename: "Order_stddev_samp_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity_by_units?: number | undefined
};
	/** order by stddev_samp() on columns of table "Order" */
["Order_stddev_samp_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	price_per_unit?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	quantity_by_units?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "Order" */
["Order_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["Order_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["Order_stream_cursor_value_input"]: {
		business_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	end_date?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	offer_type?: GraphQLTypes["OfferType"] | undefined,
	price_per_unit?: GraphQLTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity_by_units?: GraphQLTypes["float8"] | undefined,
	start_date?: GraphQLTypes["timestamp"] | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["Order_sum_fields"]: {
	__typename: "Order_sum_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	price_per_unit?: GraphQLTypes["float8"] | undefined,
	product_id?: number | undefined,
	quantity_by_units?: GraphQLTypes["float8"] | undefined
};
	/** order by sum() on columns of table "Order" */
["Order_sum_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	price_per_unit?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	quantity_by_units?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "Order" */
["Order_update_column"]: Order_update_column;
	["Order_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["Order_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["Order_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["Order_bool_exp"]
};
	/** aggregate var_pop on columns */
["Order_var_pop_fields"]: {
	__typename: "Order_var_pop_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity_by_units?: number | undefined
};
	/** order by var_pop() on columns of table "Order" */
["Order_var_pop_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	price_per_unit?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	quantity_by_units?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["Order_var_samp_fields"]: {
	__typename: "Order_var_samp_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity_by_units?: number | undefined
};
	/** order by var_samp() on columns of table "Order" */
["Order_var_samp_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	price_per_unit?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	quantity_by_units?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["Order_variance_fields"]: {
	__typename: "Order_variance_fields",
	business_id?: number | undefined,
	id?: number | undefined,
	price_per_unit?: number | undefined,
	product_id?: number | undefined,
	quantity_by_units?: number | undefined
};
	/** order by variance() on columns of table "Order" */
["Order_variance_order_by"]: {
		business_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	price_per_unit?: GraphQLTypes["order_by"] | undefined,
	product_id?: GraphQLTypes["order_by"] | undefined,
	quantity_by_units?: GraphQLTypes["order_by"] | undefined
};
	/** columns and relationships of "Product" */
["Product"]: {
	__typename: "Product",
	/** An array relationship */
	BusinessProducts: Array<GraphQLTypes["BusinessProduct"]>,
	/** An aggregate relationship */
	BusinessProducts_aggregate: GraphQLTypes["BusinessProduct_aggregate"],
	/** An object relationship */
	Category: GraphQLTypes["Category"],
	/** An array relationship */
	Offers: Array<GraphQLTypes["Offer"]>,
	/** An aggregate relationship */
	Offers_aggregate: GraphQLTypes["Offer_aggregate"],
	/** An array relationship */
	Orders: Array<GraphQLTypes["Order"]>,
	/** An aggregate relationship */
	Orders_aggregate: GraphQLTypes["Order_aggregate"],
	category_id: number,
	created_at: GraphQLTypes["timestamp"],
	id: number,
	image_url?: string | undefined,
	measurement_unit: string,
	name: string,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregated selection of "Product" */
["Product_aggregate"]: {
	__typename: "Product_aggregate",
	aggregate?: GraphQLTypes["Product_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["Product"]>
};
	["Product_aggregate_bool_exp"]: {
		count?: GraphQLTypes["Product_aggregate_bool_exp_count"] | undefined
};
	["Product_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["Product_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Product_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "Product" */
["Product_aggregate_fields"]: {
	__typename: "Product_aggregate_fields",
	avg?: GraphQLTypes["Product_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["Product_max_fields"] | undefined,
	min?: GraphQLTypes["Product_min_fields"] | undefined,
	stddev?: GraphQLTypes["Product_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["Product_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["Product_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["Product_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["Product_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["Product_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["Product_variance_fields"] | undefined
};
	/** order by aggregate values of table "Product" */
["Product_aggregate_order_by"]: {
		avg?: GraphQLTypes["Product_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["Product_max_order_by"] | undefined,
	min?: GraphQLTypes["Product_min_order_by"] | undefined,
	stddev?: GraphQLTypes["Product_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["Product_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["Product_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["Product_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["Product_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["Product_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["Product_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "Product" */
["Product_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["Product_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["Product_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["Product_avg_fields"]: {
	__typename: "Product_avg_fields",
	category_id?: number | undefined,
	id?: number | undefined
};
	/** order by avg() on columns of table "Product" */
["Product_avg_order_by"]: {
		category_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "Product". All fields are combined with a logical 'AND'. */
["Product_bool_exp"]: {
		BusinessProducts?: GraphQLTypes["BusinessProduct_bool_exp"] | undefined,
	BusinessProducts_aggregate?: GraphQLTypes["BusinessProduct_aggregate_bool_exp"] | undefined,
	Category?: GraphQLTypes["Category_bool_exp"] | undefined,
	Offers?: GraphQLTypes["Offer_bool_exp"] | undefined,
	Offers_aggregate?: GraphQLTypes["Offer_aggregate_bool_exp"] | undefined,
	Orders?: GraphQLTypes["Order_bool_exp"] | undefined,
	Orders_aggregate?: GraphQLTypes["Order_aggregate_bool_exp"] | undefined,
	_and?: Array<GraphQLTypes["Product_bool_exp"]> | undefined,
	_not?: GraphQLTypes["Product_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["Product_bool_exp"]> | undefined,
	category_id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	created_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined,
	id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	image_url?: GraphQLTypes["String_comparison_exp"] | undefined,
	measurement_unit?: GraphQLTypes["String_comparison_exp"] | undefined,
	name?: GraphQLTypes["String_comparison_exp"] | undefined,
	updated_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "Product" */
["Product_constraint"]: Product_constraint;
	/** input type for incrementing numeric columns in table "Product" */
["Product_inc_input"]: {
		category_id?: number | undefined,
	id?: number | undefined
};
	/** input type for inserting data into table "Product" */
["Product_insert_input"]: {
		BusinessProducts?: GraphQLTypes["BusinessProduct_arr_rel_insert_input"] | undefined,
	Category?: GraphQLTypes["Category_obj_rel_insert_input"] | undefined,
	Offers?: GraphQLTypes["Offer_arr_rel_insert_input"] | undefined,
	Orders?: GraphQLTypes["Order_arr_rel_insert_input"] | undefined,
	category_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	image_url?: string | undefined,
	measurement_unit?: string | undefined,
	name?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["Product_max_fields"]: {
	__typename: "Product_max_fields",
	category_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	image_url?: string | undefined,
	measurement_unit?: string | undefined,
	name?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** order by max() on columns of table "Product" */
["Product_max_order_by"]: {
		category_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	image_url?: GraphQLTypes["order_by"] | undefined,
	measurement_unit?: GraphQLTypes["order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["Product_min_fields"]: {
	__typename: "Product_min_fields",
	category_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	image_url?: string | undefined,
	measurement_unit?: string | undefined,
	name?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** order by min() on columns of table "Product" */
["Product_min_order_by"]: {
		category_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	image_url?: GraphQLTypes["order_by"] | undefined,
	measurement_unit?: GraphQLTypes["order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "Product" */
["Product_mutation_response"]: {
	__typename: "Product_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["Product"]>
};
	/** input type for inserting object relation for remote table "Product" */
["Product_obj_rel_insert_input"]: {
		data: GraphQLTypes["Product_insert_input"],
	/** upsert condition */
	on_conflict?: GraphQLTypes["Product_on_conflict"] | undefined
};
	/** on_conflict condition type for table "Product" */
["Product_on_conflict"]: {
		constraint: GraphQLTypes["Product_constraint"],
	update_columns: Array<GraphQLTypes["Product_update_column"]>,
	where?: GraphQLTypes["Product_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "Product". */
["Product_order_by"]: {
		BusinessProducts_aggregate?: GraphQLTypes["BusinessProduct_aggregate_order_by"] | undefined,
	Category?: GraphQLTypes["Category_order_by"] | undefined,
	Offers_aggregate?: GraphQLTypes["Offer_aggregate_order_by"] | undefined,
	Orders_aggregate?: GraphQLTypes["Order_aggregate_order_by"] | undefined,
	category_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	image_url?: GraphQLTypes["order_by"] | undefined,
	measurement_unit?: GraphQLTypes["order_by"] | undefined,
	name?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: Product */
["Product_pk_columns_input"]: {
		id: number
};
	/** select columns of table "Product" */
["Product_select_column"]: Product_select_column;
	/** input type for updating data in table "Product" */
["Product_set_input"]: {
		category_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	image_url?: string | undefined,
	measurement_unit?: string | undefined,
	name?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["Product_stddev_fields"]: {
	__typename: "Product_stddev_fields",
	category_id?: number | undefined,
	id?: number | undefined
};
	/** order by stddev() on columns of table "Product" */
["Product_stddev_order_by"]: {
		category_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["Product_stddev_pop_fields"]: {
	__typename: "Product_stddev_pop_fields",
	category_id?: number | undefined,
	id?: number | undefined
};
	/** order by stddev_pop() on columns of table "Product" */
["Product_stddev_pop_order_by"]: {
		category_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["Product_stddev_samp_fields"]: {
	__typename: "Product_stddev_samp_fields",
	category_id?: number | undefined,
	id?: number | undefined
};
	/** order by stddev_samp() on columns of table "Product" */
["Product_stddev_samp_order_by"]: {
		category_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "Product" */
["Product_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["Product_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["Product_stream_cursor_value_input"]: {
		category_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	image_url?: string | undefined,
	measurement_unit?: string | undefined,
	name?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["Product_sum_fields"]: {
	__typename: "Product_sum_fields",
	category_id?: number | undefined,
	id?: number | undefined
};
	/** order by sum() on columns of table "Product" */
["Product_sum_order_by"]: {
		category_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "Product" */
["Product_update_column"]: Product_update_column;
	["Product_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["Product_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["Product_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["Product_bool_exp"]
};
	/** aggregate var_pop on columns */
["Product_var_pop_fields"]: {
	__typename: "Product_var_pop_fields",
	category_id?: number | undefined,
	id?: number | undefined
};
	/** order by var_pop() on columns of table "Product" */
["Product_var_pop_order_by"]: {
		category_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["Product_var_samp_fields"]: {
	__typename: "Product_var_samp_fields",
	category_id?: number | undefined,
	id?: number | undefined
};
	/** order by var_samp() on columns of table "Product" */
["Product_var_samp_order_by"]: {
		category_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["Product_variance_fields"]: {
	__typename: "Product_variance_fields",
	category_id?: number | undefined,
	id?: number | undefined
};
	/** order by variance() on columns of table "Product" */
["Product_variance_order_by"]: {
		category_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined
};
	/** columns and relationships of "Profile" */
["Profile"]: {
	__typename: "Profile",
	/** An array relationship */
	BusinessWorkers: Array<GraphQLTypes["BusinessWorker"]>,
	/** An aggregate relationship */
	BusinessWorkers_aggregate: GraphQLTypes["BusinessWorker_aggregate"],
	created_at: GraphQLTypes["timestamp"],
	first_name?: string | undefined,
	id: number,
	last_name?: string | undefined,
	phone?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregated selection of "Profile" */
["Profile_aggregate"]: {
	__typename: "Profile_aggregate",
	aggregate?: GraphQLTypes["Profile_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["Profile"]>
};
	/** aggregate fields of "Profile" */
["Profile_aggregate_fields"]: {
	__typename: "Profile_aggregate_fields",
	avg?: GraphQLTypes["Profile_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["Profile_max_fields"] | undefined,
	min?: GraphQLTypes["Profile_min_fields"] | undefined,
	stddev?: GraphQLTypes["Profile_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["Profile_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["Profile_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["Profile_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["Profile_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["Profile_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["Profile_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["Profile_avg_fields"]: {
	__typename: "Profile_avg_fields",
	id?: number | undefined
};
	/** Boolean expression to filter rows from the table "Profile". All fields are combined with a logical 'AND'. */
["Profile_bool_exp"]: {
		BusinessWorkers?: GraphQLTypes["BusinessWorker_bool_exp"] | undefined,
	BusinessWorkers_aggregate?: GraphQLTypes["BusinessWorker_aggregate_bool_exp"] | undefined,
	_and?: Array<GraphQLTypes["Profile_bool_exp"]> | undefined,
	_not?: GraphQLTypes["Profile_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["Profile_bool_exp"]> | undefined,
	created_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined,
	first_name?: GraphQLTypes["String_comparison_exp"] | undefined,
	id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	last_name?: GraphQLTypes["String_comparison_exp"] | undefined,
	phone?: GraphQLTypes["String_comparison_exp"] | undefined,
	updated_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "Profile" */
["Profile_constraint"]: Profile_constraint;
	/** input type for incrementing numeric columns in table "Profile" */
["Profile_inc_input"]: {
		id?: number | undefined
};
	/** input type for inserting data into table "Profile" */
["Profile_insert_input"]: {
		BusinessWorkers?: GraphQLTypes["BusinessWorker_arr_rel_insert_input"] | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	first_name?: string | undefined,
	id?: number | undefined,
	last_name?: string | undefined,
	phone?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["Profile_max_fields"]: {
	__typename: "Profile_max_fields",
	created_at?: GraphQLTypes["timestamp"] | undefined,
	first_name?: string | undefined,
	id?: number | undefined,
	last_name?: string | undefined,
	phone?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate min on columns */
["Profile_min_fields"]: {
	__typename: "Profile_min_fields",
	created_at?: GraphQLTypes["timestamp"] | undefined,
	first_name?: string | undefined,
	id?: number | undefined,
	last_name?: string | undefined,
	phone?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** response of any mutation on the table "Profile" */
["Profile_mutation_response"]: {
	__typename: "Profile_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["Profile"]>
};
	/** input type for inserting object relation for remote table "Profile" */
["Profile_obj_rel_insert_input"]: {
		data: GraphQLTypes["Profile_insert_input"],
	/** upsert condition */
	on_conflict?: GraphQLTypes["Profile_on_conflict"] | undefined
};
	/** on_conflict condition type for table "Profile" */
["Profile_on_conflict"]: {
		constraint: GraphQLTypes["Profile_constraint"],
	update_columns: Array<GraphQLTypes["Profile_update_column"]>,
	where?: GraphQLTypes["Profile_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "Profile". */
["Profile_order_by"]: {
		BusinessWorkers_aggregate?: GraphQLTypes["BusinessWorker_aggregate_order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	first_name?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	last_name?: GraphQLTypes["order_by"] | undefined,
	phone?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: Profile */
["Profile_pk_columns_input"]: {
		id: number
};
	/** select columns of table "Profile" */
["Profile_select_column"]: Profile_select_column;
	/** input type for updating data in table "Profile" */
["Profile_set_input"]: {
		created_at?: GraphQLTypes["timestamp"] | undefined,
	first_name?: string | undefined,
	id?: number | undefined,
	last_name?: string | undefined,
	phone?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["Profile_stddev_fields"]: {
	__typename: "Profile_stddev_fields",
	id?: number | undefined
};
	/** aggregate stddev_pop on columns */
["Profile_stddev_pop_fields"]: {
	__typename: "Profile_stddev_pop_fields",
	id?: number | undefined
};
	/** aggregate stddev_samp on columns */
["Profile_stddev_samp_fields"]: {
	__typename: "Profile_stddev_samp_fields",
	id?: number | undefined
};
	/** Streaming cursor of the table "Profile" */
["Profile_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["Profile_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["Profile_stream_cursor_value_input"]: {
		created_at?: GraphQLTypes["timestamp"] | undefined,
	first_name?: string | undefined,
	id?: number | undefined,
	last_name?: string | undefined,
	phone?: string | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["Profile_sum_fields"]: {
	__typename: "Profile_sum_fields",
	id?: number | undefined
};
	/** update columns of table "Profile" */
["Profile_update_column"]: Profile_update_column;
	["Profile_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["Profile_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["Profile_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["Profile_bool_exp"]
};
	/** aggregate var_pop on columns */
["Profile_var_pop_fields"]: {
	__typename: "Profile_var_pop_fields",
	id?: number | undefined
};
	/** aggregate var_samp on columns */
["Profile_var_samp_fields"]: {
	__typename: "Profile_var_samp_fields",
	id?: number | undefined
};
	/** aggregate variance on columns */
["Profile_variance_fields"]: {
	__typename: "Profile_variance_fields",
	id?: number | undefined
};
	/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
["String_comparison_exp"]: {
		_eq?: string | undefined,
	_gt?: string | undefined,
	_gte?: string | undefined,
	/** does the column match the given case-insensitive pattern */
	_ilike?: string | undefined,
	_in?: Array<string> | undefined,
	/** does the column match the given POSIX regular expression, case insensitive */
	_iregex?: string | undefined,
	_is_null?: boolean | undefined,
	/** does the column match the given pattern */
	_like?: string | undefined,
	_lt?: string | undefined,
	_lte?: string | undefined,
	_neq?: string | undefined,
	/** does the column NOT match the given case-insensitive pattern */
	_nilike?: string | undefined,
	_nin?: Array<string> | undefined,
	/** does the column NOT match the given POSIX regular expression, case insensitive */
	_niregex?: string | undefined,
	/** does the column NOT match the given pattern */
	_nlike?: string | undefined,
	/** does the column NOT match the given POSIX regular expression, case sensitive */
	_nregex?: string | undefined,
	/** does the column NOT match the given SQL regular expression */
	_nsimilar?: string | undefined,
	/** does the column match the given POSIX regular expression, case sensitive */
	_regex?: string | undefined,
	/** does the column match the given SQL regular expression */
	_similar?: string | undefined
};
	/** columns and relationships of "Transaction" */
["Transaction"]: {
	__typename: "Transaction",
	/** An object relationship */
	Order: GraphQLTypes["Order"],
	/** An array relationship */
	TransactionReviews: Array<GraphQLTypes["TransactionReview"]>,
	/** An aggregate relationship */
	TransactionReviews_aggregate: GraphQLTypes["TransactionReview_aggregate"],
	buy_order_id: number,
	created_at: GraphQLTypes["timestamp"],
	id: number,
	/** An object relationship */
	orderBySellOrderId: GraphQLTypes["Order"],
	profile_id: number,
	sell_order_id: number,
	status: GraphQLTypes["TransactionStatus"],
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** columns and relationships of "TransactionReview" */
["TransactionReview"]: {
	__typename: "TransactionReview",
	/** An object relationship */
	Transaction: GraphQLTypes["Transaction"],
	comment: string,
	created_at: GraphQLTypes["timestamp"],
	id: number,
	rating: number,
	transaction_id: number,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregated selection of "TransactionReview" */
["TransactionReview_aggregate"]: {
	__typename: "TransactionReview_aggregate",
	aggregate?: GraphQLTypes["TransactionReview_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["TransactionReview"]>
};
	["TransactionReview_aggregate_bool_exp"]: {
		count?: GraphQLTypes["TransactionReview_aggregate_bool_exp_count"] | undefined
};
	["TransactionReview_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["TransactionReview_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["TransactionReview_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "TransactionReview" */
["TransactionReview_aggregate_fields"]: {
	__typename: "TransactionReview_aggregate_fields",
	avg?: GraphQLTypes["TransactionReview_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["TransactionReview_max_fields"] | undefined,
	min?: GraphQLTypes["TransactionReview_min_fields"] | undefined,
	stddev?: GraphQLTypes["TransactionReview_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["TransactionReview_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["TransactionReview_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["TransactionReview_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["TransactionReview_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["TransactionReview_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["TransactionReview_variance_fields"] | undefined
};
	/** order by aggregate values of table "TransactionReview" */
["TransactionReview_aggregate_order_by"]: {
		avg?: GraphQLTypes["TransactionReview_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["TransactionReview_max_order_by"] | undefined,
	min?: GraphQLTypes["TransactionReview_min_order_by"] | undefined,
	stddev?: GraphQLTypes["TransactionReview_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["TransactionReview_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["TransactionReview_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["TransactionReview_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["TransactionReview_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["TransactionReview_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["TransactionReview_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "TransactionReview" */
["TransactionReview_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["TransactionReview_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["TransactionReview_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["TransactionReview_avg_fields"]: {
	__typename: "TransactionReview_avg_fields",
	id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined
};
	/** order by avg() on columns of table "TransactionReview" */
["TransactionReview_avg_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	rating?: GraphQLTypes["order_by"] | undefined,
	transaction_id?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "TransactionReview". All fields are combined with a logical 'AND'. */
["TransactionReview_bool_exp"]: {
		Transaction?: GraphQLTypes["Transaction_bool_exp"] | undefined,
	_and?: Array<GraphQLTypes["TransactionReview_bool_exp"]> | undefined,
	_not?: GraphQLTypes["TransactionReview_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["TransactionReview_bool_exp"]> | undefined,
	comment?: GraphQLTypes["String_comparison_exp"] | undefined,
	created_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined,
	id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	rating?: GraphQLTypes["Int_comparison_exp"] | undefined,
	transaction_id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	updated_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "TransactionReview" */
["TransactionReview_constraint"]: TransactionReview_constraint;
	/** input type for incrementing numeric columns in table "TransactionReview" */
["TransactionReview_inc_input"]: {
		id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined
};
	/** input type for inserting data into table "TransactionReview" */
["TransactionReview_insert_input"]: {
		Transaction?: GraphQLTypes["Transaction_obj_rel_insert_input"] | undefined,
	comment?: string | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["TransactionReview_max_fields"]: {
	__typename: "TransactionReview_max_fields",
	comment?: string | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** order by max() on columns of table "TransactionReview" */
["TransactionReview_max_order_by"]: {
		comment?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	rating?: GraphQLTypes["order_by"] | undefined,
	transaction_id?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["TransactionReview_min_fields"]: {
	__typename: "TransactionReview_min_fields",
	comment?: string | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** order by min() on columns of table "TransactionReview" */
["TransactionReview_min_order_by"]: {
		comment?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	rating?: GraphQLTypes["order_by"] | undefined,
	transaction_id?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "TransactionReview" */
["TransactionReview_mutation_response"]: {
	__typename: "TransactionReview_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["TransactionReview"]>
};
	/** on_conflict condition type for table "TransactionReview" */
["TransactionReview_on_conflict"]: {
		constraint: GraphQLTypes["TransactionReview_constraint"],
	update_columns: Array<GraphQLTypes["TransactionReview_update_column"]>,
	where?: GraphQLTypes["TransactionReview_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "TransactionReview". */
["TransactionReview_order_by"]: {
		Transaction?: GraphQLTypes["Transaction_order_by"] | undefined,
	comment?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	rating?: GraphQLTypes["order_by"] | undefined,
	transaction_id?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: TransactionReview */
["TransactionReview_pk_columns_input"]: {
		id: number
};
	/** select columns of table "TransactionReview" */
["TransactionReview_select_column"]: TransactionReview_select_column;
	/** input type for updating data in table "TransactionReview" */
["TransactionReview_set_input"]: {
		comment?: string | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["TransactionReview_stddev_fields"]: {
	__typename: "TransactionReview_stddev_fields",
	id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined
};
	/** order by stddev() on columns of table "TransactionReview" */
["TransactionReview_stddev_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	rating?: GraphQLTypes["order_by"] | undefined,
	transaction_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["TransactionReview_stddev_pop_fields"]: {
	__typename: "TransactionReview_stddev_pop_fields",
	id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "TransactionReview" */
["TransactionReview_stddev_pop_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	rating?: GraphQLTypes["order_by"] | undefined,
	transaction_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["TransactionReview_stddev_samp_fields"]: {
	__typename: "TransactionReview_stddev_samp_fields",
	id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "TransactionReview" */
["TransactionReview_stddev_samp_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	rating?: GraphQLTypes["order_by"] | undefined,
	transaction_id?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "TransactionReview" */
["TransactionReview_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["TransactionReview_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["TransactionReview_stream_cursor_value_input"]: {
		comment?: string | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["TransactionReview_sum_fields"]: {
	__typename: "TransactionReview_sum_fields",
	id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined
};
	/** order by sum() on columns of table "TransactionReview" */
["TransactionReview_sum_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	rating?: GraphQLTypes["order_by"] | undefined,
	transaction_id?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "TransactionReview" */
["TransactionReview_update_column"]: TransactionReview_update_column;
	["TransactionReview_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["TransactionReview_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["TransactionReview_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["TransactionReview_bool_exp"]
};
	/** aggregate var_pop on columns */
["TransactionReview_var_pop_fields"]: {
	__typename: "TransactionReview_var_pop_fields",
	id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined
};
	/** order by var_pop() on columns of table "TransactionReview" */
["TransactionReview_var_pop_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	rating?: GraphQLTypes["order_by"] | undefined,
	transaction_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["TransactionReview_var_samp_fields"]: {
	__typename: "TransactionReview_var_samp_fields",
	id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined
};
	/** order by var_samp() on columns of table "TransactionReview" */
["TransactionReview_var_samp_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	rating?: GraphQLTypes["order_by"] | undefined,
	transaction_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["TransactionReview_variance_fields"]: {
	__typename: "TransactionReview_variance_fields",
	id?: number | undefined,
	rating?: number | undefined,
	transaction_id?: number | undefined
};
	/** order by variance() on columns of table "TransactionReview" */
["TransactionReview_variance_order_by"]: {
		id?: GraphQLTypes["order_by"] | undefined,
	rating?: GraphQLTypes["order_by"] | undefined,
	transaction_id?: GraphQLTypes["order_by"] | undefined
};
	["TransactionStatus"]: "scalar" & { name: "TransactionStatus" };
	/** Boolean expression to compare columns of type "TransactionStatus". All fields are combined with logical 'AND'. */
["TransactionStatus_comparison_exp"]: {
		_eq?: GraphQLTypes["TransactionStatus"] | undefined,
	_gt?: GraphQLTypes["TransactionStatus"] | undefined,
	_gte?: GraphQLTypes["TransactionStatus"] | undefined,
	_in?: Array<GraphQLTypes["TransactionStatus"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: GraphQLTypes["TransactionStatus"] | undefined,
	_lte?: GraphQLTypes["TransactionStatus"] | undefined,
	_neq?: GraphQLTypes["TransactionStatus"] | undefined,
	_nin?: Array<GraphQLTypes["TransactionStatus"]> | undefined
};
	/** aggregated selection of "Transaction" */
["Transaction_aggregate"]: {
	__typename: "Transaction_aggregate",
	aggregate?: GraphQLTypes["Transaction_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["Transaction"]>
};
	["Transaction_aggregate_bool_exp"]: {
		count?: GraphQLTypes["Transaction_aggregate_bool_exp_count"] | undefined
};
	["Transaction_aggregate_bool_exp_count"]: {
		arguments?: Array<GraphQLTypes["Transaction_select_column"]> | undefined,
	distinct?: boolean | undefined,
	filter?: GraphQLTypes["Transaction_bool_exp"] | undefined,
	predicate: GraphQLTypes["Int_comparison_exp"]
};
	/** aggregate fields of "Transaction" */
["Transaction_aggregate_fields"]: {
	__typename: "Transaction_aggregate_fields",
	avg?: GraphQLTypes["Transaction_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["Transaction_max_fields"] | undefined,
	min?: GraphQLTypes["Transaction_min_fields"] | undefined,
	stddev?: GraphQLTypes["Transaction_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["Transaction_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["Transaction_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["Transaction_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["Transaction_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["Transaction_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["Transaction_variance_fields"] | undefined
};
	/** order by aggregate values of table "Transaction" */
["Transaction_aggregate_order_by"]: {
		avg?: GraphQLTypes["Transaction_avg_order_by"] | undefined,
	count?: GraphQLTypes["order_by"] | undefined,
	max?: GraphQLTypes["Transaction_max_order_by"] | undefined,
	min?: GraphQLTypes["Transaction_min_order_by"] | undefined,
	stddev?: GraphQLTypes["Transaction_stddev_order_by"] | undefined,
	stddev_pop?: GraphQLTypes["Transaction_stddev_pop_order_by"] | undefined,
	stddev_samp?: GraphQLTypes["Transaction_stddev_samp_order_by"] | undefined,
	sum?: GraphQLTypes["Transaction_sum_order_by"] | undefined,
	var_pop?: GraphQLTypes["Transaction_var_pop_order_by"] | undefined,
	var_samp?: GraphQLTypes["Transaction_var_samp_order_by"] | undefined,
	variance?: GraphQLTypes["Transaction_variance_order_by"] | undefined
};
	/** input type for inserting array relation for remote table "Transaction" */
["Transaction_arr_rel_insert_input"]: {
		data: Array<GraphQLTypes["Transaction_insert_input"]>,
	/** upsert condition */
	on_conflict?: GraphQLTypes["Transaction_on_conflict"] | undefined
};
	/** aggregate avg on columns */
["Transaction_avg_fields"]: {
	__typename: "Transaction_avg_fields",
	buy_order_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined
};
	/** order by avg() on columns of table "Transaction" */
["Transaction_avg_order_by"]: {
		buy_order_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	profile_id?: GraphQLTypes["order_by"] | undefined,
	sell_order_id?: GraphQLTypes["order_by"] | undefined
};
	/** Boolean expression to filter rows from the table "Transaction". All fields are combined with a logical 'AND'. */
["Transaction_bool_exp"]: {
		Order?: GraphQLTypes["Order_bool_exp"] | undefined,
	TransactionReviews?: GraphQLTypes["TransactionReview_bool_exp"] | undefined,
	TransactionReviews_aggregate?: GraphQLTypes["TransactionReview_aggregate_bool_exp"] | undefined,
	_and?: Array<GraphQLTypes["Transaction_bool_exp"]> | undefined,
	_not?: GraphQLTypes["Transaction_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["Transaction_bool_exp"]> | undefined,
	buy_order_id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	created_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined,
	id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	orderBySellOrderId?: GraphQLTypes["Order_bool_exp"] | undefined,
	profile_id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	sell_order_id?: GraphQLTypes["Int_comparison_exp"] | undefined,
	status?: GraphQLTypes["TransactionStatus_comparison_exp"] | undefined,
	updated_at?: GraphQLTypes["timestamp_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "Transaction" */
["Transaction_constraint"]: Transaction_constraint;
	/** input type for incrementing numeric columns in table "Transaction" */
["Transaction_inc_input"]: {
		buy_order_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined
};
	/** input type for inserting data into table "Transaction" */
["Transaction_insert_input"]: {
		Order?: GraphQLTypes["Order_obj_rel_insert_input"] | undefined,
	TransactionReviews?: GraphQLTypes["TransactionReview_arr_rel_insert_input"] | undefined,
	buy_order_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	orderBySellOrderId?: GraphQLTypes["Order_obj_rel_insert_input"] | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined,
	status?: GraphQLTypes["TransactionStatus"] | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate max on columns */
["Transaction_max_fields"]: {
	__typename: "Transaction_max_fields",
	buy_order_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined,
	status?: GraphQLTypes["TransactionStatus"] | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** order by max() on columns of table "Transaction" */
["Transaction_max_order_by"]: {
		buy_order_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	profile_id?: GraphQLTypes["order_by"] | undefined,
	sell_order_id?: GraphQLTypes["order_by"] | undefined,
	status?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate min on columns */
["Transaction_min_fields"]: {
	__typename: "Transaction_min_fields",
	buy_order_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined,
	status?: GraphQLTypes["TransactionStatus"] | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** order by min() on columns of table "Transaction" */
["Transaction_min_order_by"]: {
		buy_order_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	profile_id?: GraphQLTypes["order_by"] | undefined,
	sell_order_id?: GraphQLTypes["order_by"] | undefined,
	status?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** response of any mutation on the table "Transaction" */
["Transaction_mutation_response"]: {
	__typename: "Transaction_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["Transaction"]>
};
	/** input type for inserting object relation for remote table "Transaction" */
["Transaction_obj_rel_insert_input"]: {
		data: GraphQLTypes["Transaction_insert_input"],
	/** upsert condition */
	on_conflict?: GraphQLTypes["Transaction_on_conflict"] | undefined
};
	/** on_conflict condition type for table "Transaction" */
["Transaction_on_conflict"]: {
		constraint: GraphQLTypes["Transaction_constraint"],
	update_columns: Array<GraphQLTypes["Transaction_update_column"]>,
	where?: GraphQLTypes["Transaction_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "Transaction". */
["Transaction_order_by"]: {
		Order?: GraphQLTypes["Order_order_by"] | undefined,
	TransactionReviews_aggregate?: GraphQLTypes["TransactionReview_aggregate_order_by"] | undefined,
	buy_order_id?: GraphQLTypes["order_by"] | undefined,
	created_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	orderBySellOrderId?: GraphQLTypes["Order_order_by"] | undefined,
	profile_id?: GraphQLTypes["order_by"] | undefined,
	sell_order_id?: GraphQLTypes["order_by"] | undefined,
	status?: GraphQLTypes["order_by"] | undefined,
	updated_at?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: Transaction */
["Transaction_pk_columns_input"]: {
		id: number
};
	/** select columns of table "Transaction" */
["Transaction_select_column"]: Transaction_select_column;
	/** input type for updating data in table "Transaction" */
["Transaction_set_input"]: {
		buy_order_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined,
	status?: GraphQLTypes["TransactionStatus"] | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate stddev on columns */
["Transaction_stddev_fields"]: {
	__typename: "Transaction_stddev_fields",
	buy_order_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined
};
	/** order by stddev() on columns of table "Transaction" */
["Transaction_stddev_order_by"]: {
		buy_order_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	profile_id?: GraphQLTypes["order_by"] | undefined,
	sell_order_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_pop on columns */
["Transaction_stddev_pop_fields"]: {
	__typename: "Transaction_stddev_pop_fields",
	buy_order_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined
};
	/** order by stddev_pop() on columns of table "Transaction" */
["Transaction_stddev_pop_order_by"]: {
		buy_order_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	profile_id?: GraphQLTypes["order_by"] | undefined,
	sell_order_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate stddev_samp on columns */
["Transaction_stddev_samp_fields"]: {
	__typename: "Transaction_stddev_samp_fields",
	buy_order_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined
};
	/** order by stddev_samp() on columns of table "Transaction" */
["Transaction_stddev_samp_order_by"]: {
		buy_order_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	profile_id?: GraphQLTypes["order_by"] | undefined,
	sell_order_id?: GraphQLTypes["order_by"] | undefined
};
	/** Streaming cursor of the table "Transaction" */
["Transaction_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["Transaction_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["Transaction_stream_cursor_value_input"]: {
		buy_order_id?: number | undefined,
	created_at?: GraphQLTypes["timestamp"] | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined,
	status?: GraphQLTypes["TransactionStatus"] | undefined,
	updated_at?: GraphQLTypes["timestamp"] | undefined
};
	/** aggregate sum on columns */
["Transaction_sum_fields"]: {
	__typename: "Transaction_sum_fields",
	buy_order_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined
};
	/** order by sum() on columns of table "Transaction" */
["Transaction_sum_order_by"]: {
		buy_order_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	profile_id?: GraphQLTypes["order_by"] | undefined,
	sell_order_id?: GraphQLTypes["order_by"] | undefined
};
	/** update columns of table "Transaction" */
["Transaction_update_column"]: Transaction_update_column;
	["Transaction_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["Transaction_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["Transaction_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["Transaction_bool_exp"]
};
	/** aggregate var_pop on columns */
["Transaction_var_pop_fields"]: {
	__typename: "Transaction_var_pop_fields",
	buy_order_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined
};
	/** order by var_pop() on columns of table "Transaction" */
["Transaction_var_pop_order_by"]: {
		buy_order_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	profile_id?: GraphQLTypes["order_by"] | undefined,
	sell_order_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate var_samp on columns */
["Transaction_var_samp_fields"]: {
	__typename: "Transaction_var_samp_fields",
	buy_order_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined
};
	/** order by var_samp() on columns of table "Transaction" */
["Transaction_var_samp_order_by"]: {
		buy_order_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	profile_id?: GraphQLTypes["order_by"] | undefined,
	sell_order_id?: GraphQLTypes["order_by"] | undefined
};
	/** aggregate variance on columns */
["Transaction_variance_fields"]: {
	__typename: "Transaction_variance_fields",
	buy_order_id?: number | undefined,
	id?: number | undefined,
	profile_id?: number | undefined,
	sell_order_id?: number | undefined
};
	/** order by variance() on columns of table "Transaction" */
["Transaction_variance_order_by"]: {
		buy_order_id?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	profile_id?: GraphQLTypes["order_by"] | undefined,
	sell_order_id?: GraphQLTypes["order_by"] | undefined
};
	/** columns and relationships of "_prisma_migrations" */
["_prisma_migrations"]: {
	__typename: "_prisma_migrations",
	applied_steps_count: number,
	checksum: string,
	finished_at?: GraphQLTypes["timestamptz"] | undefined,
	id: string,
	logs?: string | undefined,
	migration_name: string,
	rolled_back_at?: GraphQLTypes["timestamptz"] | undefined,
	started_at: GraphQLTypes["timestamptz"]
};
	/** aggregated selection of "_prisma_migrations" */
["_prisma_migrations_aggregate"]: {
	__typename: "_prisma_migrations_aggregate",
	aggregate?: GraphQLTypes["_prisma_migrations_aggregate_fields"] | undefined,
	nodes: Array<GraphQLTypes["_prisma_migrations"]>
};
	/** aggregate fields of "_prisma_migrations" */
["_prisma_migrations_aggregate_fields"]: {
	__typename: "_prisma_migrations_aggregate_fields",
	avg?: GraphQLTypes["_prisma_migrations_avg_fields"] | undefined,
	count: number,
	max?: GraphQLTypes["_prisma_migrations_max_fields"] | undefined,
	min?: GraphQLTypes["_prisma_migrations_min_fields"] | undefined,
	stddev?: GraphQLTypes["_prisma_migrations_stddev_fields"] | undefined,
	stddev_pop?: GraphQLTypes["_prisma_migrations_stddev_pop_fields"] | undefined,
	stddev_samp?: GraphQLTypes["_prisma_migrations_stddev_samp_fields"] | undefined,
	sum?: GraphQLTypes["_prisma_migrations_sum_fields"] | undefined,
	var_pop?: GraphQLTypes["_prisma_migrations_var_pop_fields"] | undefined,
	var_samp?: GraphQLTypes["_prisma_migrations_var_samp_fields"] | undefined,
	variance?: GraphQLTypes["_prisma_migrations_variance_fields"] | undefined
};
	/** aggregate avg on columns */
["_prisma_migrations_avg_fields"]: {
	__typename: "_prisma_migrations_avg_fields",
	applied_steps_count?: number | undefined
};
	/** Boolean expression to filter rows from the table "_prisma_migrations". All fields are combined with a logical 'AND'. */
["_prisma_migrations_bool_exp"]: {
		_and?: Array<GraphQLTypes["_prisma_migrations_bool_exp"]> | undefined,
	_not?: GraphQLTypes["_prisma_migrations_bool_exp"] | undefined,
	_or?: Array<GraphQLTypes["_prisma_migrations_bool_exp"]> | undefined,
	applied_steps_count?: GraphQLTypes["Int_comparison_exp"] | undefined,
	checksum?: GraphQLTypes["String_comparison_exp"] | undefined,
	finished_at?: GraphQLTypes["timestamptz_comparison_exp"] | undefined,
	id?: GraphQLTypes["String_comparison_exp"] | undefined,
	logs?: GraphQLTypes["String_comparison_exp"] | undefined,
	migration_name?: GraphQLTypes["String_comparison_exp"] | undefined,
	rolled_back_at?: GraphQLTypes["timestamptz_comparison_exp"] | undefined,
	started_at?: GraphQLTypes["timestamptz_comparison_exp"] | undefined
};
	/** unique or primary key constraints on table "_prisma_migrations" */
["_prisma_migrations_constraint"]: _prisma_migrations_constraint;
	/** input type for incrementing numeric columns in table "_prisma_migrations" */
["_prisma_migrations_inc_input"]: {
		applied_steps_count?: number | undefined
};
	/** input type for inserting data into table "_prisma_migrations" */
["_prisma_migrations_insert_input"]: {
		applied_steps_count?: number | undefined,
	checksum?: string | undefined,
	finished_at?: GraphQLTypes["timestamptz"] | undefined,
	id?: string | undefined,
	logs?: string | undefined,
	migration_name?: string | undefined,
	rolled_back_at?: GraphQLTypes["timestamptz"] | undefined,
	started_at?: GraphQLTypes["timestamptz"] | undefined
};
	/** aggregate max on columns */
["_prisma_migrations_max_fields"]: {
	__typename: "_prisma_migrations_max_fields",
	applied_steps_count?: number | undefined,
	checksum?: string | undefined,
	finished_at?: GraphQLTypes["timestamptz"] | undefined,
	id?: string | undefined,
	logs?: string | undefined,
	migration_name?: string | undefined,
	rolled_back_at?: GraphQLTypes["timestamptz"] | undefined,
	started_at?: GraphQLTypes["timestamptz"] | undefined
};
	/** aggregate min on columns */
["_prisma_migrations_min_fields"]: {
	__typename: "_prisma_migrations_min_fields",
	applied_steps_count?: number | undefined,
	checksum?: string | undefined,
	finished_at?: GraphQLTypes["timestamptz"] | undefined,
	id?: string | undefined,
	logs?: string | undefined,
	migration_name?: string | undefined,
	rolled_back_at?: GraphQLTypes["timestamptz"] | undefined,
	started_at?: GraphQLTypes["timestamptz"] | undefined
};
	/** response of any mutation on the table "_prisma_migrations" */
["_prisma_migrations_mutation_response"]: {
	__typename: "_prisma_migrations_mutation_response",
	/** number of rows affected by the mutation */
	affected_rows: number,
	/** data from the rows affected by the mutation */
	returning: Array<GraphQLTypes["_prisma_migrations"]>
};
	/** on_conflict condition type for table "_prisma_migrations" */
["_prisma_migrations_on_conflict"]: {
		constraint: GraphQLTypes["_prisma_migrations_constraint"],
	update_columns: Array<GraphQLTypes["_prisma_migrations_update_column"]>,
	where?: GraphQLTypes["_prisma_migrations_bool_exp"] | undefined
};
	/** Ordering options when selecting data from "_prisma_migrations". */
["_prisma_migrations_order_by"]: {
		applied_steps_count?: GraphQLTypes["order_by"] | undefined,
	checksum?: GraphQLTypes["order_by"] | undefined,
	finished_at?: GraphQLTypes["order_by"] | undefined,
	id?: GraphQLTypes["order_by"] | undefined,
	logs?: GraphQLTypes["order_by"] | undefined,
	migration_name?: GraphQLTypes["order_by"] | undefined,
	rolled_back_at?: GraphQLTypes["order_by"] | undefined,
	started_at?: GraphQLTypes["order_by"] | undefined
};
	/** primary key columns input for table: _prisma_migrations */
["_prisma_migrations_pk_columns_input"]: {
		id: string
};
	/** select columns of table "_prisma_migrations" */
["_prisma_migrations_select_column"]: _prisma_migrations_select_column;
	/** input type for updating data in table "_prisma_migrations" */
["_prisma_migrations_set_input"]: {
		applied_steps_count?: number | undefined,
	checksum?: string | undefined,
	finished_at?: GraphQLTypes["timestamptz"] | undefined,
	id?: string | undefined,
	logs?: string | undefined,
	migration_name?: string | undefined,
	rolled_back_at?: GraphQLTypes["timestamptz"] | undefined,
	started_at?: GraphQLTypes["timestamptz"] | undefined
};
	/** aggregate stddev on columns */
["_prisma_migrations_stddev_fields"]: {
	__typename: "_prisma_migrations_stddev_fields",
	applied_steps_count?: number | undefined
};
	/** aggregate stddev_pop on columns */
["_prisma_migrations_stddev_pop_fields"]: {
	__typename: "_prisma_migrations_stddev_pop_fields",
	applied_steps_count?: number | undefined
};
	/** aggregate stddev_samp on columns */
["_prisma_migrations_stddev_samp_fields"]: {
	__typename: "_prisma_migrations_stddev_samp_fields",
	applied_steps_count?: number | undefined
};
	/** Streaming cursor of the table "_prisma_migrations" */
["_prisma_migrations_stream_cursor_input"]: {
		/** Stream column input with initial value */
	initial_value: GraphQLTypes["_prisma_migrations_stream_cursor_value_input"],
	/** cursor ordering */
	ordering?: GraphQLTypes["cursor_ordering"] | undefined
};
	/** Initial value of the column from where the streaming should start */
["_prisma_migrations_stream_cursor_value_input"]: {
		applied_steps_count?: number | undefined,
	checksum?: string | undefined,
	finished_at?: GraphQLTypes["timestamptz"] | undefined,
	id?: string | undefined,
	logs?: string | undefined,
	migration_name?: string | undefined,
	rolled_back_at?: GraphQLTypes["timestamptz"] | undefined,
	started_at?: GraphQLTypes["timestamptz"] | undefined
};
	/** aggregate sum on columns */
["_prisma_migrations_sum_fields"]: {
	__typename: "_prisma_migrations_sum_fields",
	applied_steps_count?: number | undefined
};
	/** update columns of table "_prisma_migrations" */
["_prisma_migrations_update_column"]: _prisma_migrations_update_column;
	["_prisma_migrations_updates"]: {
		/** increments the numeric columns with given value of the filtered values */
	_inc?: GraphQLTypes["_prisma_migrations_inc_input"] | undefined,
	/** sets the columns of the filtered rows to the given values */
	_set?: GraphQLTypes["_prisma_migrations_set_input"] | undefined,
	/** filter the rows which have to be updated */
	where: GraphQLTypes["_prisma_migrations_bool_exp"]
};
	/** aggregate var_pop on columns */
["_prisma_migrations_var_pop_fields"]: {
	__typename: "_prisma_migrations_var_pop_fields",
	applied_steps_count?: number | undefined
};
	/** aggregate var_samp on columns */
["_prisma_migrations_var_samp_fields"]: {
	__typename: "_prisma_migrations_var_samp_fields",
	applied_steps_count?: number | undefined
};
	/** aggregate variance on columns */
["_prisma_migrations_variance_fields"]: {
	__typename: "_prisma_migrations_variance_fields",
	applied_steps_count?: number | undefined
};
	/** ordering argument of a cursor */
["cursor_ordering"]: cursor_ordering;
	["float8"]: "scalar" & { name: "float8" };
	/** Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'. */
["float8_comparison_exp"]: {
		_eq?: GraphQLTypes["float8"] | undefined,
	_gt?: GraphQLTypes["float8"] | undefined,
	_gte?: GraphQLTypes["float8"] | undefined,
	_in?: Array<GraphQLTypes["float8"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: GraphQLTypes["float8"] | undefined,
	_lte?: GraphQLTypes["float8"] | undefined,
	_neq?: GraphQLTypes["float8"] | undefined,
	_nin?: Array<GraphQLTypes["float8"]> | undefined
};
	/** mutation root */
["mutation_root"]: {
	__typename: "mutation_root",
	/** delete data from the table: "Business" */
	delete_Business?: GraphQLTypes["Business_mutation_response"] | undefined,
	/** delete data from the table: "BusinessProduct" */
	delete_BusinessProduct?: GraphQLTypes["BusinessProduct_mutation_response"] | undefined,
	/** delete single row from the table: "BusinessProduct" */
	delete_BusinessProduct_by_pk?: GraphQLTypes["BusinessProduct"] | undefined,
	/** delete data from the table: "BusinessWorker" */
	delete_BusinessWorker?: GraphQLTypes["BusinessWorker_mutation_response"] | undefined,
	/** delete single row from the table: "BusinessWorker" */
	delete_BusinessWorker_by_pk?: GraphQLTypes["BusinessWorker"] | undefined,
	/** delete single row from the table: "Business" */
	delete_Business_by_pk?: GraphQLTypes["Business"] | undefined,
	/** delete data from the table: "Category" */
	delete_Category?: GraphQLTypes["Category_mutation_response"] | undefined,
	/** delete single row from the table: "Category" */
	delete_Category_by_pk?: GraphQLTypes["Category"] | undefined,
	/** delete data from the table: "Certificate" */
	delete_Certificate?: GraphQLTypes["Certificate_mutation_response"] | undefined,
	/** delete data from the table: "CertificateCategory" */
	delete_CertificateCategory?: GraphQLTypes["CertificateCategory_mutation_response"] | undefined,
	/** delete single row from the table: "CertificateCategory" */
	delete_CertificateCategory_by_pk?: GraphQLTypes["CertificateCategory"] | undefined,
	/** delete data from the table: "CertificateClaim" */
	delete_CertificateClaim?: GraphQLTypes["CertificateClaim_mutation_response"] | undefined,
	/** delete single row from the table: "CertificateClaim" */
	delete_CertificateClaim_by_pk?: GraphQLTypes["CertificateClaim"] | undefined,
	/** delete single row from the table: "Certificate" */
	delete_Certificate_by_pk?: GraphQLTypes["Certificate"] | undefined,
	/** delete data from the table: "Offer" */
	delete_Offer?: GraphQLTypes["Offer_mutation_response"] | undefined,
	/** delete single row from the table: "Offer" */
	delete_Offer_by_pk?: GraphQLTypes["Offer"] | undefined,
	/** delete data from the table: "Order" */
	delete_Order?: GraphQLTypes["Order_mutation_response"] | undefined,
	/** delete single row from the table: "Order" */
	delete_Order_by_pk?: GraphQLTypes["Order"] | undefined,
	/** delete data from the table: "Product" */
	delete_Product?: GraphQLTypes["Product_mutation_response"] | undefined,
	/** delete single row from the table: "Product" */
	delete_Product_by_pk?: GraphQLTypes["Product"] | undefined,
	/** delete data from the table: "Profile" */
	delete_Profile?: GraphQLTypes["Profile_mutation_response"] | undefined,
	/** delete single row from the table: "Profile" */
	delete_Profile_by_pk?: GraphQLTypes["Profile"] | undefined,
	/** delete data from the table: "Transaction" */
	delete_Transaction?: GraphQLTypes["Transaction_mutation_response"] | undefined,
	/** delete data from the table: "TransactionReview" */
	delete_TransactionReview?: GraphQLTypes["TransactionReview_mutation_response"] | undefined,
	/** delete single row from the table: "TransactionReview" */
	delete_TransactionReview_by_pk?: GraphQLTypes["TransactionReview"] | undefined,
	/** delete single row from the table: "Transaction" */
	delete_Transaction_by_pk?: GraphQLTypes["Transaction"] | undefined,
	/** delete data from the table: "_prisma_migrations" */
	delete__prisma_migrations?: GraphQLTypes["_prisma_migrations_mutation_response"] | undefined,
	/** delete single row from the table: "_prisma_migrations" */
	delete__prisma_migrations_by_pk?: GraphQLTypes["_prisma_migrations"] | undefined,
	/** insert data into the table: "Business" */
	insert_Business?: GraphQLTypes["Business_mutation_response"] | undefined,
	/** insert data into the table: "BusinessProduct" */
	insert_BusinessProduct?: GraphQLTypes["BusinessProduct_mutation_response"] | undefined,
	/** insert a single row into the table: "BusinessProduct" */
	insert_BusinessProduct_one?: GraphQLTypes["BusinessProduct"] | undefined,
	/** insert data into the table: "BusinessWorker" */
	insert_BusinessWorker?: GraphQLTypes["BusinessWorker_mutation_response"] | undefined,
	/** insert a single row into the table: "BusinessWorker" */
	insert_BusinessWorker_one?: GraphQLTypes["BusinessWorker"] | undefined,
	/** insert a single row into the table: "Business" */
	insert_Business_one?: GraphQLTypes["Business"] | undefined,
	/** insert data into the table: "Category" */
	insert_Category?: GraphQLTypes["Category_mutation_response"] | undefined,
	/** insert a single row into the table: "Category" */
	insert_Category_one?: GraphQLTypes["Category"] | undefined,
	/** insert data into the table: "Certificate" */
	insert_Certificate?: GraphQLTypes["Certificate_mutation_response"] | undefined,
	/** insert data into the table: "CertificateCategory" */
	insert_CertificateCategory?: GraphQLTypes["CertificateCategory_mutation_response"] | undefined,
	/** insert a single row into the table: "CertificateCategory" */
	insert_CertificateCategory_one?: GraphQLTypes["CertificateCategory"] | undefined,
	/** insert data into the table: "CertificateClaim" */
	insert_CertificateClaim?: GraphQLTypes["CertificateClaim_mutation_response"] | undefined,
	/** insert a single row into the table: "CertificateClaim" */
	insert_CertificateClaim_one?: GraphQLTypes["CertificateClaim"] | undefined,
	/** insert a single row into the table: "Certificate" */
	insert_Certificate_one?: GraphQLTypes["Certificate"] | undefined,
	/** insert data into the table: "Offer" */
	insert_Offer?: GraphQLTypes["Offer_mutation_response"] | undefined,
	/** insert a single row into the table: "Offer" */
	insert_Offer_one?: GraphQLTypes["Offer"] | undefined,
	/** insert data into the table: "Order" */
	insert_Order?: GraphQLTypes["Order_mutation_response"] | undefined,
	/** insert a single row into the table: "Order" */
	insert_Order_one?: GraphQLTypes["Order"] | undefined,
	/** insert data into the table: "Product" */
	insert_Product?: GraphQLTypes["Product_mutation_response"] | undefined,
	/** insert a single row into the table: "Product" */
	insert_Product_one?: GraphQLTypes["Product"] | undefined,
	/** insert data into the table: "Profile" */
	insert_Profile?: GraphQLTypes["Profile_mutation_response"] | undefined,
	/** insert a single row into the table: "Profile" */
	insert_Profile_one?: GraphQLTypes["Profile"] | undefined,
	/** insert data into the table: "Transaction" */
	insert_Transaction?: GraphQLTypes["Transaction_mutation_response"] | undefined,
	/** insert data into the table: "TransactionReview" */
	insert_TransactionReview?: GraphQLTypes["TransactionReview_mutation_response"] | undefined,
	/** insert a single row into the table: "TransactionReview" */
	insert_TransactionReview_one?: GraphQLTypes["TransactionReview"] | undefined,
	/** insert a single row into the table: "Transaction" */
	insert_Transaction_one?: GraphQLTypes["Transaction"] | undefined,
	/** insert data into the table: "_prisma_migrations" */
	insert__prisma_migrations?: GraphQLTypes["_prisma_migrations_mutation_response"] | undefined,
	/** insert a single row into the table: "_prisma_migrations" */
	insert__prisma_migrations_one?: GraphQLTypes["_prisma_migrations"] | undefined,
	/** update data of the table: "Business" */
	update_Business?: GraphQLTypes["Business_mutation_response"] | undefined,
	/** update data of the table: "BusinessProduct" */
	update_BusinessProduct?: GraphQLTypes["BusinessProduct_mutation_response"] | undefined,
	/** update single row of the table: "BusinessProduct" */
	update_BusinessProduct_by_pk?: GraphQLTypes["BusinessProduct"] | undefined,
	/** update multiples rows of table: "BusinessProduct" */
	update_BusinessProduct_many?: Array<GraphQLTypes["BusinessProduct_mutation_response"] | undefined> | undefined,
	/** update data of the table: "BusinessWorker" */
	update_BusinessWorker?: GraphQLTypes["BusinessWorker_mutation_response"] | undefined,
	/** update single row of the table: "BusinessWorker" */
	update_BusinessWorker_by_pk?: GraphQLTypes["BusinessWorker"] | undefined,
	/** update multiples rows of table: "BusinessWorker" */
	update_BusinessWorker_many?: Array<GraphQLTypes["BusinessWorker_mutation_response"] | undefined> | undefined,
	/** update single row of the table: "Business" */
	update_Business_by_pk?: GraphQLTypes["Business"] | undefined,
	/** update multiples rows of table: "Business" */
	update_Business_many?: Array<GraphQLTypes["Business_mutation_response"] | undefined> | undefined,
	/** update data of the table: "Category" */
	update_Category?: GraphQLTypes["Category_mutation_response"] | undefined,
	/** update single row of the table: "Category" */
	update_Category_by_pk?: GraphQLTypes["Category"] | undefined,
	/** update multiples rows of table: "Category" */
	update_Category_many?: Array<GraphQLTypes["Category_mutation_response"] | undefined> | undefined,
	/** update data of the table: "Certificate" */
	update_Certificate?: GraphQLTypes["Certificate_mutation_response"] | undefined,
	/** update data of the table: "CertificateCategory" */
	update_CertificateCategory?: GraphQLTypes["CertificateCategory_mutation_response"] | undefined,
	/** update single row of the table: "CertificateCategory" */
	update_CertificateCategory_by_pk?: GraphQLTypes["CertificateCategory"] | undefined,
	/** update multiples rows of table: "CertificateCategory" */
	update_CertificateCategory_many?: Array<GraphQLTypes["CertificateCategory_mutation_response"] | undefined> | undefined,
	/** update data of the table: "CertificateClaim" */
	update_CertificateClaim?: GraphQLTypes["CertificateClaim_mutation_response"] | undefined,
	/** update single row of the table: "CertificateClaim" */
	update_CertificateClaim_by_pk?: GraphQLTypes["CertificateClaim"] | undefined,
	/** update multiples rows of table: "CertificateClaim" */
	update_CertificateClaim_many?: Array<GraphQLTypes["CertificateClaim_mutation_response"] | undefined> | undefined,
	/** update single row of the table: "Certificate" */
	update_Certificate_by_pk?: GraphQLTypes["Certificate"] | undefined,
	/** update multiples rows of table: "Certificate" */
	update_Certificate_many?: Array<GraphQLTypes["Certificate_mutation_response"] | undefined> | undefined,
	/** update data of the table: "Offer" */
	update_Offer?: GraphQLTypes["Offer_mutation_response"] | undefined,
	/** update single row of the table: "Offer" */
	update_Offer_by_pk?: GraphQLTypes["Offer"] | undefined,
	/** update multiples rows of table: "Offer" */
	update_Offer_many?: Array<GraphQLTypes["Offer_mutation_response"] | undefined> | undefined,
	/** update data of the table: "Order" */
	update_Order?: GraphQLTypes["Order_mutation_response"] | undefined,
	/** update single row of the table: "Order" */
	update_Order_by_pk?: GraphQLTypes["Order"] | undefined,
	/** update multiples rows of table: "Order" */
	update_Order_many?: Array<GraphQLTypes["Order_mutation_response"] | undefined> | undefined,
	/** update data of the table: "Product" */
	update_Product?: GraphQLTypes["Product_mutation_response"] | undefined,
	/** update single row of the table: "Product" */
	update_Product_by_pk?: GraphQLTypes["Product"] | undefined,
	/** update multiples rows of table: "Product" */
	update_Product_many?: Array<GraphQLTypes["Product_mutation_response"] | undefined> | undefined,
	/** update data of the table: "Profile" */
	update_Profile?: GraphQLTypes["Profile_mutation_response"] | undefined,
	/** update single row of the table: "Profile" */
	update_Profile_by_pk?: GraphQLTypes["Profile"] | undefined,
	/** update multiples rows of table: "Profile" */
	update_Profile_many?: Array<GraphQLTypes["Profile_mutation_response"] | undefined> | undefined,
	/** update data of the table: "Transaction" */
	update_Transaction?: GraphQLTypes["Transaction_mutation_response"] | undefined,
	/** update data of the table: "TransactionReview" */
	update_TransactionReview?: GraphQLTypes["TransactionReview_mutation_response"] | undefined,
	/** update single row of the table: "TransactionReview" */
	update_TransactionReview_by_pk?: GraphQLTypes["TransactionReview"] | undefined,
	/** update multiples rows of table: "TransactionReview" */
	update_TransactionReview_many?: Array<GraphQLTypes["TransactionReview_mutation_response"] | undefined> | undefined,
	/** update single row of the table: "Transaction" */
	update_Transaction_by_pk?: GraphQLTypes["Transaction"] | undefined,
	/** update multiples rows of table: "Transaction" */
	update_Transaction_many?: Array<GraphQLTypes["Transaction_mutation_response"] | undefined> | undefined,
	/** update data of the table: "_prisma_migrations" */
	update__prisma_migrations?: GraphQLTypes["_prisma_migrations_mutation_response"] | undefined,
	/** update single row of the table: "_prisma_migrations" */
	update__prisma_migrations_by_pk?: GraphQLTypes["_prisma_migrations"] | undefined,
	/** update multiples rows of table: "_prisma_migrations" */
	update__prisma_migrations_many?: Array<GraphQLTypes["_prisma_migrations_mutation_response"] | undefined> | undefined
};
	/** column ordering options */
["order_by"]: order_by;
	["query_root"]: {
	__typename: "query_root",
	/** fetch data from the table: "Business" */
	Business: Array<GraphQLTypes["Business"]>,
	/** fetch data from the table: "BusinessProduct" */
	BusinessProduct: Array<GraphQLTypes["BusinessProduct"]>,
	/** fetch aggregated fields from the table: "BusinessProduct" */
	BusinessProduct_aggregate: GraphQLTypes["BusinessProduct_aggregate"],
	/** fetch data from the table: "BusinessProduct" using primary key columns */
	BusinessProduct_by_pk?: GraphQLTypes["BusinessProduct"] | undefined,
	/** fetch data from the table: "BusinessWorker" */
	BusinessWorker: Array<GraphQLTypes["BusinessWorker"]>,
	/** fetch aggregated fields from the table: "BusinessWorker" */
	BusinessWorker_aggregate: GraphQLTypes["BusinessWorker_aggregate"],
	/** fetch data from the table: "BusinessWorker" using primary key columns */
	BusinessWorker_by_pk?: GraphQLTypes["BusinessWorker"] | undefined,
	/** fetch aggregated fields from the table: "Business" */
	Business_aggregate: GraphQLTypes["Business_aggregate"],
	/** fetch data from the table: "Business" using primary key columns */
	Business_by_pk?: GraphQLTypes["Business"] | undefined,
	/** fetch data from the table: "Category" */
	Category: Array<GraphQLTypes["Category"]>,
	/** fetch aggregated fields from the table: "Category" */
	Category_aggregate: GraphQLTypes["Category_aggregate"],
	/** fetch data from the table: "Category" using primary key columns */
	Category_by_pk?: GraphQLTypes["Category"] | undefined,
	/** fetch data from the table: "Certificate" */
	Certificate: Array<GraphQLTypes["Certificate"]>,
	/** fetch data from the table: "CertificateCategory" */
	CertificateCategory: Array<GraphQLTypes["CertificateCategory"]>,
	/** fetch aggregated fields from the table: "CertificateCategory" */
	CertificateCategory_aggregate: GraphQLTypes["CertificateCategory_aggregate"],
	/** fetch data from the table: "CertificateCategory" using primary key columns */
	CertificateCategory_by_pk?: GraphQLTypes["CertificateCategory"] | undefined,
	/** fetch data from the table: "CertificateClaim" */
	CertificateClaim: Array<GraphQLTypes["CertificateClaim"]>,
	/** fetch aggregated fields from the table: "CertificateClaim" */
	CertificateClaim_aggregate: GraphQLTypes["CertificateClaim_aggregate"],
	/** fetch data from the table: "CertificateClaim" using primary key columns */
	CertificateClaim_by_pk?: GraphQLTypes["CertificateClaim"] | undefined,
	/** fetch aggregated fields from the table: "Certificate" */
	Certificate_aggregate: GraphQLTypes["Certificate_aggregate"],
	/** fetch data from the table: "Certificate" using primary key columns */
	Certificate_by_pk?: GraphQLTypes["Certificate"] | undefined,
	/** fetch data from the table: "Offer" */
	Offer: Array<GraphQLTypes["Offer"]>,
	/** fetch aggregated fields from the table: "Offer" */
	Offer_aggregate: GraphQLTypes["Offer_aggregate"],
	/** fetch data from the table: "Offer" using primary key columns */
	Offer_by_pk?: GraphQLTypes["Offer"] | undefined,
	/** fetch data from the table: "Order" */
	Order: Array<GraphQLTypes["Order"]>,
	/** fetch aggregated fields from the table: "Order" */
	Order_aggregate: GraphQLTypes["Order_aggregate"],
	/** fetch data from the table: "Order" using primary key columns */
	Order_by_pk?: GraphQLTypes["Order"] | undefined,
	/** fetch data from the table: "Product" */
	Product: Array<GraphQLTypes["Product"]>,
	/** fetch aggregated fields from the table: "Product" */
	Product_aggregate: GraphQLTypes["Product_aggregate"],
	/** fetch data from the table: "Product" using primary key columns */
	Product_by_pk?: GraphQLTypes["Product"] | undefined,
	/** fetch data from the table: "Profile" */
	Profile: Array<GraphQLTypes["Profile"]>,
	/** fetch aggregated fields from the table: "Profile" */
	Profile_aggregate: GraphQLTypes["Profile_aggregate"],
	/** fetch data from the table: "Profile" using primary key columns */
	Profile_by_pk?: GraphQLTypes["Profile"] | undefined,
	/** fetch data from the table: "Transaction" */
	Transaction: Array<GraphQLTypes["Transaction"]>,
	/** fetch data from the table: "TransactionReview" */
	TransactionReview: Array<GraphQLTypes["TransactionReview"]>,
	/** fetch aggregated fields from the table: "TransactionReview" */
	TransactionReview_aggregate: GraphQLTypes["TransactionReview_aggregate"],
	/** fetch data from the table: "TransactionReview" using primary key columns */
	TransactionReview_by_pk?: GraphQLTypes["TransactionReview"] | undefined,
	/** fetch aggregated fields from the table: "Transaction" */
	Transaction_aggregate: GraphQLTypes["Transaction_aggregate"],
	/** fetch data from the table: "Transaction" using primary key columns */
	Transaction_by_pk?: GraphQLTypes["Transaction"] | undefined,
	/** fetch data from the table: "_prisma_migrations" */
	_prisma_migrations: Array<GraphQLTypes["_prisma_migrations"]>,
	/** fetch aggregated fields from the table: "_prisma_migrations" */
	_prisma_migrations_aggregate: GraphQLTypes["_prisma_migrations_aggregate"],
	/** fetch data from the table: "_prisma_migrations" using primary key columns */
	_prisma_migrations_by_pk?: GraphQLTypes["_prisma_migrations"] | undefined
};
	["subscription_root"]: {
	__typename: "subscription_root",
	/** fetch data from the table: "Business" */
	Business: Array<GraphQLTypes["Business"]>,
	/** fetch data from the table: "BusinessProduct" */
	BusinessProduct: Array<GraphQLTypes["BusinessProduct"]>,
	/** fetch aggregated fields from the table: "BusinessProduct" */
	BusinessProduct_aggregate: GraphQLTypes["BusinessProduct_aggregate"],
	/** fetch data from the table: "BusinessProduct" using primary key columns */
	BusinessProduct_by_pk?: GraphQLTypes["BusinessProduct"] | undefined,
	/** fetch data from the table in a streaming manner: "BusinessProduct" */
	BusinessProduct_stream: Array<GraphQLTypes["BusinessProduct"]>,
	/** fetch data from the table: "BusinessWorker" */
	BusinessWorker: Array<GraphQLTypes["BusinessWorker"]>,
	/** fetch aggregated fields from the table: "BusinessWorker" */
	BusinessWorker_aggregate: GraphQLTypes["BusinessWorker_aggregate"],
	/** fetch data from the table: "BusinessWorker" using primary key columns */
	BusinessWorker_by_pk?: GraphQLTypes["BusinessWorker"] | undefined,
	/** fetch data from the table in a streaming manner: "BusinessWorker" */
	BusinessWorker_stream: Array<GraphQLTypes["BusinessWorker"]>,
	/** fetch aggregated fields from the table: "Business" */
	Business_aggregate: GraphQLTypes["Business_aggregate"],
	/** fetch data from the table: "Business" using primary key columns */
	Business_by_pk?: GraphQLTypes["Business"] | undefined,
	/** fetch data from the table in a streaming manner: "Business" */
	Business_stream: Array<GraphQLTypes["Business"]>,
	/** fetch data from the table: "Category" */
	Category: Array<GraphQLTypes["Category"]>,
	/** fetch aggregated fields from the table: "Category" */
	Category_aggregate: GraphQLTypes["Category_aggregate"],
	/** fetch data from the table: "Category" using primary key columns */
	Category_by_pk?: GraphQLTypes["Category"] | undefined,
	/** fetch data from the table in a streaming manner: "Category" */
	Category_stream: Array<GraphQLTypes["Category"]>,
	/** fetch data from the table: "Certificate" */
	Certificate: Array<GraphQLTypes["Certificate"]>,
	/** fetch data from the table: "CertificateCategory" */
	CertificateCategory: Array<GraphQLTypes["CertificateCategory"]>,
	/** fetch aggregated fields from the table: "CertificateCategory" */
	CertificateCategory_aggregate: GraphQLTypes["CertificateCategory_aggregate"],
	/** fetch data from the table: "CertificateCategory" using primary key columns */
	CertificateCategory_by_pk?: GraphQLTypes["CertificateCategory"] | undefined,
	/** fetch data from the table in a streaming manner: "CertificateCategory" */
	CertificateCategory_stream: Array<GraphQLTypes["CertificateCategory"]>,
	/** fetch data from the table: "CertificateClaim" */
	CertificateClaim: Array<GraphQLTypes["CertificateClaim"]>,
	/** fetch aggregated fields from the table: "CertificateClaim" */
	CertificateClaim_aggregate: GraphQLTypes["CertificateClaim_aggregate"],
	/** fetch data from the table: "CertificateClaim" using primary key columns */
	CertificateClaim_by_pk?: GraphQLTypes["CertificateClaim"] | undefined,
	/** fetch data from the table in a streaming manner: "CertificateClaim" */
	CertificateClaim_stream: Array<GraphQLTypes["CertificateClaim"]>,
	/** fetch aggregated fields from the table: "Certificate" */
	Certificate_aggregate: GraphQLTypes["Certificate_aggregate"],
	/** fetch data from the table: "Certificate" using primary key columns */
	Certificate_by_pk?: GraphQLTypes["Certificate"] | undefined,
	/** fetch data from the table in a streaming manner: "Certificate" */
	Certificate_stream: Array<GraphQLTypes["Certificate"]>,
	/** fetch data from the table: "Offer" */
	Offer: Array<GraphQLTypes["Offer"]>,
	/** fetch aggregated fields from the table: "Offer" */
	Offer_aggregate: GraphQLTypes["Offer_aggregate"],
	/** fetch data from the table: "Offer" using primary key columns */
	Offer_by_pk?: GraphQLTypes["Offer"] | undefined,
	/** fetch data from the table in a streaming manner: "Offer" */
	Offer_stream: Array<GraphQLTypes["Offer"]>,
	/** fetch data from the table: "Order" */
	Order: Array<GraphQLTypes["Order"]>,
	/** fetch aggregated fields from the table: "Order" */
	Order_aggregate: GraphQLTypes["Order_aggregate"],
	/** fetch data from the table: "Order" using primary key columns */
	Order_by_pk?: GraphQLTypes["Order"] | undefined,
	/** fetch data from the table in a streaming manner: "Order" */
	Order_stream: Array<GraphQLTypes["Order"]>,
	/** fetch data from the table: "Product" */
	Product: Array<GraphQLTypes["Product"]>,
	/** fetch aggregated fields from the table: "Product" */
	Product_aggregate: GraphQLTypes["Product_aggregate"],
	/** fetch data from the table: "Product" using primary key columns */
	Product_by_pk?: GraphQLTypes["Product"] | undefined,
	/** fetch data from the table in a streaming manner: "Product" */
	Product_stream: Array<GraphQLTypes["Product"]>,
	/** fetch data from the table: "Profile" */
	Profile: Array<GraphQLTypes["Profile"]>,
	/** fetch aggregated fields from the table: "Profile" */
	Profile_aggregate: GraphQLTypes["Profile_aggregate"],
	/** fetch data from the table: "Profile" using primary key columns */
	Profile_by_pk?: GraphQLTypes["Profile"] | undefined,
	/** fetch data from the table in a streaming manner: "Profile" */
	Profile_stream: Array<GraphQLTypes["Profile"]>,
	/** fetch data from the table: "Transaction" */
	Transaction: Array<GraphQLTypes["Transaction"]>,
	/** fetch data from the table: "TransactionReview" */
	TransactionReview: Array<GraphQLTypes["TransactionReview"]>,
	/** fetch aggregated fields from the table: "TransactionReview" */
	TransactionReview_aggregate: GraphQLTypes["TransactionReview_aggregate"],
	/** fetch data from the table: "TransactionReview" using primary key columns */
	TransactionReview_by_pk?: GraphQLTypes["TransactionReview"] | undefined,
	/** fetch data from the table in a streaming manner: "TransactionReview" */
	TransactionReview_stream: Array<GraphQLTypes["TransactionReview"]>,
	/** fetch aggregated fields from the table: "Transaction" */
	Transaction_aggregate: GraphQLTypes["Transaction_aggregate"],
	/** fetch data from the table: "Transaction" using primary key columns */
	Transaction_by_pk?: GraphQLTypes["Transaction"] | undefined,
	/** fetch data from the table in a streaming manner: "Transaction" */
	Transaction_stream: Array<GraphQLTypes["Transaction"]>,
	/** fetch data from the table: "_prisma_migrations" */
	_prisma_migrations: Array<GraphQLTypes["_prisma_migrations"]>,
	/** fetch aggregated fields from the table: "_prisma_migrations" */
	_prisma_migrations_aggregate: GraphQLTypes["_prisma_migrations_aggregate"],
	/** fetch data from the table: "_prisma_migrations" using primary key columns */
	_prisma_migrations_by_pk?: GraphQLTypes["_prisma_migrations"] | undefined,
	/** fetch data from the table in a streaming manner: "_prisma_migrations" */
	_prisma_migrations_stream: Array<GraphQLTypes["_prisma_migrations"]>
};
	["timestamp"]: "scalar" & { name: "timestamp" };
	/** Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'. */
["timestamp_comparison_exp"]: {
		_eq?: GraphQLTypes["timestamp"] | undefined,
	_gt?: GraphQLTypes["timestamp"] | undefined,
	_gte?: GraphQLTypes["timestamp"] | undefined,
	_in?: Array<GraphQLTypes["timestamp"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: GraphQLTypes["timestamp"] | undefined,
	_lte?: GraphQLTypes["timestamp"] | undefined,
	_neq?: GraphQLTypes["timestamp"] | undefined,
	_nin?: Array<GraphQLTypes["timestamp"]> | undefined
};
	["timestamptz"]: "scalar" & { name: "timestamptz" };
	/** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
["timestamptz_comparison_exp"]: {
		_eq?: GraphQLTypes["timestamptz"] | undefined,
	_gt?: GraphQLTypes["timestamptz"] | undefined,
	_gte?: GraphQLTypes["timestamptz"] | undefined,
	_in?: Array<GraphQLTypes["timestamptz"]> | undefined,
	_is_null?: boolean | undefined,
	_lt?: GraphQLTypes["timestamptz"] | undefined,
	_lte?: GraphQLTypes["timestamptz"] | undefined,
	_neq?: GraphQLTypes["timestamptz"] | undefined,
	_nin?: Array<GraphQLTypes["timestamptz"]> | undefined
}
    }
/** unique or primary key constraints on table "BusinessProduct" */
export const enum BusinessProduct_constraint {
	BusinessProduct_pkey = "BusinessProduct_pkey"
}
/** select columns of table "BusinessProduct" */
export const enum BusinessProduct_select_column {
	business_id = "business_id",
	created_at = "created_at",
	id = "id",
	product_id = "product_id",
	updated_at = "updated_at"
}
/** update columns of table "BusinessProduct" */
export const enum BusinessProduct_update_column {
	business_id = "business_id",
	created_at = "created_at",
	id = "id",
	product_id = "product_id",
	updated_at = "updated_at"
}
/** unique or primary key constraints on table "BusinessWorker" */
export const enum BusinessWorker_constraint {
	BusinessWorker_pkey = "BusinessWorker_pkey"
}
/** select columns of table "BusinessWorker" */
export const enum BusinessWorker_select_column {
	business_id = "business_id",
	created_at = "created_at",
	id = "id",
	profile_id = "profile_id",
	role = "role",
	updated_at = "updated_at"
}
/** update columns of table "BusinessWorker" */
export const enum BusinessWorker_update_column {
	business_id = "business_id",
	created_at = "created_at",
	id = "id",
	profile_id = "profile_id",
	role = "role",
	updated_at = "updated_at"
}
/** unique or primary key constraints on table "Business" */
export const enum Business_constraint {
	Business_pkey = "Business_pkey"
}
/** select columns of table "Business" */
export const enum Business_select_column {
	address = "address",
	created_at = "created_at",
	id = "id",
	name = "name",
	phone = "phone",
	updated_at = "updated_at"
}
/** update columns of table "Business" */
export const enum Business_update_column {
	address = "address",
	created_at = "created_at",
	id = "id",
	name = "name",
	phone = "phone",
	updated_at = "updated_at"
}
/** unique or primary key constraints on table "Category" */
export const enum Category_constraint {
	Category_pkey = "Category_pkey"
}
/** select columns of table "Category" */
export const enum Category_select_column {
	created_at = "created_at",
	id = "id",
	name = "name",
	parent_id = "parent_id",
	updated_at = "updated_at"
}
/** update columns of table "Category" */
export const enum Category_update_column {
	created_at = "created_at",
	id = "id",
	name = "name",
	parent_id = "parent_id",
	updated_at = "updated_at"
}
/** unique or primary key constraints on table "CertificateCategory" */
export const enum CertificateCategory_constraint {
	CertificateCategory_pkey = "CertificateCategory_pkey"
}
/** select columns of table "CertificateCategory" */
export const enum CertificateCategory_select_column {
	created_at = "created_at",
	id = "id",
	name = "name",
	updated_at = "updated_at"
}
/** update columns of table "CertificateCategory" */
export const enum CertificateCategory_update_column {
	created_at = "created_at",
	id = "id",
	name = "name",
	updated_at = "updated_at"
}
/** unique or primary key constraints on table "CertificateClaim" */
export const enum CertificateClaim_constraint {
	CertificateClaim_pkey = "CertificateClaim_pkey"
}
/** select columns of table "CertificateClaim" */
export const enum CertificateClaim_select_column {
	business_id = "business_id",
	certificate_id = "certificate_id",
	created_at = "created_at",
	id = "id",
	status = "status",
	updated_at = "updated_at"
}
/** update columns of table "CertificateClaim" */
export const enum CertificateClaim_update_column {
	business_id = "business_id",
	certificate_id = "certificate_id",
	created_at = "created_at",
	id = "id",
	status = "status",
	updated_at = "updated_at"
}
/** unique or primary key constraints on table "Certificate" */
export const enum Certificate_constraint {
	Certificate_pkey = "Certificate_pkey"
}
/** select columns of table "Certificate" */
export const enum Certificate_select_column {
	certificateCategory_id = "certificateCategory_id",
	created_at = "created_at",
	icon_url = "icon_url",
	id = "id",
	image_url = "image_url",
	name = "name",
	updated_at = "updated_at"
}
/** update columns of table "Certificate" */
export const enum Certificate_update_column {
	certificateCategory_id = "certificateCategory_id",
	created_at = "created_at",
	icon_url = "icon_url",
	id = "id",
	image_url = "image_url",
	name = "name",
	updated_at = "updated_at"
}
/** unique or primary key constraints on table "Offer" */
export const enum Offer_constraint {
	Offer_pkey = "Offer_pkey"
}
/** select columns of table "Offer" */
export const enum Offer_select_column {
	active = "active",
	business_id = "business_id",
	created_at = "created_at",
	end_date = "end_date",
	harvest_date = "harvest_date",
	id = "id",
	packaging = "packaging",
	price_per_unit = "price_per_unit",
	product_id = "product_id",
	quantity = "quantity",
	updated_at = "updated_at"
}
/** select "Offer_aggregate_bool_exp_avg_arguments_columns" columns of table "Offer" */
export const enum Offer_select_column_Offer_aggregate_bool_exp_avg_arguments_columns {
	packaging = "packaging",
	price_per_unit = "price_per_unit",
	quantity = "quantity"
}
/** select "Offer_aggregate_bool_exp_bool_and_arguments_columns" columns of table "Offer" */
export const enum Offer_select_column_Offer_aggregate_bool_exp_bool_and_arguments_columns {
	active = "active"
}
/** select "Offer_aggregate_bool_exp_bool_or_arguments_columns" columns of table "Offer" */
export const enum Offer_select_column_Offer_aggregate_bool_exp_bool_or_arguments_columns {
	active = "active"
}
/** select "Offer_aggregate_bool_exp_corr_arguments_columns" columns of table "Offer" */
export const enum Offer_select_column_Offer_aggregate_bool_exp_corr_arguments_columns {
	packaging = "packaging",
	price_per_unit = "price_per_unit",
	quantity = "quantity"
}
/** select "Offer_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "Offer" */
export const enum Offer_select_column_Offer_aggregate_bool_exp_covar_samp_arguments_columns {
	packaging = "packaging",
	price_per_unit = "price_per_unit",
	quantity = "quantity"
}
/** select "Offer_aggregate_bool_exp_max_arguments_columns" columns of table "Offer" */
export const enum Offer_select_column_Offer_aggregate_bool_exp_max_arguments_columns {
	packaging = "packaging",
	price_per_unit = "price_per_unit",
	quantity = "quantity"
}
/** select "Offer_aggregate_bool_exp_min_arguments_columns" columns of table "Offer" */
export const enum Offer_select_column_Offer_aggregate_bool_exp_min_arguments_columns {
	packaging = "packaging",
	price_per_unit = "price_per_unit",
	quantity = "quantity"
}
/** select "Offer_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "Offer" */
export const enum Offer_select_column_Offer_aggregate_bool_exp_stddev_samp_arguments_columns {
	packaging = "packaging",
	price_per_unit = "price_per_unit",
	quantity = "quantity"
}
/** select "Offer_aggregate_bool_exp_sum_arguments_columns" columns of table "Offer" */
export const enum Offer_select_column_Offer_aggregate_bool_exp_sum_arguments_columns {
	packaging = "packaging",
	price_per_unit = "price_per_unit",
	quantity = "quantity"
}
/** select "Offer_aggregate_bool_exp_var_samp_arguments_columns" columns of table "Offer" */
export const enum Offer_select_column_Offer_aggregate_bool_exp_var_samp_arguments_columns {
	packaging = "packaging",
	price_per_unit = "price_per_unit",
	quantity = "quantity"
}
/** update columns of table "Offer" */
export const enum Offer_update_column {
	active = "active",
	business_id = "business_id",
	created_at = "created_at",
	end_date = "end_date",
	harvest_date = "harvest_date",
	id = "id",
	packaging = "packaging",
	price_per_unit = "price_per_unit",
	product_id = "product_id",
	quantity = "quantity",
	updated_at = "updated_at"
}
/** unique or primary key constraints on table "Order" */
export const enum Order_constraint {
	Order_pkey = "Order_pkey"
}
/** select columns of table "Order" */
export const enum Order_select_column {
	business_id = "business_id",
	created_at = "created_at",
	end_date = "end_date",
	id = "id",
	offer_type = "offer_type",
	price_per_unit = "price_per_unit",
	product_id = "product_id",
	quantity_by_units = "quantity_by_units",
	start_date = "start_date",
	updated_at = "updated_at"
}
/** select "Order_aggregate_bool_exp_avg_arguments_columns" columns of table "Order" */
export const enum Order_select_column_Order_aggregate_bool_exp_avg_arguments_columns {
	price_per_unit = "price_per_unit",
	quantity_by_units = "quantity_by_units"
}
/** select "Order_aggregate_bool_exp_corr_arguments_columns" columns of table "Order" */
export const enum Order_select_column_Order_aggregate_bool_exp_corr_arguments_columns {
	price_per_unit = "price_per_unit",
	quantity_by_units = "quantity_by_units"
}
/** select "Order_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "Order" */
export const enum Order_select_column_Order_aggregate_bool_exp_covar_samp_arguments_columns {
	price_per_unit = "price_per_unit",
	quantity_by_units = "quantity_by_units"
}
/** select "Order_aggregate_bool_exp_max_arguments_columns" columns of table "Order" */
export const enum Order_select_column_Order_aggregate_bool_exp_max_arguments_columns {
	price_per_unit = "price_per_unit",
	quantity_by_units = "quantity_by_units"
}
/** select "Order_aggregate_bool_exp_min_arguments_columns" columns of table "Order" */
export const enum Order_select_column_Order_aggregate_bool_exp_min_arguments_columns {
	price_per_unit = "price_per_unit",
	quantity_by_units = "quantity_by_units"
}
/** select "Order_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "Order" */
export const enum Order_select_column_Order_aggregate_bool_exp_stddev_samp_arguments_columns {
	price_per_unit = "price_per_unit",
	quantity_by_units = "quantity_by_units"
}
/** select "Order_aggregate_bool_exp_sum_arguments_columns" columns of table "Order" */
export const enum Order_select_column_Order_aggregate_bool_exp_sum_arguments_columns {
	price_per_unit = "price_per_unit",
	quantity_by_units = "quantity_by_units"
}
/** select "Order_aggregate_bool_exp_var_samp_arguments_columns" columns of table "Order" */
export const enum Order_select_column_Order_aggregate_bool_exp_var_samp_arguments_columns {
	price_per_unit = "price_per_unit",
	quantity_by_units = "quantity_by_units"
}
/** update columns of table "Order" */
export const enum Order_update_column {
	business_id = "business_id",
	created_at = "created_at",
	end_date = "end_date",
	id = "id",
	offer_type = "offer_type",
	price_per_unit = "price_per_unit",
	product_id = "product_id",
	quantity_by_units = "quantity_by_units",
	start_date = "start_date",
	updated_at = "updated_at"
}
/** unique or primary key constraints on table "Product" */
export const enum Product_constraint {
	Product_pkey = "Product_pkey"
}
/** select columns of table "Product" */
export const enum Product_select_column {
	category_id = "category_id",
	created_at = "created_at",
	id = "id",
	image_url = "image_url",
	measurement_unit = "measurement_unit",
	name = "name",
	updated_at = "updated_at"
}
/** update columns of table "Product" */
export const enum Product_update_column {
	category_id = "category_id",
	created_at = "created_at",
	id = "id",
	image_url = "image_url",
	measurement_unit = "measurement_unit",
	name = "name",
	updated_at = "updated_at"
}
/** unique or primary key constraints on table "Profile" */
export const enum Profile_constraint {
	Profile_pkey = "Profile_pkey"
}
/** select columns of table "Profile" */
export const enum Profile_select_column {
	created_at = "created_at",
	first_name = "first_name",
	id = "id",
	last_name = "last_name",
	phone = "phone",
	updated_at = "updated_at"
}
/** update columns of table "Profile" */
export const enum Profile_update_column {
	created_at = "created_at",
	first_name = "first_name",
	id = "id",
	last_name = "last_name",
	phone = "phone",
	updated_at = "updated_at"
}
/** unique or primary key constraints on table "TransactionReview" */
export const enum TransactionReview_constraint {
	TransactionReview_pkey = "TransactionReview_pkey"
}
/** select columns of table "TransactionReview" */
export const enum TransactionReview_select_column {
	comment = "comment",
	created_at = "created_at",
	id = "id",
	rating = "rating",
	transaction_id = "transaction_id",
	updated_at = "updated_at"
}
/** update columns of table "TransactionReview" */
export const enum TransactionReview_update_column {
	comment = "comment",
	created_at = "created_at",
	id = "id",
	rating = "rating",
	transaction_id = "transaction_id",
	updated_at = "updated_at"
}
/** unique or primary key constraints on table "Transaction" */
export const enum Transaction_constraint {
	Transaction_pkey = "Transaction_pkey"
}
/** select columns of table "Transaction" */
export const enum Transaction_select_column {
	buy_order_id = "buy_order_id",
	created_at = "created_at",
	id = "id",
	profile_id = "profile_id",
	sell_order_id = "sell_order_id",
	status = "status",
	updated_at = "updated_at"
}
/** update columns of table "Transaction" */
export const enum Transaction_update_column {
	buy_order_id = "buy_order_id",
	created_at = "created_at",
	id = "id",
	profile_id = "profile_id",
	sell_order_id = "sell_order_id",
	status = "status",
	updated_at = "updated_at"
}
/** unique or primary key constraints on table "_prisma_migrations" */
export const enum _prisma_migrations_constraint {
	_prisma_migrations_pkey = "_prisma_migrations_pkey"
}
/** select columns of table "_prisma_migrations" */
export const enum _prisma_migrations_select_column {
	applied_steps_count = "applied_steps_count",
	checksum = "checksum",
	finished_at = "finished_at",
	id = "id",
	logs = "logs",
	migration_name = "migration_name",
	rolled_back_at = "rolled_back_at",
	started_at = "started_at"
}
/** update columns of table "_prisma_migrations" */
export const enum _prisma_migrations_update_column {
	applied_steps_count = "applied_steps_count",
	checksum = "checksum",
	finished_at = "finished_at",
	id = "id",
	logs = "logs",
	migration_name = "migration_name",
	rolled_back_at = "rolled_back_at",
	started_at = "started_at"
}
/** ordering argument of a cursor */
export const enum cursor_ordering {
	ASC = "ASC",
	DESC = "DESC"
}
/** column ordering options */
export const enum order_by {
	asc = "asc",
	asc_nulls_first = "asc_nulls_first",
	asc_nulls_last = "asc_nulls_last",
	desc = "desc",
	desc_nulls_first = "desc_nulls_first",
	desc_nulls_last = "desc_nulls_last"
}

type ZEUS_VARIABLES = {
	["Boolean_comparison_exp"]: ValueTypes["Boolean_comparison_exp"];
	["BusinessProduct_aggregate_bool_exp"]: ValueTypes["BusinessProduct_aggregate_bool_exp"];
	["BusinessProduct_aggregate_bool_exp_count"]: ValueTypes["BusinessProduct_aggregate_bool_exp_count"];
	["BusinessProduct_aggregate_order_by"]: ValueTypes["BusinessProduct_aggregate_order_by"];
	["BusinessProduct_arr_rel_insert_input"]: ValueTypes["BusinessProduct_arr_rel_insert_input"];
	["BusinessProduct_avg_order_by"]: ValueTypes["BusinessProduct_avg_order_by"];
	["BusinessProduct_bool_exp"]: ValueTypes["BusinessProduct_bool_exp"];
	["BusinessProduct_constraint"]: ValueTypes["BusinessProduct_constraint"];
	["BusinessProduct_inc_input"]: ValueTypes["BusinessProduct_inc_input"];
	["BusinessProduct_insert_input"]: ValueTypes["BusinessProduct_insert_input"];
	["BusinessProduct_max_order_by"]: ValueTypes["BusinessProduct_max_order_by"];
	["BusinessProduct_min_order_by"]: ValueTypes["BusinessProduct_min_order_by"];
	["BusinessProduct_on_conflict"]: ValueTypes["BusinessProduct_on_conflict"];
	["BusinessProduct_order_by"]: ValueTypes["BusinessProduct_order_by"];
	["BusinessProduct_pk_columns_input"]: ValueTypes["BusinessProduct_pk_columns_input"];
	["BusinessProduct_select_column"]: ValueTypes["BusinessProduct_select_column"];
	["BusinessProduct_set_input"]: ValueTypes["BusinessProduct_set_input"];
	["BusinessProduct_stddev_order_by"]: ValueTypes["BusinessProduct_stddev_order_by"];
	["BusinessProduct_stddev_pop_order_by"]: ValueTypes["BusinessProduct_stddev_pop_order_by"];
	["BusinessProduct_stddev_samp_order_by"]: ValueTypes["BusinessProduct_stddev_samp_order_by"];
	["BusinessProduct_stream_cursor_input"]: ValueTypes["BusinessProduct_stream_cursor_input"];
	["BusinessProduct_stream_cursor_value_input"]: ValueTypes["BusinessProduct_stream_cursor_value_input"];
	["BusinessProduct_sum_order_by"]: ValueTypes["BusinessProduct_sum_order_by"];
	["BusinessProduct_update_column"]: ValueTypes["BusinessProduct_update_column"];
	["BusinessProduct_updates"]: ValueTypes["BusinessProduct_updates"];
	["BusinessProduct_var_pop_order_by"]: ValueTypes["BusinessProduct_var_pop_order_by"];
	["BusinessProduct_var_samp_order_by"]: ValueTypes["BusinessProduct_var_samp_order_by"];
	["BusinessProduct_variance_order_by"]: ValueTypes["BusinessProduct_variance_order_by"];
	["BusinessWorker_aggregate_bool_exp"]: ValueTypes["BusinessWorker_aggregate_bool_exp"];
	["BusinessWorker_aggregate_bool_exp_count"]: ValueTypes["BusinessWorker_aggregate_bool_exp_count"];
	["BusinessWorker_aggregate_order_by"]: ValueTypes["BusinessWorker_aggregate_order_by"];
	["BusinessWorker_arr_rel_insert_input"]: ValueTypes["BusinessWorker_arr_rel_insert_input"];
	["BusinessWorker_avg_order_by"]: ValueTypes["BusinessWorker_avg_order_by"];
	["BusinessWorker_bool_exp"]: ValueTypes["BusinessWorker_bool_exp"];
	["BusinessWorker_constraint"]: ValueTypes["BusinessWorker_constraint"];
	["BusinessWorker_inc_input"]: ValueTypes["BusinessWorker_inc_input"];
	["BusinessWorker_insert_input"]: ValueTypes["BusinessWorker_insert_input"];
	["BusinessWorker_max_order_by"]: ValueTypes["BusinessWorker_max_order_by"];
	["BusinessWorker_min_order_by"]: ValueTypes["BusinessWorker_min_order_by"];
	["BusinessWorker_on_conflict"]: ValueTypes["BusinessWorker_on_conflict"];
	["BusinessWorker_order_by"]: ValueTypes["BusinessWorker_order_by"];
	["BusinessWorker_pk_columns_input"]: ValueTypes["BusinessWorker_pk_columns_input"];
	["BusinessWorker_select_column"]: ValueTypes["BusinessWorker_select_column"];
	["BusinessWorker_set_input"]: ValueTypes["BusinessWorker_set_input"];
	["BusinessWorker_stddev_order_by"]: ValueTypes["BusinessWorker_stddev_order_by"];
	["BusinessWorker_stddev_pop_order_by"]: ValueTypes["BusinessWorker_stddev_pop_order_by"];
	["BusinessWorker_stddev_samp_order_by"]: ValueTypes["BusinessWorker_stddev_samp_order_by"];
	["BusinessWorker_stream_cursor_input"]: ValueTypes["BusinessWorker_stream_cursor_input"];
	["BusinessWorker_stream_cursor_value_input"]: ValueTypes["BusinessWorker_stream_cursor_value_input"];
	["BusinessWorker_sum_order_by"]: ValueTypes["BusinessWorker_sum_order_by"];
	["BusinessWorker_update_column"]: ValueTypes["BusinessWorker_update_column"];
	["BusinessWorker_updates"]: ValueTypes["BusinessWorker_updates"];
	["BusinessWorker_var_pop_order_by"]: ValueTypes["BusinessWorker_var_pop_order_by"];
	["BusinessWorker_var_samp_order_by"]: ValueTypes["BusinessWorker_var_samp_order_by"];
	["BusinessWorker_variance_order_by"]: ValueTypes["BusinessWorker_variance_order_by"];
	["Business_bool_exp"]: ValueTypes["Business_bool_exp"];
	["Business_constraint"]: ValueTypes["Business_constraint"];
	["Business_inc_input"]: ValueTypes["Business_inc_input"];
	["Business_insert_input"]: ValueTypes["Business_insert_input"];
	["Business_obj_rel_insert_input"]: ValueTypes["Business_obj_rel_insert_input"];
	["Business_on_conflict"]: ValueTypes["Business_on_conflict"];
	["Business_order_by"]: ValueTypes["Business_order_by"];
	["Business_pk_columns_input"]: ValueTypes["Business_pk_columns_input"];
	["Business_select_column"]: ValueTypes["Business_select_column"];
	["Business_set_input"]: ValueTypes["Business_set_input"];
	["Business_stream_cursor_input"]: ValueTypes["Business_stream_cursor_input"];
	["Business_stream_cursor_value_input"]: ValueTypes["Business_stream_cursor_value_input"];
	["Business_update_column"]: ValueTypes["Business_update_column"];
	["Business_updates"]: ValueTypes["Business_updates"];
	["Category_aggregate_bool_exp"]: ValueTypes["Category_aggregate_bool_exp"];
	["Category_aggregate_bool_exp_count"]: ValueTypes["Category_aggregate_bool_exp_count"];
	["Category_aggregate_order_by"]: ValueTypes["Category_aggregate_order_by"];
	["Category_arr_rel_insert_input"]: ValueTypes["Category_arr_rel_insert_input"];
	["Category_avg_order_by"]: ValueTypes["Category_avg_order_by"];
	["Category_bool_exp"]: ValueTypes["Category_bool_exp"];
	["Category_constraint"]: ValueTypes["Category_constraint"];
	["Category_inc_input"]: ValueTypes["Category_inc_input"];
	["Category_insert_input"]: ValueTypes["Category_insert_input"];
	["Category_max_order_by"]: ValueTypes["Category_max_order_by"];
	["Category_min_order_by"]: ValueTypes["Category_min_order_by"];
	["Category_obj_rel_insert_input"]: ValueTypes["Category_obj_rel_insert_input"];
	["Category_on_conflict"]: ValueTypes["Category_on_conflict"];
	["Category_order_by"]: ValueTypes["Category_order_by"];
	["Category_pk_columns_input"]: ValueTypes["Category_pk_columns_input"];
	["Category_select_column"]: ValueTypes["Category_select_column"];
	["Category_set_input"]: ValueTypes["Category_set_input"];
	["Category_stddev_order_by"]: ValueTypes["Category_stddev_order_by"];
	["Category_stddev_pop_order_by"]: ValueTypes["Category_stddev_pop_order_by"];
	["Category_stddev_samp_order_by"]: ValueTypes["Category_stddev_samp_order_by"];
	["Category_stream_cursor_input"]: ValueTypes["Category_stream_cursor_input"];
	["Category_stream_cursor_value_input"]: ValueTypes["Category_stream_cursor_value_input"];
	["Category_sum_order_by"]: ValueTypes["Category_sum_order_by"];
	["Category_update_column"]: ValueTypes["Category_update_column"];
	["Category_updates"]: ValueTypes["Category_updates"];
	["Category_var_pop_order_by"]: ValueTypes["Category_var_pop_order_by"];
	["Category_var_samp_order_by"]: ValueTypes["Category_var_samp_order_by"];
	["Category_variance_order_by"]: ValueTypes["Category_variance_order_by"];
	["CertificateCategory_bool_exp"]: ValueTypes["CertificateCategory_bool_exp"];
	["CertificateCategory_constraint"]: ValueTypes["CertificateCategory_constraint"];
	["CertificateCategory_inc_input"]: ValueTypes["CertificateCategory_inc_input"];
	["CertificateCategory_insert_input"]: ValueTypes["CertificateCategory_insert_input"];
	["CertificateCategory_obj_rel_insert_input"]: ValueTypes["CertificateCategory_obj_rel_insert_input"];
	["CertificateCategory_on_conflict"]: ValueTypes["CertificateCategory_on_conflict"];
	["CertificateCategory_order_by"]: ValueTypes["CertificateCategory_order_by"];
	["CertificateCategory_pk_columns_input"]: ValueTypes["CertificateCategory_pk_columns_input"];
	["CertificateCategory_select_column"]: ValueTypes["CertificateCategory_select_column"];
	["CertificateCategory_set_input"]: ValueTypes["CertificateCategory_set_input"];
	["CertificateCategory_stream_cursor_input"]: ValueTypes["CertificateCategory_stream_cursor_input"];
	["CertificateCategory_stream_cursor_value_input"]: ValueTypes["CertificateCategory_stream_cursor_value_input"];
	["CertificateCategory_update_column"]: ValueTypes["CertificateCategory_update_column"];
	["CertificateCategory_updates"]: ValueTypes["CertificateCategory_updates"];
	["CertificateClaimStatus"]: ValueTypes["CertificateClaimStatus"];
	["CertificateClaimStatus_comparison_exp"]: ValueTypes["CertificateClaimStatus_comparison_exp"];
	["CertificateClaim_aggregate_bool_exp"]: ValueTypes["CertificateClaim_aggregate_bool_exp"];
	["CertificateClaim_aggregate_bool_exp_count"]: ValueTypes["CertificateClaim_aggregate_bool_exp_count"];
	["CertificateClaim_aggregate_order_by"]: ValueTypes["CertificateClaim_aggregate_order_by"];
	["CertificateClaim_arr_rel_insert_input"]: ValueTypes["CertificateClaim_arr_rel_insert_input"];
	["CertificateClaim_avg_order_by"]: ValueTypes["CertificateClaim_avg_order_by"];
	["CertificateClaim_bool_exp"]: ValueTypes["CertificateClaim_bool_exp"];
	["CertificateClaim_constraint"]: ValueTypes["CertificateClaim_constraint"];
	["CertificateClaim_inc_input"]: ValueTypes["CertificateClaim_inc_input"];
	["CertificateClaim_insert_input"]: ValueTypes["CertificateClaim_insert_input"];
	["CertificateClaim_max_order_by"]: ValueTypes["CertificateClaim_max_order_by"];
	["CertificateClaim_min_order_by"]: ValueTypes["CertificateClaim_min_order_by"];
	["CertificateClaim_on_conflict"]: ValueTypes["CertificateClaim_on_conflict"];
	["CertificateClaim_order_by"]: ValueTypes["CertificateClaim_order_by"];
	["CertificateClaim_pk_columns_input"]: ValueTypes["CertificateClaim_pk_columns_input"];
	["CertificateClaim_select_column"]: ValueTypes["CertificateClaim_select_column"];
	["CertificateClaim_set_input"]: ValueTypes["CertificateClaim_set_input"];
	["CertificateClaim_stddev_order_by"]: ValueTypes["CertificateClaim_stddev_order_by"];
	["CertificateClaim_stddev_pop_order_by"]: ValueTypes["CertificateClaim_stddev_pop_order_by"];
	["CertificateClaim_stddev_samp_order_by"]: ValueTypes["CertificateClaim_stddev_samp_order_by"];
	["CertificateClaim_stream_cursor_input"]: ValueTypes["CertificateClaim_stream_cursor_input"];
	["CertificateClaim_stream_cursor_value_input"]: ValueTypes["CertificateClaim_stream_cursor_value_input"];
	["CertificateClaim_sum_order_by"]: ValueTypes["CertificateClaim_sum_order_by"];
	["CertificateClaim_update_column"]: ValueTypes["CertificateClaim_update_column"];
	["CertificateClaim_updates"]: ValueTypes["CertificateClaim_updates"];
	["CertificateClaim_var_pop_order_by"]: ValueTypes["CertificateClaim_var_pop_order_by"];
	["CertificateClaim_var_samp_order_by"]: ValueTypes["CertificateClaim_var_samp_order_by"];
	["CertificateClaim_variance_order_by"]: ValueTypes["CertificateClaim_variance_order_by"];
	["Certificate_aggregate_bool_exp"]: ValueTypes["Certificate_aggregate_bool_exp"];
	["Certificate_aggregate_bool_exp_count"]: ValueTypes["Certificate_aggregate_bool_exp_count"];
	["Certificate_aggregate_order_by"]: ValueTypes["Certificate_aggregate_order_by"];
	["Certificate_arr_rel_insert_input"]: ValueTypes["Certificate_arr_rel_insert_input"];
	["Certificate_avg_order_by"]: ValueTypes["Certificate_avg_order_by"];
	["Certificate_bool_exp"]: ValueTypes["Certificate_bool_exp"];
	["Certificate_constraint"]: ValueTypes["Certificate_constraint"];
	["Certificate_inc_input"]: ValueTypes["Certificate_inc_input"];
	["Certificate_insert_input"]: ValueTypes["Certificate_insert_input"];
	["Certificate_max_order_by"]: ValueTypes["Certificate_max_order_by"];
	["Certificate_min_order_by"]: ValueTypes["Certificate_min_order_by"];
	["Certificate_obj_rel_insert_input"]: ValueTypes["Certificate_obj_rel_insert_input"];
	["Certificate_on_conflict"]: ValueTypes["Certificate_on_conflict"];
	["Certificate_order_by"]: ValueTypes["Certificate_order_by"];
	["Certificate_pk_columns_input"]: ValueTypes["Certificate_pk_columns_input"];
	["Certificate_select_column"]: ValueTypes["Certificate_select_column"];
	["Certificate_set_input"]: ValueTypes["Certificate_set_input"];
	["Certificate_stddev_order_by"]: ValueTypes["Certificate_stddev_order_by"];
	["Certificate_stddev_pop_order_by"]: ValueTypes["Certificate_stddev_pop_order_by"];
	["Certificate_stddev_samp_order_by"]: ValueTypes["Certificate_stddev_samp_order_by"];
	["Certificate_stream_cursor_input"]: ValueTypes["Certificate_stream_cursor_input"];
	["Certificate_stream_cursor_value_input"]: ValueTypes["Certificate_stream_cursor_value_input"];
	["Certificate_sum_order_by"]: ValueTypes["Certificate_sum_order_by"];
	["Certificate_update_column"]: ValueTypes["Certificate_update_column"];
	["Certificate_updates"]: ValueTypes["Certificate_updates"];
	["Certificate_var_pop_order_by"]: ValueTypes["Certificate_var_pop_order_by"];
	["Certificate_var_samp_order_by"]: ValueTypes["Certificate_var_samp_order_by"];
	["Certificate_variance_order_by"]: ValueTypes["Certificate_variance_order_by"];
	["Int_comparison_exp"]: ValueTypes["Int_comparison_exp"];
	["OfferType"]: ValueTypes["OfferType"];
	["OfferType_comparison_exp"]: ValueTypes["OfferType_comparison_exp"];
	["Offer_aggregate_bool_exp"]: ValueTypes["Offer_aggregate_bool_exp"];
	["Offer_aggregate_bool_exp_avg"]: ValueTypes["Offer_aggregate_bool_exp_avg"];
	["Offer_aggregate_bool_exp_bool_and"]: ValueTypes["Offer_aggregate_bool_exp_bool_and"];
	["Offer_aggregate_bool_exp_bool_or"]: ValueTypes["Offer_aggregate_bool_exp_bool_or"];
	["Offer_aggregate_bool_exp_corr"]: ValueTypes["Offer_aggregate_bool_exp_corr"];
	["Offer_aggregate_bool_exp_corr_arguments"]: ValueTypes["Offer_aggregate_bool_exp_corr_arguments"];
	["Offer_aggregate_bool_exp_count"]: ValueTypes["Offer_aggregate_bool_exp_count"];
	["Offer_aggregate_bool_exp_covar_samp"]: ValueTypes["Offer_aggregate_bool_exp_covar_samp"];
	["Offer_aggregate_bool_exp_covar_samp_arguments"]: ValueTypes["Offer_aggregate_bool_exp_covar_samp_arguments"];
	["Offer_aggregate_bool_exp_max"]: ValueTypes["Offer_aggregate_bool_exp_max"];
	["Offer_aggregate_bool_exp_min"]: ValueTypes["Offer_aggregate_bool_exp_min"];
	["Offer_aggregate_bool_exp_stddev_samp"]: ValueTypes["Offer_aggregate_bool_exp_stddev_samp"];
	["Offer_aggregate_bool_exp_sum"]: ValueTypes["Offer_aggregate_bool_exp_sum"];
	["Offer_aggregate_bool_exp_var_samp"]: ValueTypes["Offer_aggregate_bool_exp_var_samp"];
	["Offer_aggregate_order_by"]: ValueTypes["Offer_aggregate_order_by"];
	["Offer_arr_rel_insert_input"]: ValueTypes["Offer_arr_rel_insert_input"];
	["Offer_avg_order_by"]: ValueTypes["Offer_avg_order_by"];
	["Offer_bool_exp"]: ValueTypes["Offer_bool_exp"];
	["Offer_constraint"]: ValueTypes["Offer_constraint"];
	["Offer_inc_input"]: ValueTypes["Offer_inc_input"];
	["Offer_insert_input"]: ValueTypes["Offer_insert_input"];
	["Offer_max_order_by"]: ValueTypes["Offer_max_order_by"];
	["Offer_min_order_by"]: ValueTypes["Offer_min_order_by"];
	["Offer_on_conflict"]: ValueTypes["Offer_on_conflict"];
	["Offer_order_by"]: ValueTypes["Offer_order_by"];
	["Offer_pk_columns_input"]: ValueTypes["Offer_pk_columns_input"];
	["Offer_select_column"]: ValueTypes["Offer_select_column"];
	["Offer_select_column_Offer_aggregate_bool_exp_avg_arguments_columns"]: ValueTypes["Offer_select_column_Offer_aggregate_bool_exp_avg_arguments_columns"];
	["Offer_select_column_Offer_aggregate_bool_exp_bool_and_arguments_columns"]: ValueTypes["Offer_select_column_Offer_aggregate_bool_exp_bool_and_arguments_columns"];
	["Offer_select_column_Offer_aggregate_bool_exp_bool_or_arguments_columns"]: ValueTypes["Offer_select_column_Offer_aggregate_bool_exp_bool_or_arguments_columns"];
	["Offer_select_column_Offer_aggregate_bool_exp_corr_arguments_columns"]: ValueTypes["Offer_select_column_Offer_aggregate_bool_exp_corr_arguments_columns"];
	["Offer_select_column_Offer_aggregate_bool_exp_covar_samp_arguments_columns"]: ValueTypes["Offer_select_column_Offer_aggregate_bool_exp_covar_samp_arguments_columns"];
	["Offer_select_column_Offer_aggregate_bool_exp_max_arguments_columns"]: ValueTypes["Offer_select_column_Offer_aggregate_bool_exp_max_arguments_columns"];
	["Offer_select_column_Offer_aggregate_bool_exp_min_arguments_columns"]: ValueTypes["Offer_select_column_Offer_aggregate_bool_exp_min_arguments_columns"];
	["Offer_select_column_Offer_aggregate_bool_exp_stddev_samp_arguments_columns"]: ValueTypes["Offer_select_column_Offer_aggregate_bool_exp_stddev_samp_arguments_columns"];
	["Offer_select_column_Offer_aggregate_bool_exp_sum_arguments_columns"]: ValueTypes["Offer_select_column_Offer_aggregate_bool_exp_sum_arguments_columns"];
	["Offer_select_column_Offer_aggregate_bool_exp_var_samp_arguments_columns"]: ValueTypes["Offer_select_column_Offer_aggregate_bool_exp_var_samp_arguments_columns"];
	["Offer_set_input"]: ValueTypes["Offer_set_input"];
	["Offer_stddev_order_by"]: ValueTypes["Offer_stddev_order_by"];
	["Offer_stddev_pop_order_by"]: ValueTypes["Offer_stddev_pop_order_by"];
	["Offer_stddev_samp_order_by"]: ValueTypes["Offer_stddev_samp_order_by"];
	["Offer_stream_cursor_input"]: ValueTypes["Offer_stream_cursor_input"];
	["Offer_stream_cursor_value_input"]: ValueTypes["Offer_stream_cursor_value_input"];
	["Offer_sum_order_by"]: ValueTypes["Offer_sum_order_by"];
	["Offer_update_column"]: ValueTypes["Offer_update_column"];
	["Offer_updates"]: ValueTypes["Offer_updates"];
	["Offer_var_pop_order_by"]: ValueTypes["Offer_var_pop_order_by"];
	["Offer_var_samp_order_by"]: ValueTypes["Offer_var_samp_order_by"];
	["Offer_variance_order_by"]: ValueTypes["Offer_variance_order_by"];
	["Order_aggregate_bool_exp"]: ValueTypes["Order_aggregate_bool_exp"];
	["Order_aggregate_bool_exp_avg"]: ValueTypes["Order_aggregate_bool_exp_avg"];
	["Order_aggregate_bool_exp_corr"]: ValueTypes["Order_aggregate_bool_exp_corr"];
	["Order_aggregate_bool_exp_corr_arguments"]: ValueTypes["Order_aggregate_bool_exp_corr_arguments"];
	["Order_aggregate_bool_exp_count"]: ValueTypes["Order_aggregate_bool_exp_count"];
	["Order_aggregate_bool_exp_covar_samp"]: ValueTypes["Order_aggregate_bool_exp_covar_samp"];
	["Order_aggregate_bool_exp_covar_samp_arguments"]: ValueTypes["Order_aggregate_bool_exp_covar_samp_arguments"];
	["Order_aggregate_bool_exp_max"]: ValueTypes["Order_aggregate_bool_exp_max"];
	["Order_aggregate_bool_exp_min"]: ValueTypes["Order_aggregate_bool_exp_min"];
	["Order_aggregate_bool_exp_stddev_samp"]: ValueTypes["Order_aggregate_bool_exp_stddev_samp"];
	["Order_aggregate_bool_exp_sum"]: ValueTypes["Order_aggregate_bool_exp_sum"];
	["Order_aggregate_bool_exp_var_samp"]: ValueTypes["Order_aggregate_bool_exp_var_samp"];
	["Order_aggregate_order_by"]: ValueTypes["Order_aggregate_order_by"];
	["Order_arr_rel_insert_input"]: ValueTypes["Order_arr_rel_insert_input"];
	["Order_avg_order_by"]: ValueTypes["Order_avg_order_by"];
	["Order_bool_exp"]: ValueTypes["Order_bool_exp"];
	["Order_constraint"]: ValueTypes["Order_constraint"];
	["Order_inc_input"]: ValueTypes["Order_inc_input"];
	["Order_insert_input"]: ValueTypes["Order_insert_input"];
	["Order_max_order_by"]: ValueTypes["Order_max_order_by"];
	["Order_min_order_by"]: ValueTypes["Order_min_order_by"];
	["Order_obj_rel_insert_input"]: ValueTypes["Order_obj_rel_insert_input"];
	["Order_on_conflict"]: ValueTypes["Order_on_conflict"];
	["Order_order_by"]: ValueTypes["Order_order_by"];
	["Order_pk_columns_input"]: ValueTypes["Order_pk_columns_input"];
	["Order_select_column"]: ValueTypes["Order_select_column"];
	["Order_select_column_Order_aggregate_bool_exp_avg_arguments_columns"]: ValueTypes["Order_select_column_Order_aggregate_bool_exp_avg_arguments_columns"];
	["Order_select_column_Order_aggregate_bool_exp_corr_arguments_columns"]: ValueTypes["Order_select_column_Order_aggregate_bool_exp_corr_arguments_columns"];
	["Order_select_column_Order_aggregate_bool_exp_covar_samp_arguments_columns"]: ValueTypes["Order_select_column_Order_aggregate_bool_exp_covar_samp_arguments_columns"];
	["Order_select_column_Order_aggregate_bool_exp_max_arguments_columns"]: ValueTypes["Order_select_column_Order_aggregate_bool_exp_max_arguments_columns"];
	["Order_select_column_Order_aggregate_bool_exp_min_arguments_columns"]: ValueTypes["Order_select_column_Order_aggregate_bool_exp_min_arguments_columns"];
	["Order_select_column_Order_aggregate_bool_exp_stddev_samp_arguments_columns"]: ValueTypes["Order_select_column_Order_aggregate_bool_exp_stddev_samp_arguments_columns"];
	["Order_select_column_Order_aggregate_bool_exp_sum_arguments_columns"]: ValueTypes["Order_select_column_Order_aggregate_bool_exp_sum_arguments_columns"];
	["Order_select_column_Order_aggregate_bool_exp_var_samp_arguments_columns"]: ValueTypes["Order_select_column_Order_aggregate_bool_exp_var_samp_arguments_columns"];
	["Order_set_input"]: ValueTypes["Order_set_input"];
	["Order_stddev_order_by"]: ValueTypes["Order_stddev_order_by"];
	["Order_stddev_pop_order_by"]: ValueTypes["Order_stddev_pop_order_by"];
	["Order_stddev_samp_order_by"]: ValueTypes["Order_stddev_samp_order_by"];
	["Order_stream_cursor_input"]: ValueTypes["Order_stream_cursor_input"];
	["Order_stream_cursor_value_input"]: ValueTypes["Order_stream_cursor_value_input"];
	["Order_sum_order_by"]: ValueTypes["Order_sum_order_by"];
	["Order_update_column"]: ValueTypes["Order_update_column"];
	["Order_updates"]: ValueTypes["Order_updates"];
	["Order_var_pop_order_by"]: ValueTypes["Order_var_pop_order_by"];
	["Order_var_samp_order_by"]: ValueTypes["Order_var_samp_order_by"];
	["Order_variance_order_by"]: ValueTypes["Order_variance_order_by"];
	["Product_aggregate_bool_exp"]: ValueTypes["Product_aggregate_bool_exp"];
	["Product_aggregate_bool_exp_count"]: ValueTypes["Product_aggregate_bool_exp_count"];
	["Product_aggregate_order_by"]: ValueTypes["Product_aggregate_order_by"];
	["Product_arr_rel_insert_input"]: ValueTypes["Product_arr_rel_insert_input"];
	["Product_avg_order_by"]: ValueTypes["Product_avg_order_by"];
	["Product_bool_exp"]: ValueTypes["Product_bool_exp"];
	["Product_constraint"]: ValueTypes["Product_constraint"];
	["Product_inc_input"]: ValueTypes["Product_inc_input"];
	["Product_insert_input"]: ValueTypes["Product_insert_input"];
	["Product_max_order_by"]: ValueTypes["Product_max_order_by"];
	["Product_min_order_by"]: ValueTypes["Product_min_order_by"];
	["Product_obj_rel_insert_input"]: ValueTypes["Product_obj_rel_insert_input"];
	["Product_on_conflict"]: ValueTypes["Product_on_conflict"];
	["Product_order_by"]: ValueTypes["Product_order_by"];
	["Product_pk_columns_input"]: ValueTypes["Product_pk_columns_input"];
	["Product_select_column"]: ValueTypes["Product_select_column"];
	["Product_set_input"]: ValueTypes["Product_set_input"];
	["Product_stddev_order_by"]: ValueTypes["Product_stddev_order_by"];
	["Product_stddev_pop_order_by"]: ValueTypes["Product_stddev_pop_order_by"];
	["Product_stddev_samp_order_by"]: ValueTypes["Product_stddev_samp_order_by"];
	["Product_stream_cursor_input"]: ValueTypes["Product_stream_cursor_input"];
	["Product_stream_cursor_value_input"]: ValueTypes["Product_stream_cursor_value_input"];
	["Product_sum_order_by"]: ValueTypes["Product_sum_order_by"];
	["Product_update_column"]: ValueTypes["Product_update_column"];
	["Product_updates"]: ValueTypes["Product_updates"];
	["Product_var_pop_order_by"]: ValueTypes["Product_var_pop_order_by"];
	["Product_var_samp_order_by"]: ValueTypes["Product_var_samp_order_by"];
	["Product_variance_order_by"]: ValueTypes["Product_variance_order_by"];
	["Profile_bool_exp"]: ValueTypes["Profile_bool_exp"];
	["Profile_constraint"]: ValueTypes["Profile_constraint"];
	["Profile_inc_input"]: ValueTypes["Profile_inc_input"];
	["Profile_insert_input"]: ValueTypes["Profile_insert_input"];
	["Profile_obj_rel_insert_input"]: ValueTypes["Profile_obj_rel_insert_input"];
	["Profile_on_conflict"]: ValueTypes["Profile_on_conflict"];
	["Profile_order_by"]: ValueTypes["Profile_order_by"];
	["Profile_pk_columns_input"]: ValueTypes["Profile_pk_columns_input"];
	["Profile_select_column"]: ValueTypes["Profile_select_column"];
	["Profile_set_input"]: ValueTypes["Profile_set_input"];
	["Profile_stream_cursor_input"]: ValueTypes["Profile_stream_cursor_input"];
	["Profile_stream_cursor_value_input"]: ValueTypes["Profile_stream_cursor_value_input"];
	["Profile_update_column"]: ValueTypes["Profile_update_column"];
	["Profile_updates"]: ValueTypes["Profile_updates"];
	["String_comparison_exp"]: ValueTypes["String_comparison_exp"];
	["TransactionReview_aggregate_bool_exp"]: ValueTypes["TransactionReview_aggregate_bool_exp"];
	["TransactionReview_aggregate_bool_exp_count"]: ValueTypes["TransactionReview_aggregate_bool_exp_count"];
	["TransactionReview_aggregate_order_by"]: ValueTypes["TransactionReview_aggregate_order_by"];
	["TransactionReview_arr_rel_insert_input"]: ValueTypes["TransactionReview_arr_rel_insert_input"];
	["TransactionReview_avg_order_by"]: ValueTypes["TransactionReview_avg_order_by"];
	["TransactionReview_bool_exp"]: ValueTypes["TransactionReview_bool_exp"];
	["TransactionReview_constraint"]: ValueTypes["TransactionReview_constraint"];
	["TransactionReview_inc_input"]: ValueTypes["TransactionReview_inc_input"];
	["TransactionReview_insert_input"]: ValueTypes["TransactionReview_insert_input"];
	["TransactionReview_max_order_by"]: ValueTypes["TransactionReview_max_order_by"];
	["TransactionReview_min_order_by"]: ValueTypes["TransactionReview_min_order_by"];
	["TransactionReview_on_conflict"]: ValueTypes["TransactionReview_on_conflict"];
	["TransactionReview_order_by"]: ValueTypes["TransactionReview_order_by"];
	["TransactionReview_pk_columns_input"]: ValueTypes["TransactionReview_pk_columns_input"];
	["TransactionReview_select_column"]: ValueTypes["TransactionReview_select_column"];
	["TransactionReview_set_input"]: ValueTypes["TransactionReview_set_input"];
	["TransactionReview_stddev_order_by"]: ValueTypes["TransactionReview_stddev_order_by"];
	["TransactionReview_stddev_pop_order_by"]: ValueTypes["TransactionReview_stddev_pop_order_by"];
	["TransactionReview_stddev_samp_order_by"]: ValueTypes["TransactionReview_stddev_samp_order_by"];
	["TransactionReview_stream_cursor_input"]: ValueTypes["TransactionReview_stream_cursor_input"];
	["TransactionReview_stream_cursor_value_input"]: ValueTypes["TransactionReview_stream_cursor_value_input"];
	["TransactionReview_sum_order_by"]: ValueTypes["TransactionReview_sum_order_by"];
	["TransactionReview_update_column"]: ValueTypes["TransactionReview_update_column"];
	["TransactionReview_updates"]: ValueTypes["TransactionReview_updates"];
	["TransactionReview_var_pop_order_by"]: ValueTypes["TransactionReview_var_pop_order_by"];
	["TransactionReview_var_samp_order_by"]: ValueTypes["TransactionReview_var_samp_order_by"];
	["TransactionReview_variance_order_by"]: ValueTypes["TransactionReview_variance_order_by"];
	["TransactionStatus"]: ValueTypes["TransactionStatus"];
	["TransactionStatus_comparison_exp"]: ValueTypes["TransactionStatus_comparison_exp"];
	["Transaction_aggregate_bool_exp"]: ValueTypes["Transaction_aggregate_bool_exp"];
	["Transaction_aggregate_bool_exp_count"]: ValueTypes["Transaction_aggregate_bool_exp_count"];
	["Transaction_aggregate_order_by"]: ValueTypes["Transaction_aggregate_order_by"];
	["Transaction_arr_rel_insert_input"]: ValueTypes["Transaction_arr_rel_insert_input"];
	["Transaction_avg_order_by"]: ValueTypes["Transaction_avg_order_by"];
	["Transaction_bool_exp"]: ValueTypes["Transaction_bool_exp"];
	["Transaction_constraint"]: ValueTypes["Transaction_constraint"];
	["Transaction_inc_input"]: ValueTypes["Transaction_inc_input"];
	["Transaction_insert_input"]: ValueTypes["Transaction_insert_input"];
	["Transaction_max_order_by"]: ValueTypes["Transaction_max_order_by"];
	["Transaction_min_order_by"]: ValueTypes["Transaction_min_order_by"];
	["Transaction_obj_rel_insert_input"]: ValueTypes["Transaction_obj_rel_insert_input"];
	["Transaction_on_conflict"]: ValueTypes["Transaction_on_conflict"];
	["Transaction_order_by"]: ValueTypes["Transaction_order_by"];
	["Transaction_pk_columns_input"]: ValueTypes["Transaction_pk_columns_input"];
	["Transaction_select_column"]: ValueTypes["Transaction_select_column"];
	["Transaction_set_input"]: ValueTypes["Transaction_set_input"];
	["Transaction_stddev_order_by"]: ValueTypes["Transaction_stddev_order_by"];
	["Transaction_stddev_pop_order_by"]: ValueTypes["Transaction_stddev_pop_order_by"];
	["Transaction_stddev_samp_order_by"]: ValueTypes["Transaction_stddev_samp_order_by"];
	["Transaction_stream_cursor_input"]: ValueTypes["Transaction_stream_cursor_input"];
	["Transaction_stream_cursor_value_input"]: ValueTypes["Transaction_stream_cursor_value_input"];
	["Transaction_sum_order_by"]: ValueTypes["Transaction_sum_order_by"];
	["Transaction_update_column"]: ValueTypes["Transaction_update_column"];
	["Transaction_updates"]: ValueTypes["Transaction_updates"];
	["Transaction_var_pop_order_by"]: ValueTypes["Transaction_var_pop_order_by"];
	["Transaction_var_samp_order_by"]: ValueTypes["Transaction_var_samp_order_by"];
	["Transaction_variance_order_by"]: ValueTypes["Transaction_variance_order_by"];
	["_prisma_migrations_bool_exp"]: ValueTypes["_prisma_migrations_bool_exp"];
	["_prisma_migrations_constraint"]: ValueTypes["_prisma_migrations_constraint"];
	["_prisma_migrations_inc_input"]: ValueTypes["_prisma_migrations_inc_input"];
	["_prisma_migrations_insert_input"]: ValueTypes["_prisma_migrations_insert_input"];
	["_prisma_migrations_on_conflict"]: ValueTypes["_prisma_migrations_on_conflict"];
	["_prisma_migrations_order_by"]: ValueTypes["_prisma_migrations_order_by"];
	["_prisma_migrations_pk_columns_input"]: ValueTypes["_prisma_migrations_pk_columns_input"];
	["_prisma_migrations_select_column"]: ValueTypes["_prisma_migrations_select_column"];
	["_prisma_migrations_set_input"]: ValueTypes["_prisma_migrations_set_input"];
	["_prisma_migrations_stream_cursor_input"]: ValueTypes["_prisma_migrations_stream_cursor_input"];
	["_prisma_migrations_stream_cursor_value_input"]: ValueTypes["_prisma_migrations_stream_cursor_value_input"];
	["_prisma_migrations_update_column"]: ValueTypes["_prisma_migrations_update_column"];
	["_prisma_migrations_updates"]: ValueTypes["_prisma_migrations_updates"];
	["cursor_ordering"]: ValueTypes["cursor_ordering"];
	["float8"]: ValueTypes["float8"];
	["float8_comparison_exp"]: ValueTypes["float8_comparison_exp"];
	["order_by"]: ValueTypes["order_by"];
	["timestamp"]: ValueTypes["timestamp"];
	["timestamp_comparison_exp"]: ValueTypes["timestamp_comparison_exp"];
	["timestamptz"]: ValueTypes["timestamptz"];
	["timestamptz_comparison_exp"]: ValueTypes["timestamptz_comparison_exp"];
}